/* Copyright (c) 2009 Ricardo Menotti, All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its 
 * documentation for NON-COMERCIAL purposes and without fee is hereby granted 
 * provided that this copyright notice appears in all copies.
 *
 * RICARDO MENOTTI MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR 
 * NON-INFRINGEMENT. RICARDO MENOTTI SHALL NOT BE LIABLE FOR ANY DAMAGES 
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS 
 * SOFTWARE OR ITS DERIVATIVES. 
 */

const DATA_WIDTH = 32;
const ITERATIONS = 1024;

typedef fixed(DATA_WIDTH, 1) int;
typedef fixed(1, 0) bit;

pop_cnt_alp(in bit init, out fixed(DATA_WIDTH, 1) cnt, out bit done) {
	{
		int a [ITERATIONS] = {
			1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
			1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
			1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
			1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
			1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
			1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
			1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,
			1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8,1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 80
		};
		int b[ITERATIONS];
		int sum, word;
		fixed(11, 1) i;
		int	w0000000001;
		int	w0000000002;
		int	w0000000004;
		int	w0000000008;
		int	w0000000016;
		int	w0000000032;
		int	w0000000064;
		int	w0000000128;
		int	w0000000256;
		int	w0000000512;
		int	w0000001024;
		int	w0000002048;
		int	w0000004096;
		int	w0000008192;
		int	w0000016384;
		int	w0000032768;
		int	w0000065536;
		int	w0000131072;
		int	w0000262144;
		int	w0000524288;
		int	w0001048576;
		int	w0002097152;
		int	w0004194304;
		int	w0008388608;
		int	w0016777216;
		int	w0033554432;
		int	w0067108864;
		int	w0134217728;
		int	w0268435456;
		int	w0536870912;
		int	w1073741824;
		int	w2147483648;
		int w01,w02,w03,w04,w05,w06,w07,w08,w09,w10,w11,w12,w13,w14,w15,w16,w17;
		int w18,w19,w20,w21,w22,w23,w24,w25,w26,w27,w28,w29,w30,w31;
	}
	i.clk_en = init;
	counter (i=0; i<ITERATIONS; i++);
	word = a.data_out;
	
	w0000000001 = word & 0000000001;
	w0000000002 = (word & 0000000002)>>1;
		w01 = w0000000001 + w0000000002;
	
	w0000000004 = (word & 0000000004)>>2;
	w0000000008 = (word & 0000000008)>>3;
		w02 = w0000000004 + w0000000008;
			w17 = w01 + w02;
	
	w0000000016 = (word & 0000000016)>>4;
	w0000000032 = (word & 0000000032)>>5;
		w03 = w0000000016 + w0000000032;
		
	w0000000064 = (word & 0000000064)>>6;
	w0000000128 = (word & 0000000128)>>7;
		w04 = w0000000064 + w0000000128;
			w18 = w03 + w04;
				w25 = w17 + w18;
	
	w0000000256 = (word & 0000000256)>>8;
	w0000000512 = (word & 0000000512)>>9;
		w05 = w0000000256 + w0000000512;
	
	w0000001024 = (word & 0000001024)>>10;
	w0000002048 = (word & 0000002048)>>11;
		w06 = w0000001024 + w0000002048;
			w19 = w05 + w06;
	
	w0000004096 = (word & 0000004096)>>12;
	w0000008192 = (word & 0000008192)>>13;
		w07 = w0000004096 + w0000008192;
	
	w0000016384 = (word & 0000016384)>>14;
	w0000032768 = (word & 0000032768)>>15;
		w08 = w0000016384 + w0000032768;
			w20 = w07 + w08;
				w26 = w19 + w20;
					w29 = w25 + w26;
	
	w0000065536 = (word & 0000065536)>>16;
	w0000131072 = (word & 0000131072)>>17;
		w09 = w0000065536 + w0000131072; 
	
	w0000262144 = (word & 0000262144)>>18;
	w0000524288 = (word & 0000524288)>>19;
		w10 = w0000262144 + w0000524288;
			w21 = w09 + w10;
	
	w0001048576 = (word & 0001048576)>>20;
	w0002097152 = (word & 0002097152)>>21;
		w11 = w0001048576 + w0002097152;
	
	w0004194304 = (word & 0004194304)>>22;
	w0008388608 = (word & 0008388608)>>23;
		w12 = w0004194304 + w0008388608;
			w22 = w11 + w12;
				w27 = w21 + w22;
	
	w0016777216 = (word & 0016777216)>>24;
	w0033554432 = (word & 0033554432)>>25;
		w13 = w0016777216 + w0033554432;
	
	w0067108864 = (word & 0067108864)>>26;
	w0134217728 = (word & 0134217728)>>27;
		w14 = w0067108864 + w0134217728;
			w23 = w13 + w14;
	
	w0268435456 = (word & 0268435456)>>28;
	w0536870912 = (word & 0536870912)>>29;
		w15 = w0268435456 + w0536870912;
	
	w1073741824 = (word & 1073741824)>>30;
	w2147483648 = (word & 2147483648)>>31;
		w16 = w1073741824 + w2147483648;
			w24 = w15 + w16;
				w28 = w23 + w24;
					w30 = w27 + w28;
						w31 = w29 + w30;
	
	a.address = i;
	b.address = i when i.step@6;
	b.data_in = w31;
	cnt = b.data_out;
	done = i.done;
}

/*

#define ITEMS (1024) 
//returns the number of 1's in a word 
static inline unsigned int popCnt(unsigned int input) { 
    unsigned int sum = 0; 
    for (int i = 0; i < 32; i++) {
        sum += (input) & 1; 
        input = input/2; 
    } 
    return sum; 
} 
// This program will put the popcount
// of each word of B[] in A[]
void my_main(unsigned int* A, unsigned int *B) { 
    for (int i=0; i<ITEMS; i++)  A[i] = popCnt(B[i]); 
} 
*/
