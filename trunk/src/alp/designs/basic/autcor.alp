/* Copyright (c) 2009 Ricardo Menotti, All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its 
 * documentation for NON-COMERCIAL purposes and without fee is hereby granted 
 * provided that this copyright notice appears in all copies.
 *
 * RICARDO MENOTTI MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR 
 * NON-INFRINGEMENT. RICARDO MENOTTI SHALL NOT BE LIABLE FOR ANY DAMAGES 
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS 
 * SOFTWARE OR ITS DERIVATIVES. 
 */

// O hardware gerado n√£o foi verificado e possivelmente gera resultados incorretos

/*
#define N 160   //--- Length of Input array vector (sd[]) -
#define M 16 //(MULTIPLE of 2)

short sd[N]; // --- Input array of autocorrelation
short ac[M]; // --- Resulting array of autocorrelation

void autcor(short ac[],  short sd[]) {
  int i,k,sum;

  for (i = 0; i < M; i++){
    sum = 0;

    for (k = 0; k < N-M; k++) {
      sum += sd[k+M] * sd[k+M-i];
    }

    ac[i] = (sum >> 15);
  }
}
*/

const N = 160;
const M = 16;
//const N_minus_M = 144;

typedef fixed(32, 1) int;
typedef fixed(1, 0) bit;

autcor_alp(in bit init, out bit done, out int output) {
	{
		int sd [160] = {
			-7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 
			25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 
			57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 
			89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 
			121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 
			153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 
			185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 
			217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 
			249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 
			281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311
		};
		int ac[16], a, b;
		fixed(8, 1) i, k, sd_addr;
		int sum;
	}
	i.clk_en = init;
	counter (i=0; i<M; i++@301);
	k.clk_en = init;
	k.load = i.step;
	counter (k=M; k<N; k++@2);

	sd.address = sd_addr;
	sd_addr = k;
	sd_addr = k - i when k.step@1;
	a = sd.data_out when k.step@1;
	b = sd.data_out when k.step@2;
	sum += i.step ? 0 : a * b;
//	sum.reset = i.step;

	ac.address = i@3 when i.step@4;
	ac.data_in = sum >> 15;
	output = ac.data_out;
	done = i.done@2;
}
