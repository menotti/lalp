
/*       This module was generated by c-to-verilog.com
 * THIS SOFTWARE IS PROVIDED BY www.c-to-verilog.com ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL c-to-verilog.com BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES)
 * 
 * Found a bug? email info@c-to-verilog.com 
 */


module _Z13sha_transformPjS_S_  (clk, reset, rdy,// control 
	mem_W_out0, mem_W_in0, mem_W_addr0, mem_W_mode0, // memport for: W 
	mem_data_out0, mem_data_in0, mem_data_addr0, mem_data_mode0, // memport for: data 
	mem_digest_out0, mem_digest_in0, mem_digest_addr0, mem_digest_mode0, // memport for: digest 
	p_digest, p_data, p_W, return_value); // params 
 input wire clk;
 input wire reset;
 output rdy;
 reg rdy;
 output [31:0] return_value;
 reg [31:0] return_value;
 input [15:0] p_digest;
 input [15:0] p_data;
 input [15:0] p_W;
input wire [31:0] mem_W_out0;
output reg [31:0] mem_W_in0;
output reg [15:0] mem_W_addr0;
output reg mem_W_mode0;
input wire [31:0] mem_data_out0;
output reg [31:0] mem_data_in0;
output reg [15:0] mem_data_addr0;
output reg mem_data_mode0;
input wire [31:0] mem_digest_out0;
output reg [31:0] mem_digest_in0;
output reg [15:0] mem_digest_addr0;
output reg mem_digest_mode0;


 reg [31:0] i_indvar_next154;   /*local var*/
 reg [31:0] i_tmp4;   /*local var*/
 reg i_exitcond155;   /*local var*/
 reg [31:0] i_i_01_0;   /*phi var*/
 reg [31:0] i_tmp17;   /*local var*/
 reg [31:0] i_tmp22;   /*local var*/
 reg [31:0] i_tmp28;   /*local var*/
 reg [31:0] i_i_1101;   /*local var*/
 reg [31:0] i_indvar_next151;   /*local var*/
 reg [31:0] i_tmp37;   /*local var*/
 reg i_exitcond152;   /*local var*/
 reg [31:0] i_tmp20;   /*local var*/
 reg [31:0] i_tmp25;   /*local var*/
 reg [31:0] i_tmp31;   /*local var*/
 reg [31:0] i_tmp26;   /*local var*/
 reg [31:0] i_tmp32;   /*local var*/
 reg [31:0] i_tmp38;   /*local var*/
 reg [31:0] i_tmp49;   /*local var*/
 reg [31:0] i_indvar114;   /*phi var*/
 reg [31:0] i_tmp75;   /*local var*/
 reg [31:0] i_tmp63;   /*local var*/
 reg [31:0] i_tmp66;   /*local var*/
 reg [31:0] i_tmp69;   /*local var*/
 reg [31:0] i_tmp72;   /*local var*/
 reg [31:0] i_indvar_next148;   /*local var*/
 reg [31:0] i_tmp81;   /*local var*/
 reg [31:0] i_tmp84;   /*local var*/
 reg [31:0] i_tmp85not;   /*local var*/
 reg [31:0] i_tmp104;   /*local var*/
 reg [31:0] i_tmp95;   /*local var*/
 reg i_exitcond149;   /*local var*/
 reg [31:0] i_tmp87;   /*local var*/
 reg [31:0] i_lowlevel;   /*local var*/
 reg [31:0] i_tmp88;   /*local var*/
 reg [31:0] i_lowlevel169;   /*local var*/
 reg [31:0] i_lowlevelOdd;   /*local var*/
 reg [31:0] i_headNode;   /*local var*/
 reg [31:0] i_i_28_0;   /*phi var*/
 reg [31:0] i_A_011_0;   /*phi var*/
 reg [31:0] i_B_015_0;   /*phi var*/
 reg [31:0] i_C_020_0;   /*phi var*/
 reg [31:0] i_D_023_0;   /*phi var*/
 reg [31:0] i_E_026_0;   /*phi var*/
 reg [31:0] i_indvar_next145;   /*local var*/
 reg [31:0] i_i_335_0;   /*local var*/
 reg [31:0] i_tmp120;   /*local var*/
 reg [31:0] i_tmp123;   /*local var*/
 reg [31:0] i_tmp141;   /*local var*/
 reg i_exitcond146;   /*local var*/
 reg [31:0] i_tmp125;   /*local var*/
 reg [31:0] i_lowlevel171;   /*local var*/
 reg [31:0] i_tmp132;   /*local var*/
 reg [31:0] i_lowlevelOdd172;   /*local var*/
 reg [31:0] i_lowlevel170;   /*local var*/
 reg [31:0] i_headNode173;   /*local var*/
 reg [31:0] i_indvar108;   /*phi var*/
 reg [31:0] i_A_138_0;   /*phi var*/
 reg [31:0] i_B_142_0;   /*phi var*/
 reg [31:0] i_C_146_0;   /*phi var*/
 reg [31:0] i_D_149_0;   /*phi var*/
 reg [31:0] i_E_152_0;   /*phi var*/
 reg [31:0] i_indvar_next;   /*local var*/
 reg [31:0] i_i_461_0;   /*local var*/
 reg [31:0] i_tmp157;   /*local var*/
 reg [31:0] i_tmp160;   /*local var*/
 reg [31:0] i_tmp165;   /*local var*/
 reg [31:0] i_tmp182;   /*local var*/
 reg i_exitcond;   /*local var*/
 reg [31:0] i_tmp162;   /*local var*/
 reg [31:0] i_tmp173;   /*local var*/
 reg [31:0] i_tmp166;   /*local var*/
 reg [31:0] i_lowlevel174;   /*local var*/
 reg [31:0] i_lowlevel175;   /*local var*/
 reg [31:0] i_lowlevelOdd176;   /*local var*/
 reg [31:0] i_headNode177;   /*local var*/
 reg [31:0] i_indvar105;   /*phi var*/
 reg [31:0] i_A_264_0;   /*phi var*/
 reg [31:0] i_B_268_0;   /*phi var*/
 reg [31:0] i_C_272_0;   /*phi var*/
 reg [31:0] i_D_276_0;   /*phi var*/
 reg [31:0] i_E_280_0;   /*phi var*/
 reg [31:0] i_indvar_next141;   /*local var*/
 reg [31:0] i_i_589;   /*local var*/
 reg [31:0] i_tmp198;   /*local var*/
 reg [31:0] i_tmp201;   /*local var*/
 reg [31:0] i_tmp219;   /*local var*/
 reg i_exitcond142;   /*local var*/
 reg [31:0] i_tmp203;   /*local var*/
 reg [31:0] i_tmp210;   /*local var*/
 reg [31:0] i_lowlevel179;   /*local var*/
 reg [31:0] i_lowlevel178;   /*local var*/
 reg [31:0] i_lowlevelOdd180;   /*local var*/
 reg [31:0] i_headNode181;   /*local var*/
 reg [31:0] i_indvar;   /*phi var*/
 reg [31:0] i_E_394;   /*phi var*/
 reg [31:0] i_D_393;   /*phi var*/
 reg [31:0] i_C_392;   /*phi var*/
 reg [31:0] i_B_391;   /*phi var*/
 reg [31:0] i_A_390;   /*phi var*/
 reg [31:0] i_tmp234;   /*local var*/
 reg [31:0] i_tmp241;   /*local var*/
 reg [31:0] i_tmp248;   /*local var*/
 reg [31:0] i_tmp255;   /*local var*/
 reg [31:0] i_tmp262;   /*local var*/
 reg [31:0] i_tmp219_lcssa;   /*phi var*/
 reg [31:0] i_tmp212_lcssa;   /*phi var*/
 reg [31:0] i_A_390_lcssa;   /*phi var*/
 reg [31:0] i_C_392_lcssa;   /*phi var*/
 reg [31:0] i_D_393_lcssa;   /*phi var*/

 // Number of states:55
 reg [5:0] eip;
 parameter entry0 = 6'd0;
 parameter bb0 = 6'd1;
 parameter bb1 = 6'd2;
 parameter bb2 = 6'd3;
 parameter bb3 = 6'd4;
 parameter bb150 = 6'd5;
 parameter bb151 = 6'd6;
 parameter bb152 = 6'd7;
 parameter bb153 = 6'd8;
 parameter bb154 = 6'd9;
 parameter bb155 = 6'd10;
 parameter bb156 = 6'd11;
 parameter bb157 = 6'd12;
 parameter bb158 = 6'd13;
 parameter bb159 = 6'd14;
 parameter bb600 = 6'd15;
 parameter bb601 = 6'd16;
 parameter bb602 = 6'd17;
 parameter bb603 = 6'd18;
 parameter bb604 = 6'd19;
 parameter bb605 = 6'd20;
 parameter bb606 = 6'd21;
 parameter bb760 = 6'd22;
 parameter bb761 = 6'd23;
 parameter bb762 = 6'd24;
 parameter bb763 = 6'd25;
 parameter bb764 = 6'd26;
 parameter bb765 = 6'd27;
 parameter bb1150 = 6'd28;
 parameter bb1151 = 6'd29;
 parameter bb1152 = 6'd30;
 parameter bb1153 = 6'd31;
 parameter bb1154 = 6'd32;
 parameter bb1155 = 6'd33;
 parameter bb1520 = 6'd34;
 parameter bb1521 = 6'd35;
 parameter bb1522 = 6'd36;
 parameter bb1523 = 6'd37;
 parameter bb1524 = 6'd38;
 parameter bb1525 = 6'd39;
 parameter bb1526 = 6'd40;
 parameter bb1930 = 6'd41;
 parameter bb1931 = 6'd42;
 parameter bb1932 = 6'd43;
 parameter bb1933 = 6'd44;
 parameter bb1934 = 6'd45;
 parameter bb1935 = 6'd46;
 parameter bb2290 = 6'd47;
 parameter bb2291 = 6'd48;
 parameter bb2292 = 6'd49;
 parameter bb2293 = 6'd50;
 parameter bb2294 = 6'd51;
 parameter bb2295 = 6'd52;
 parameter bb2296 = 6'd53;
 parameter bb2297 = 6'd54;

// Assign part (0)


always @(posedge clk)
 begin
  if (reset)
   begin
    $display("@hard reset");
    eip<=0;
    rdy<=0;
   end


// Datapath 
i_indvar_next154 <= i_i_01_0+(1);
i_exitcond155 <= (i_indvar_next154 == (16));
i_tmp17 <= i_indvar114+(13);
i_tmp22 <= i_indvar114+(8);
i_tmp28 <= i_indvar114+(2);
i_i_1101 <= i_indvar114+(16);
i_indvar_next151 <= i_indvar114+(1);
i_exitcond152 <= (i_indvar_next151 == (64));
i_tmp26 <= i_tmp25^i_tmp20;
i_tmp32 <= i_tmp26^i_tmp31;
i_tmp38 <= i_tmp32^i_tmp37;
i_tmp49 <= (i_tmp38 << (1))|(((i_tmp38) >> ((31))));
i_indvar_next148 <= i_i_28_0+(1);
i_tmp81 <= (i_A_011_0 << (5))|(((i_A_011_0) >> ((27))));
i_tmp84 <= i_C_020_0&i_B_015_0;
i_tmp85not <= i_B_015_0^(-1);
i_tmp104 <= (i_B_015_0 << (30))|(((i_B_015_0) >> ((2))));
i_exitcond149 <= (i_indvar_next148 == (20));
i_tmp87 <= i_D_023_0&i_tmp85not;
i_lowlevel <= i_tmp81+(1518500249);
i_tmp88 <= i_tmp87|i_tmp84;
i_lowlevel169 <= i_tmp95+i_E_026_0;
i_lowlevelOdd <= i_tmp88+i_lowlevel169;
i_headNode <= i_lowlevel+i_lowlevelOdd;
i_indvar_next145 <= i_indvar108+(1);
i_i_335_0 <= i_indvar108+(20);
i_tmp120 <= (i_A_138_0 << (5))|(((i_A_138_0) >> ((27))));
i_tmp123 <= i_C_146_0^i_B_142_0;
i_tmp141 <= (i_B_142_0 << (30))|(((i_B_142_0) >> ((2))));
i_exitcond146 <= (i_indvar_next145 == (20));
i_tmp125 <= i_tmp123^i_D_149_0;
i_lowlevel171 <= i_E_152_0+i_tmp120;
i_lowlevelOdd172 <= (1859775393)+i_lowlevel171;
i_lowlevel170 <= i_tmp132+i_tmp125;
i_headNode173 <= i_lowlevel170+i_lowlevelOdd172;
i_indvar_next <= i_indvar105+(1);
i_i_461_0 <= i_indvar105+(40);
i_tmp157 <= (i_A_264_0 << (5))|(((i_A_264_0) >> ((27))));
i_tmp160 <= i_D_276_0|i_C_272_0;
i_tmp165 <= i_D_276_0&i_C_272_0;
i_tmp182 <= (i_B_268_0 << (30))|(((i_B_268_0) >> ((2))));
i_exitcond <= (i_indvar_next == (20));
i_tmp162 <= i_tmp160&i_B_268_0;
i_tmp166 <= i_tmp162|i_tmp165;
i_lowlevel174 <= i_tmp166+i_E_280_0;
i_lowlevel175 <= i_tmp173+i_tmp157;
i_lowlevelOdd176 <= (-1894007588)+i_lowlevel175;
i_headNode177 <= i_lowlevel174+i_lowlevelOdd176;
i_indvar_next141 <= i_indvar+(1);
i_i_589 <= i_indvar+(60);
i_tmp198 <= (i_A_390 << (5))|(((i_A_390) >> ((27))));
i_tmp201 <= i_C_392^i_B_391;
i_tmp219 <= (i_B_391 << (30))|(((i_B_391) >> ((2))));
i_exitcond142 <= (i_indvar_next141 == (20));
i_tmp203 <= i_tmp201^i_D_393;
i_lowlevel179 <= i_tmp203+i_tmp198;
i_lowlevel178 <= i_tmp210+i_E_394;
i_lowlevelOdd180 <= (-899497514)+i_lowlevel179;
i_headNode181 <= i_lowlevel178+i_lowlevelOdd180;
i_tmp234 <= i_tmp63+i_tmp212_lcssa;
i_tmp241 <= i_tmp66+i_A_390_lcssa;
i_tmp248 <= i_tmp69+i_tmp219_lcssa;
i_tmp255 <= i_tmp72+i_C_392_lcssa;
i_tmp262 <= i_tmp75+i_D_393_lcssa;


// Control 
case (eip)
entry0:
begin
			i_i_01_0 <= (0);
		eip <= bb0;
end
bb0:
begin
	mem_data_mode0 <= 0;
	mem_data_addr0 <= (p_data + i_i_01_0);
	eip <= bb1;
end
bb1:
begin
	i_tmp4 <= mem_data_out0;
	eip <= bb2;
end
bb2:
begin
	mem_W_in0 <= i_tmp4;
	mem_W_mode0 <= 1;
	mem_W_addr0 <= (p_W + i_i_01_0);
	eip <= bb3;
end
bb3:
begin
	mem_W_mode0 <= 0;
	if (i_exitcond155) begin
		i_indvar114 <= (0);
		eip <= bb150;
	end else begin
		i_i_01_0 <= i_indvar_next154;
		eip <= bb0;
	end
end
bb150:
begin
	mem_W_mode0 <= 0;
	mem_W_addr0 <= (p_W + i_indvar114);
	eip <= bb151;
end
bb151:
begin
	i_tmp37 <= mem_W_out0;
	mem_W_mode0 <= 0;
	mem_W_addr0 <= (p_W + i_tmp17);
	eip <= bb152;
end
bb152:
begin
	i_tmp20 <= mem_W_out0;
	mem_W_mode0 <= 0;
	mem_W_addr0 <= (p_W + i_tmp22);
	eip <= bb153;
end
bb153:
begin
	i_tmp25 <= mem_W_out0;
	mem_W_mode0 <= 0;
	mem_W_addr0 <= (p_W + i_tmp28);
	eip <= bb154;
end
bb154:
begin
	i_tmp31 <= mem_W_out0;
	eip <= bb155;
end
bb155:
begin
	eip <= bb156;
end
bb156:
begin
	eip <= bb157;
end
bb157:
begin
	eip <= bb158;
end
bb158:
begin
	mem_W_in0 <= i_tmp49;
	mem_W_mode0 <= 1;
	mem_W_addr0 <= (p_W + i_i_1101);
	eip <= bb159;
end
bb159:
begin
	mem_W_mode0 <= 0;
	if (i_exitcond152) begin
		eip <= bb600;
	end else begin
		i_indvar114 <= i_indvar_next151;
		eip <= bb150;
	end
end
bb600:
begin
	mem_digest_mode0 <= 0;
	mem_digest_addr0 <= (p_digest + (4));
	eip <= bb601;
end
bb601:
begin
	i_tmp75 <= mem_digest_out0;
	mem_digest_mode0 <= 0;
	mem_digest_addr0 <= p_digest;
	eip <= bb602;
end
bb602:
begin
	i_tmp63 <= mem_digest_out0;
	mem_digest_mode0 <= 0;
	mem_digest_addr0 <= (p_digest + (1));
	eip <= bb603;
end
bb603:
begin
	i_tmp66 <= mem_digest_out0;
	mem_digest_mode0 <= 0;
	mem_digest_addr0 <= (p_digest + (2));
	eip <= bb604;
end
bb604:
begin
	i_tmp69 <= mem_digest_out0;
	mem_digest_mode0 <= 0;
	mem_digest_addr0 <= (p_digest + (3));
	eip <= bb605;
end
bb605:
begin
	i_tmp72 <= mem_digest_out0;
	eip <= bb606;
end
bb606:
begin
			i_i_28_0 <= (0);
		i_A_011_0 <= i_tmp63;
		i_B_015_0 <= i_tmp66;
		i_C_020_0 <= i_tmp69;
		i_D_023_0 <= i_tmp72;
		i_E_026_0 <= i_tmp75;
		eip <= bb760;
end
bb760:
begin
	mem_W_mode0 <= 0;
	mem_W_addr0 <= (p_W + i_i_28_0);
	eip <= bb761;
end
bb761:
begin
	i_tmp95 <= mem_W_out0;
	eip <= bb762;
end
bb762:
begin
	eip <= bb763;
end
bb763:
begin
	eip <= bb764;
end
bb764:
begin
	eip <= bb765;
end
bb765:
begin
	if (i_exitcond149) begin
		i_indvar108 <= (0);
		i_A_138_0 <= i_headNode;
		i_B_142_0 <= i_A_011_0;
		i_C_146_0 <= i_tmp104;
		i_D_149_0 <= i_C_020_0;
		i_E_152_0 <= i_D_023_0;
		eip <= bb1150;
	end else begin
		i_i_28_0 <= i_indvar_next148;
		i_A_011_0 <= i_headNode;
		i_B_015_0 <= i_A_011_0;
		i_C_020_0 <= i_tmp104;
		i_D_023_0 <= i_C_020_0;
		i_E_026_0 <= i_D_023_0;
		eip <= bb760;
	end
end
bb1150:
begin
	eip <= bb1151;
end
bb1151:
begin
	mem_W_mode0 <= 0;
	mem_W_addr0 <= (p_W + i_i_335_0);
	eip <= bb1152;
end
bb1152:
begin
	i_tmp132 <= mem_W_out0;
	eip <= bb1153;
end
bb1153:
begin
	eip <= bb1154;
end
bb1154:
begin
	eip <= bb1155;
end
bb1155:
begin
	if (i_exitcond146) begin
		i_indvar105 <= (0);
		i_A_264_0 <= i_headNode173;
		i_B_268_0 <= i_A_138_0;
		i_C_272_0 <= i_tmp141;
		i_D_276_0 <= i_C_146_0;
		i_E_280_0 <= i_D_149_0;
		eip <= bb1520;
	end else begin
		i_indvar108 <= i_indvar_next145;
		i_A_138_0 <= i_headNode173;
		i_B_142_0 <= i_A_138_0;
		i_C_146_0 <= i_tmp141;
		i_D_149_0 <= i_C_146_0;
		i_E_152_0 <= i_D_149_0;
		eip <= bb1150;
	end
end
bb1520:
begin
	eip <= bb1521;
end
bb1521:
begin
	mem_W_mode0 <= 0;
	mem_W_addr0 <= (p_W + i_i_461_0);
	eip <= bb1522;
end
bb1522:
begin
	i_tmp173 <= mem_W_out0;
	eip <= bb1523;
end
bb1523:
begin
	eip <= bb1524;
end
bb1524:
begin
	eip <= bb1525;
end
bb1525:
begin
	eip <= bb1526;
end
bb1526:
begin
	if (i_exitcond) begin
		i_indvar <= (0);
		i_E_394 <= i_D_276_0;
		i_D_393 <= i_C_272_0;
		i_C_392 <= i_tmp182;
		i_B_391 <= i_A_264_0;
		i_A_390 <= i_headNode177;
		eip <= bb1930;
	end else begin
		i_indvar105 <= i_indvar_next;
		i_A_264_0 <= i_headNode177;
		i_B_268_0 <= i_A_264_0;
		i_C_272_0 <= i_tmp182;
		i_D_276_0 <= i_C_272_0;
		i_E_280_0 <= i_D_276_0;
		eip <= bb1520;
	end
end
bb1930:
begin
	eip <= bb1931;
end
bb1931:
begin
	mem_W_mode0 <= 0;
	mem_W_addr0 <= (p_W + i_i_589);
	eip <= bb1932;
end
bb1932:
begin
	i_tmp210 <= mem_W_out0;
	eip <= bb1933;
end
bb1933:
begin
	eip <= bb1934;
end
bb1934:
begin
	eip <= bb1935;
end
bb1935:
begin
	if (i_exitcond142) begin
		i_tmp219_lcssa <= i_tmp219;
		i_tmp212_lcssa <= i_headNode181;
		i_A_390_lcssa <= i_A_390;
		i_C_392_lcssa <= i_C_392;
		i_D_393_lcssa <= i_D_393;
		eip <= bb2290;
	end else begin
		i_indvar <= i_indvar_next141;
		i_E_394 <= i_D_393;
		i_D_393 <= i_C_392;
		i_C_392 <= i_tmp219;
		i_B_391 <= i_A_390;
		i_A_390 <= i_headNode181;
		eip <= bb1930;
	end
end
bb2290:
begin
	eip <= bb2291;
end
bb2291:
begin
	mem_digest_in0 <= i_tmp234;
	mem_digest_mode0 <= 1;
	mem_digest_addr0 <= p_digest;
	eip <= bb2292;
end
bb2292:
begin
	mem_digest_mode0 <= 0;
	mem_digest_in0 <= i_tmp241;
	mem_digest_mode0 <= 1;
	mem_digest_addr0 <= (p_digest + (1));
	eip <= bb2293;
end
bb2293:
begin
	mem_digest_mode0 <= 0;
	mem_digest_in0 <= i_tmp248;
	mem_digest_mode0 <= 1;
	mem_digest_addr0 <= (p_digest + (2));
	eip <= bb2294;
end
bb2294:
begin
	mem_digest_mode0 <= 0;
	mem_digest_in0 <= i_tmp255;
	mem_digest_mode0 <= 1;
	mem_digest_addr0 <= (p_digest + (3));
	eip <= bb2295;
end
bb2295:
begin
	mem_digest_mode0 <= 0;
	mem_digest_in0 <= i_tmp262;
	mem_digest_mode0 <= 1;
	mem_digest_addr0 <= (p_digest + (4));
	eip <= bb2296;
end
bb2296:
begin
	mem_digest_mode0 <= 0;
	eip <= bb2297;
end
bb2297:
begin
	 rdy <= 1;
 return_value <= (0);
 $display($time, " Return (0x%x) ",(0));
 $finish();
end
 endcase //eip
end //always @(..)

endmodule



// -- Library components --  

module mul (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a * b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module div (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a / b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module shl (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a << b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule

// Dual port memory block
module xram (out0, din0, addr0, we0, clk0,
           out1, din1, addr1, we1, clk1);
  parameter ADDRESS_WIDTH = 16;
  parameter WORD_WIDTH = 32;
  output [WORD_WIDTH-1:0] out0;
  input [WORD_WIDTH-1:0] din0;
  input [ADDRESS_WIDTH-1:0] addr0;
  input we0;
  input clk0;
  output [WORD_WIDTH-1:0] out1;
  input [WORD_WIDTH-1:0] din1;
  input [ADDRESS_WIDTH-1:0] addr1;
  input we1;
  input clk1;
  reg [WORD_WIDTH-1:0] mem[1<<ADDRESS_WIDTH-1:0];
   integer i;
   initial begin
       for (i = 0; i < (1<<(ADDRESS_WIDTH-1)); i = i + 1) begin
       mem[i] <= i;
     end
   end
  assign out0 = mem[addr0];
  assign out1 = mem[addr1];
  always @(posedge clk0)begin
      if (we0) begin
          mem[addr0] = din0;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end
  end
  always @(posedge clk1)begin
      if (we1) begin
          mem[addr1] = din1;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end 
  end
endmodule

 // Test Bench 


module _Z13sha_transformPjS_S__test;
 wire rdy;
 reg reset, clk;
wire [31:0] mem_W_out0;
wire [31:0] mem_W_in0;
wire [15:0] mem_W_addr0;
wire mem_W_mode0;
wire [31:0] mem_W_out1;
wire [31:0] mem_W_in1;
wire [15:0] mem_W_addr1;
wire mem_W_mode1;
xram ram_W (mem_W_out0, mem_W_in0, mem_W_addr0, mem_W_mode0, clk,
  mem_W_out1, mem_W_in1, mem_W_addr1, mem_W_mode1, clk);


wire [31:0] mem_data_out0;
wire [31:0] mem_data_in0;
wire [15:0] mem_data_addr0;
wire mem_data_mode0;
wire [31:0] mem_data_out1;
wire [31:0] mem_data_in1;
wire [15:0] mem_data_addr1;
wire mem_data_mode1;
xram ram_data (mem_data_out0, mem_data_in0, mem_data_addr0, mem_data_mode0, clk,
  mem_data_out1, mem_data_in1, mem_data_addr1, mem_data_mode1, clk);


wire [31:0] mem_digest_out0;
wire [31:0] mem_digest_in0;
wire [15:0] mem_digest_addr0;
wire mem_digest_mode0;
wire [31:0] mem_digest_out1;
wire [31:0] mem_digest_in1;
wire [15:0] mem_digest_addr1;
wire mem_digest_mode1;
xram ram_digest (mem_digest_out0, mem_digest_in0, mem_digest_addr0, mem_digest_mode0, clk,
  mem_digest_out1, mem_digest_in1, mem_digest_addr1, mem_digest_mode1, clk);


 always #5 clk = ~clk;
 reg [15:0] p_digest;
 reg [15:0] p_data;
 reg [15:0] p_W;
 wire [31:0] return_value;
_Z13sha_transformPjS_S_ instance1 (clk, reset, rdy,// control 
	mem_W_out0, mem_W_in0, mem_W_addr0, mem_W_mode0, // memport for: W 
	mem_data_out0, mem_data_in0, mem_data_addr0, mem_data_mode0, // memport for: data 
	mem_digest_out0, mem_digest_in0, mem_digest_addr0, mem_digest_mode0, // memport for: digest 
	p_digest, p_data, p_W, return_value); // params 
initial begin
 clk = 0;
 $monitor("return = %b, 0x%x", rdy,  return_value);

 // Configure the values below to test the module
 p_digest <= 0;
 p_data <= 0;
 p_W <= 0;
 #5 reset = 1; #5 reset = 0;
end

endmodule //main_test 
