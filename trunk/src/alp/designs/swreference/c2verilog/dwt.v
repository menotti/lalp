
/*       This module was generated by c-to-verilog.com
 * THIS SOFTWARE IS PROVIDED BY www.c-to-verilog.com ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL c-to-verilog.com BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES)
 * 
 * Found a bug? email info@c-to-verilog.com 
 */


module _Z17wavelet_transformPjS_j  (clk, reset, rdy,// control 
	mem_input_out0, mem_input_in0, mem_input_addr0, mem_input_mode0, // memport for: input 
	mem_output_out0, mem_output_in0, mem_output_addr0, mem_output_mode0, // memport for: output 
	p_input, p_output, i_length, return_value); // params 
 input wire clk;
 input wire reset;
 output rdy;
 reg rdy;
 output [31:0] return_value;
 reg [31:0] return_value;
 input [15:0] p_input;
 input [15:0] p_output;
 input [31:0] i_length;
input wire [31:0] mem_input_out0;
output reg [31:0] mem_input_in0;
output reg [15:0] mem_input_addr0;
output reg mem_input_mode0;
input wire [31:0] mem_output_out0;
output reg [31:0] mem_output_in0;
output reg [15:0] mem_output_addr0;
output reg mem_output_mode0;


 reg i_tmp499;   /*local var*/
 reg i_tmp4211;   /*local var*/
 reg [31:0] i_len_03_0_ph;   /*phi var*/
 reg [31:0] i_incrementVal252;   /*local var*/
 reg [31:0] i_incrementVal90;   /*local var*/
 reg [31:0] i_incrementVal66;   /*local var*/
 reg [31:0] i_incrementVal42;   /*local var*/
 reg [31:0] i_incrementVal;   /*local var*/
 reg [31:0] i_cloned17___0___;   /*local var*/
 reg [31:0] i_cloned17___1___;   /*local var*/
 reg [31:0] i_cloned17___2___;   /*local var*/
 reg [31:0] i_tmp33___0___;   /*local var*/
 reg [31:0] i_tmp38___0___;   /*local var*/
 reg [31:0] i_cloned17___3___;   /*local var*/
 reg [31:0] i_tmp33___1___;   /*local var*/
 reg [31:0] i_tmp38___1___;   /*local var*/
 reg [31:0] i_cloned12___0___;   /*local var*/
 reg i_tmp42___0___;   /*local var*/
 reg [31:0] i_cloned13___0___;   /*local var*/
 reg [31:0] i_cloned12___1___;   /*local var*/
 reg [31:0] i_tmp14___0___;   /*local var*/
 reg [31:0] i_tmp26___0___;   /*local var*/
 reg [31:0] i_cloned13___1___;   /*local var*/
 reg [31:0] i_incrementVal461;   /*local var*/
 reg [31:0] i_incrementVal464;   /*local var*/
 reg [31:0] i_cloned17;   /*local var*/
 reg [31:0] i_tmp14;   /*local var*/
 reg [31:0] i_tmp26;   /*local var*/
 reg [31:0] i_incrementVal480;   /*local var*/
 reg [31:0] i_incrementVal482;   /*local var*/
 reg i_tmp42;   /*local var*/
 reg [31:0] i_indvar_next;   /*local var*/
 reg [31:0] i_cloned12;   /*local var*/
 reg [31:0] i_tmp33;   /*local var*/
 reg [31:0] i_tmp38;   /*local var*/
 reg [31:0] i_cloned13;   /*local var*/
 reg i_gluePipelinedLoop487;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop486;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop484;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop483;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop481;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop479;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop478;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop477;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop475;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop473;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop471;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop469;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop467;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop463;   /*phi var*/
 reg [31:0] i_i_010;   /*phi var*/
 reg i_tmp49;   /*local var*/

 // Number of states:19
 reg [4:0] eip;
 parameter entry0 = 5'd0;
 parameter entry1 = 5'd1;
 parameter bb39_outer_preheader0 = 5'd2;
 parameter bb39_outer0 = 5'd3;
 parameter bb39_outer1 = 5'd4;
 parameter bb2_preheader0 = 5'd5;
 parameter bb2_preheader1 = 5'd6;
 parameter bb2_preheader2 = 5'd7;
 parameter bb2_preheader3 = 5'd8;
 parameter bb2_preheader4 = 5'd9;
 parameter bb2_preheader5 = 5'd10;
 parameter bb2_preheader6 = 5'd11;
 parameter PipelinedLoop0 = 5'd12;
 parameter PipelinedLoop1 = 5'd13;
 parameter PipelinedLoop2 = 5'd14;
 parameter PipelinedLoop3 = 5'd15;
 parameter bb470 = 5'd16;
 parameter bb471 = 5'd17;
 parameter return0 = 5'd18;

// Assign part (0)


always @(posedge clk)
 begin
  if (reset)
   begin
    $display("@hard reset");
    eip<=0;
    rdy<=0;
   end


// Datapath 
i_tmp499 <= ((((i_length) >> ((1)))) > (1));
i_tmp4211 <= (i_len_03_0_ph == (0));
i_incrementVal252 <= (0)+(0);
i_incrementVal90 <= (1)+(0);
i_incrementVal66 <= (2)+(0);
i_incrementVal42 <= (3)+(0);
i_incrementVal <= (4)+(0);
i_cloned17___0___ <= (i_incrementVal252 << (1))|(1);
i_cloned17___1___ <= (i_incrementVal90 << (1))|(1);
i_cloned17___2___ <= (i_incrementVal66 << (1))|(1);
i_tmp33___0___ <= i_incrementVal252+i_len_03_0_ph;
i_tmp38___0___ <= i_incrementVal252+(1);
i_cloned17___3___ <= (i_incrementVal42 << (1))|(1);
i_tmp33___1___ <= i_incrementVal90+i_len_03_0_ph;
i_tmp38___1___ <= i_incrementVal90+(1);
i_tmp42___0___ <= (i_tmp38___0___ < i_len_03_0_ph);
i_tmp14___0___ <= i_cloned13___0___+i_cloned12___0___;
i_tmp26___0___ <= i_cloned12___0___-i_cloned13___0___;
i_incrementVal461 <= (5)+i_i_010;
i_incrementVal464 <= (4)+i_i_010;
i_cloned17 <= i_gluePipelinedLoop463|(1);
i_tmp14 <= i_gluePipelinedLoop477+i_gluePipelinedLoop471;
i_tmp26 <= i_gluePipelinedLoop471-i_gluePipelinedLoop477;
i_incrementVal480 <= (1)+i_i_010;
i_incrementVal482 <= (2)+i_i_010;
i_tmp42 <= (i_gluePipelinedLoop486 < i_len_03_0_ph);
i_indvar_next <= i_i_010+(1);
i_tmp33 <= i_incrementVal482+i_len_03_0_ph;
i_tmp38 <= i_incrementVal482+(1);
i_tmp49 <= ((((i_len_03_0_ph) >> ((1)))) > (1));


// Control 
case (eip)
entry0:
begin
	eip <= entry1;
end
entry1:
begin
	if (i_tmp499) begin
		eip <= bb39_outer_preheader0;
	end else begin
		eip <= return0;
	end
end
bb39_outer_preheader0:
begin
			i_len_03_0_ph <= (((i_length) >> ((1))));
		eip <= bb39_outer0;
end
bb39_outer0:
begin
	eip <= bb39_outer1;
end
bb39_outer1:
begin
	if (i_tmp4211) begin
		eip <= bb470;
	end else begin
		eip <= bb2_preheader0;
	end
end
bb2_preheader0:
begin
	eip <= bb2_preheader1;
end
bb2_preheader1:
begin
	mem_input_mode0 <= 0;
	mem_input_addr0 <= (p_input + (i_incrementVal252 << (1)));
	eip <= bb2_preheader2;
end
bb2_preheader2:
begin
	i_cloned12___0___ <= mem_input_out0;
	mem_input_mode0 <= 0;
	mem_input_addr0 <= (p_input + i_cloned17___0___);
	eip <= bb2_preheader3;
end
bb2_preheader3:
begin
	i_cloned13___0___ <= mem_input_out0;
	mem_input_mode0 <= 0;
	mem_input_addr0 <= (p_input + (i_incrementVal90 << (1)));
	eip <= bb2_preheader4;
end
bb2_preheader4:
begin
	i_cloned12___1___ <= mem_input_out0;
	mem_input_mode0 <= 0;
	mem_input_addr0 <= (p_input + i_cloned17___1___);
	eip <= bb2_preheader5;
end
bb2_preheader5:
begin
	i_cloned13___1___ <= mem_input_out0;
	eip <= bb2_preheader6;
end
bb2_preheader6:
begin
			i_gluePipelinedLoop487 <= i_tmp42___0___;
		i_gluePipelinedLoop486 <= i_tmp38___1___;
		p_gluePipelinedLoop484 <= (p_output + i_tmp33___0___);
		i_gluePipelinedLoop483 <= i_tmp33___1___;
		p_gluePipelinedLoop481 <= (p_output + i_incrementVal252);
		i_gluePipelinedLoop479 <= i_tmp26___0___;
		i_gluePipelinedLoop478 <= i_tmp14___0___;
		i_gluePipelinedLoop477 <= i_cloned13___1___;
		p_gluePipelinedLoop475 <= (p_input + i_cloned17___2___);
		i_gluePipelinedLoop473 <= i_cloned17___3___;
		i_gluePipelinedLoop471 <= i_cloned12___1___;
		p_gluePipelinedLoop469 <= (p_input + (i_incrementVal66 << (1)));
		i_gluePipelinedLoop467 <= (i_incrementVal42 << (1));
		i_gluePipelinedLoop463 <= (i_incrementVal << (1));
		i_i_010 <= (0);
		eip <= PipelinedLoop0;
end
PipelinedLoop0:
begin
	mem_input_mode0 <= 0;
	mem_input_addr0 <= p_gluePipelinedLoop469;
	mem_output_in0 <= i_gluePipelinedLoop478;
	mem_output_mode0 <= 1;
	mem_output_addr0 <= p_gluePipelinedLoop481;
	eip <= PipelinedLoop1;
end
PipelinedLoop1:
begin
	i_cloned12 <= mem_input_out0;
	mem_input_mode0 <= 0;
	mem_input_addr0 <= p_gluePipelinedLoop475;
	mem_output_mode0 <= 0;
	mem_output_in0 <= i_gluePipelinedLoop479;
	mem_output_mode0 <= 1;
	mem_output_addr0 <= p_gluePipelinedLoop484;
	eip <= PipelinedLoop2;
end
PipelinedLoop2:
begin
	i_cloned13 <= mem_input_out0;
	mem_output_mode0 <= 0;
	eip <= PipelinedLoop3;
end
PipelinedLoop3:
begin
	if (i_gluePipelinedLoop487) begin
		i_gluePipelinedLoop487 <= i_tmp42;
		i_gluePipelinedLoop486 <= i_tmp38;
		p_gluePipelinedLoop484 <= (p_output + i_gluePipelinedLoop483);
		i_gluePipelinedLoop483 <= i_tmp33;
		p_gluePipelinedLoop481 <= (p_output + i_incrementVal480);
		i_gluePipelinedLoop479 <= i_tmp26;
		i_gluePipelinedLoop478 <= i_tmp14;
		i_gluePipelinedLoop477 <= i_cloned13;
		p_gluePipelinedLoop475 <= (p_input + i_gluePipelinedLoop473);
		i_gluePipelinedLoop473 <= i_cloned17;
		i_gluePipelinedLoop471 <= i_cloned12;
		p_gluePipelinedLoop469 <= (p_input + i_gluePipelinedLoop467);
		i_gluePipelinedLoop467 <= (i_incrementVal464 << (1));
		i_gluePipelinedLoop463 <= (i_incrementVal461 << (1));
		i_i_010 <= i_indvar_next;
		eip <= PipelinedLoop0;
	end else begin
		eip <= bb470;
	end
end
bb470:
begin
	eip <= bb471;
end
bb471:
begin
	if (i_tmp49) begin
		i_len_03_0_ph <= (((i_len_03_0_ph) >> ((1))));
		eip <= bb39_outer0;
	end else begin
		eip <= return0;
	end
end
return0:
begin
	 rdy <= 1;
 return_value <= ltmp_0_1;
 $display($time, " Return (0x%x) ",ltmp_0_1);
 $finish();
end
 endcase //eip
end //always @(..)

endmodule



// -- Library components --  

module mul (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a * b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module div (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a / b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module shl (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a << b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule

// Dual port memory block
module xram (out0, din0, addr0, we0, clk0,
           out1, din1, addr1, we1, clk1);
  parameter ADDRESS_WIDTH = 16;
  parameter WORD_WIDTH = 32;
  output [WORD_WIDTH-1:0] out0;
  input [WORD_WIDTH-1:0] din0;
  input [ADDRESS_WIDTH-1:0] addr0;
  input we0;
  input clk0;
  output [WORD_WIDTH-1:0] out1;
  input [WORD_WIDTH-1:0] din1;
  input [ADDRESS_WIDTH-1:0] addr1;
  input we1;
  input clk1;
  reg [WORD_WIDTH-1:0] mem[1<<ADDRESS_WIDTH-1:0];
   integer i;
   initial begin
       for (i = 0; i < (1<<(ADDRESS_WIDTH-1)); i = i + 1) begin
       mem[i] <= i;
     end
   end
  assign out0 = mem[addr0];
  assign out1 = mem[addr1];
  always @(posedge clk0)begin
      if (we0) begin
          mem[addr0] = din0;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end
  end
  always @(posedge clk1)begin
      if (we1) begin
          mem[addr1] = din1;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end 
  end
endmodule

 // Test Bench 


module _Z17wavelet_transformPjS_j_test;
 wire rdy;
 reg reset, clk;
wire [31:0] mem_input_out0;
wire [31:0] mem_input_in0;
wire [15:0] mem_input_addr0;
wire mem_input_mode0;
wire [31:0] mem_input_out1;
wire [31:0] mem_input_in1;
wire [15:0] mem_input_addr1;
wire mem_input_mode1;
xram ram_input (mem_input_out0, mem_input_in0, mem_input_addr0, mem_input_mode0, clk,
  mem_input_out1, mem_input_in1, mem_input_addr1, mem_input_mode1, clk);


wire [31:0] mem_output_out0;
wire [31:0] mem_output_in0;
wire [15:0] mem_output_addr0;
wire mem_output_mode0;
wire [31:0] mem_output_out1;
wire [31:0] mem_output_in1;
wire [15:0] mem_output_addr1;
wire mem_output_mode1;
xram ram_output (mem_output_out0, mem_output_in0, mem_output_addr0, mem_output_mode0, clk,
  mem_output_out1, mem_output_in1, mem_output_addr1, mem_output_mode1, clk);


 always #5 clk = ~clk;
 reg [15:0] p_input;
 reg [15:0] p_output;
 reg [31:0] i_length;
 wire [31:0] return_value;
_Z17wavelet_transformPjS_j instance1 (clk, reset, rdy,// control 
	mem_input_out0, mem_input_in0, mem_input_addr0, mem_input_mode0, // memport for: input 
	mem_output_out0, mem_output_in0, mem_output_addr0, mem_output_mode0, // memport for: output 
	p_input, p_output, i_length, return_value); // params 
initial begin
 clk = 0;
 $monitor("return = %b, 0x%x", rdy,  return_value);

 // Configure the values below to test the module
 p_input <= 0;
 p_output <= 0;
 i_length <= 0;
 #5 reset = 1; #5 reset = 0;
end

endmodule //main_test 
