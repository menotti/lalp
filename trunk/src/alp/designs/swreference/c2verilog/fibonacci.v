
/*       This module was generated by c-to-verilog.com
 * THIS SOFTWARE IS PROVIDED BY www.c-to-verilog.com ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL c-to-verilog.com BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES)
 * 
 * Found a bug? email info@c-to-verilog.com 
 */


module _Z9fibonacciPj  (clk, reset, rdy,// control 
	mem_v_out0, mem_v_in0, mem_v_addr0, mem_v_mode0, // memport for: v 
	p_v, return_value); // params 
 input wire clk;
 input wire reset;
 output rdy;
 reg rdy;
 output return_value;
 reg return_value;
 input [15:0] p_v;
input wire [31:0] mem_v_out0;
output reg [31:0] mem_v_in0;
output reg [15:0] mem_v_addr0;
output reg mem_v_mode0;



 // Number of states:34
 reg [5:0] eip;
 parameter entry0 = 6'd0;
 parameter entry1 = 6'd1;
 parameter entry2 = 6'd2;
 parameter entry3 = 6'd3;
 parameter entry4 = 6'd4;
 parameter entry5 = 6'd5;
 parameter entry6 = 6'd6;
 parameter entry7 = 6'd7;
 parameter entry8 = 6'd8;
 parameter entry9 = 6'd9;
 parameter entry10 = 6'd10;
 parameter entry11 = 6'd11;
 parameter entry12 = 6'd12;
 parameter entry13 = 6'd13;
 parameter entry14 = 6'd14;
 parameter entry15 = 6'd15;
 parameter entry16 = 6'd16;
 parameter entry17 = 6'd17;
 parameter entry18 = 6'd18;
 parameter entry19 = 6'd19;
 parameter entry20 = 6'd20;
 parameter entry21 = 6'd21;
 parameter entry22 = 6'd22;
 parameter entry23 = 6'd23;
 parameter entry24 = 6'd24;
 parameter entry25 = 6'd25;
 parameter entry26 = 6'd26;
 parameter entry27 = 6'd27;
 parameter entry28 = 6'd28;
 parameter entry29 = 6'd29;
 parameter entry30 = 6'd30;
 parameter entry31 = 6'd31;
 parameter entry32 = 6'd32;
 parameter entry33 = 6'd33;

// Assign part (0)


always @(posedge clk)
 begin
  if (reset)
   begin
//    $display("@hard reset");
    eip<=0;
    rdy<=0;
   end


// Datapath 


// Control 
case (eip)
entry0:
begin
	mem_v_in0 <= (0);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= p_v;
	eip <= entry1;
end
entry1:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (1);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (1));
	eip <= entry2;
end
entry2:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (1);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (2));
	eip <= entry3;
end
entry3:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (2);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (3));
	eip <= entry4;
end
entry4:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (21);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (8));
	eip <= entry5;
end
entry5:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (34);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (9));
	eip <= entry6;
end
entry6:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (55);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (10));
	eip <= entry7;
end
entry7:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (89);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (11));
	eip <= entry8;
end
entry8:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (144);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (12));
	eip <= entry9;
end
entry9:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (233);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (13));
	eip <= entry10;
end
entry10:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (3);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (4));
	eip <= entry11;
end
entry11:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (5);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (5));
	eip <= entry12;
end
entry12:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (8);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (6));
	eip <= entry13;
end
entry13:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (13);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (7));
	eip <= entry14;
end
entry14:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (377);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (14));
	eip <= entry15;
end
entry15:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (610);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (15));
	eip <= entry16;
end
entry16:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (987);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (16));
	eip <= entry17;
end
entry17:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (1597);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (17));
	eip <= entry18;
end
entry18:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (2584);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (18));
	eip <= entry19;
end
entry19:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (4181);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (19));
	eip <= entry20;
end
entry20:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (6765);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (20));
	eip <= entry21;
end
entry21:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (10946);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (21));
	eip <= entry22;
end
entry22:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (17711);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (22));
	eip <= entry23;
end
entry23:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (28657);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (23));
	eip <= entry24;
end
entry24:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (46368);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (24));
	eip <= entry25;
end
entry25:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (75025);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (25));
	eip <= entry26;
end
entry26:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (121393);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (26));
	eip <= entry27;
end
entry27:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (196418);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (27));
	eip <= entry28;
end
entry28:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (317811);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (28));
	eip <= entry29;
end
entry29:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (514229);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (29));
	eip <= entry30;
end
entry30:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (832040);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (30));
	eip <= entry31;
end
entry31:
begin
	mem_v_mode0 <= 0;
	mem_v_in0 <= (1346269);
	mem_v_mode0 <= 1;
	mem_v_addr0 <= (p_v + (31));
	eip <= entry32;
end
entry32:
begin
	mem_v_mode0 <= 0;
	eip <= entry33;
end
entry33:
begin
	 rdy <= 1;
 return_value <= 0;
// $finish();
end
 endcase //eip
end //always @(..)

endmodule



// -- Library components --  

module mul (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a * b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module div (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a / b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module shl (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a << b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule

// Dual port memory block
module xram (out0, din0, addr0, we0, clk0,
           out1, din1, addr1, we1, clk1);
  parameter ADDRESS_WIDTH = 16;
  parameter WORD_WIDTH = 32;
  output [WORD_WIDTH-1:0] out0;
  input [WORD_WIDTH-1:0] din0;
  input [ADDRESS_WIDTH-1:0] addr0;
  input we0;
  input clk0;
  output [WORD_WIDTH-1:0] out1;
  input [WORD_WIDTH-1:0] din1;
  input [ADDRESS_WIDTH-1:0] addr1;
  input we1;
  input clk1;
  reg [WORD_WIDTH-1:0] mem[1<<ADDRESS_WIDTH-1:0];
   integer i;
   initial begin
       for (i = 0; i < (1<<(ADDRESS_WIDTH-1)); i = i + 1) begin
       mem[i] <= i;
     end
   end
  assign out0 = mem[addr0];
  assign out1 = mem[addr1];
  always @(posedge clk0)begin
      if (we0) begin
          mem[addr0] = din0;
//          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end
  end
  always @(posedge clk1)begin
      if (we1) begin
          mem[addr1] = din1;
//          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end 
  end
endmodule

 // Test Bench 


module _Z9fibonacciPj_test;
 wire rdy;
 reg reset, clk;
wire [31:0] mem_v_out0;
wire [31:0] mem_v_in0;
wire [15:0] mem_v_addr0;
wire mem_v_mode0;
wire [31:0] mem_v_out1;
wire [31:0] mem_v_in1;
wire [15:0] mem_v_addr1;
wire mem_v_mode1;
xram ram_v (mem_v_out0, mem_v_in0, mem_v_addr0, mem_v_mode0, clk,
  mem_v_out1, mem_v_in1, mem_v_addr1, mem_v_mode1, clk);


 always #5 clk = ~clk;
 reg [15:0] p_v;
 wire return_value;
_Z9fibonacciPj instance1 (clk, reset, rdy,// control 
	mem_v_out0, mem_v_in0, mem_v_addr0, mem_v_mode0, // memport for: v 
	p_v, return_value); // params 
initial begin
 clk = 0;
// $monitor("return = %b, 0x%x", rdy,  return_value);

 // Configure the values below to test the module
 p_v <= 0;
 #5 reset = 1; #5 reset = 0;
end

endmodule //main_test 
