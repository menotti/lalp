/* Copyright (c) 2009 João M. P. Cardoso <jmpc@acm.org>, All Rights Reserved.
 * Copyright (c) 2009 Ricardo Menotti <ricardomenotti@acm.org>, All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its 
 * documentation for NON-COMERCIAL purposes and without fee is hereby granted 
 * provided that this copyright notice appears in all copies.
 *
 * RICARDO MENOTTI MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR 
 * NON-INFRINGEMENT. RICARDO MENOTTI SHALL NOT BE LIABLE FOR ANY DAMAGES 
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS 
 * SOFTWARE OR ITS DERIVATIVES. 
 */

options {
    LOOKAHEAD=1;
    IGNORE_CASE=true;
    STATIC = false;
    NODE_USES_PARSER=true;
}

//TODO check duplicated Variable/Pin names

PARSER_BEGIN(ALPParser)
/* Copyright (c) 2009 João M. P. Cardoso <jmpc@acm.org>, All Rights Reserved.
 * Copyright (c) 2009 Ricardo Menotti <ricardomenotti@acm.org>, All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its 
 * documentation for NON-COMERCIAL purposes and without fee is hereby granted 
 * provided that this copyright notice appears in all copies.
 *
 * RICARDO MENOTTI MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR 
 * NON-INFRINGEMENT. RICARDO MENOTTI SHALL NOT BE LIABLE FOR ANY DAMAGES 
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS 
 * SOFTWARE OR ITS DERIVATIVES. 
 */

package br.ufscar.dc.lalp.parser.lang;

import java.util.*;

import br.ufscar.dc.lalp.core.*;
import br.ufscar.dc.lalp.core.Process;
import br.ufscar.dc.lalp.components.*;

/**
 * @author <a href="mailto:ricardomenotti@acm.org">Ricardo Menotti</a>
 * @author <a href="http://menotti.pro.br/">Author Page</a>
 * @author <a href="http://www.dc.ufscar.br/">DC UFSCar</a>
 * @version January, 2009
 */
 
@SuppressWarnings("unchecked") 
public class ALPParser {

	public Design design;
	public Hashtable<String, Integer> allConsts = new Hashtable<String, Integer>();
	//public Hashtable<String, Integer> allTypedefs = new Hashtable<String, Integer>();
	public Hashtable<String, VarType> allTypedefs = new Hashtable<String, VarType>();
	public Hashtable<String, SimpleNode> allPins = new Hashtable<String, SimpleNode>();
	public Hashtable<String, SimpleNode> allVariables = new Hashtable<String, SimpleNode>();
	public Hashtable<String, SimpleNode> allResults = new Hashtable<String, SimpleNode>();
	public Hashtable<String, Integer> allAttribution = new Hashtable<String, Integer>();
	public TreeMap<Integer, String> allAttributionLines = new TreeMap<Integer, String>();
	/*
	public List<TestbenchUnity> whenList = new ArrayList<TestbenchUnity>();
	public List<TestbenchUnity> foreachList = new ArrayList<TestbenchUnity>();
	public List<TestbenchUnity> equalityList = new ArrayList<TestbenchUnity>();
	TestbenchUnity testbenchUnity;*/
	public Vector<Process> allProcesses = new Vector<Process>();
	public Hashtable<String, SimpleNode> allTestbenchEntries = new Hashtable<String, SimpleNode>();
	protected boolean floatValue = false;

/*	public static void main(String args[]) {
		FileInputStream inStream;
		if (args.length == 0) {
			System.out.println("usage: java RunFile <input_file>");
			System.exit(1);
		} else if (args.length != 1) {
			System.out.println("usage: java RunFile <input_file>");
			System.exit(1);
		}
		try {
			System.out.println("parsing: Reading from file " + args[0] + "...");
			inStream = new FileInputStream(args[0]);
			ALPParser parser = new ALPParser(inStream);
			SimpleNode root = parser.Start();
		} catch (FileNotFoundException e) {
			System.out.println("parsing:  File " + args[0] + " not found.");
			System.exit(1);
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}*/
}

PARSER_END(ALPParser)

/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */
MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* reserved words */
TOKEN: {
	< TYPEDEF: "typedef" >
	| < FIXED: "fixed" >
	| < UFIXED: "ufixed" >
	| < SFIXED: "sfixed" >
	| < FLOAT: "float" >
	| < SIGNED: "signed">
	| < UNSIGNED: "unsigned">
	| < BIT: "bit">
	| < IN: "in" >
	| < OUT: "out" >
	| < CONST: "const">
	| < COUNTER: "counter">
	| < WHEN: "when">
	| < ASSERT: "assert">
	| < CHECK: "check">
	| < FOREACH: "foreach">
	| < CHANGES: "changes">
	| < AS: "as">
	| < CLOCK: "clock">	
	| < WAIT: "wait">
 }

 
TOKEN : /* LITERALS */
{
  < FLOAT_LITERAL:
   ("-")? (["0"-"9"])* "." (["0"-"9"])+ 
  >
| 
  < INTEGER_LITERAL:
        ("-")? <DECIMAL_LITERAL> (["l","L"])?
      | ("-")? <HEX_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: (["0"-"9"])+ >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}
 
TOKEN :
{
	  < LPAREN: "(" >
	| < RPAREN: ")" >
	| < LBRACE: "{" >
	| < RBRACE: "}" >
	| < LBRACKET: "[" >
	| < RBRACKET: "]" >
	| < SEMICOLON: ";" >
	| < COMMA: "," >
	| < DOT: "." >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < AT: "@" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| <HASH : "#">
}


SimpleNode Start() : {
	Token t;
}
{
 	(Const())* 
 	(Typedef())* 
 	t=<IDENTIFIER>
 	{
 		jjtThis.setIdentifier(t.image);
 	}
 	<LPAREN> (Pin() (<COMMA> Pin())*)? <RPAREN> 
 	<LBRACE> Statements() <RBRACE>
            (Testbench())? 
	{
 		return jjtThis;
 	}
}

void Testbench() : {
	Token t;
}
{
	{
		Info("This file has a testbench!");
	}	
	<ASSERT><LBRACE>
	(TestbenchEntries())* 
	(ForeachChecking() | WhenChecking() | EqualityChecking())+
	<RBRACE>
}



void EqualityChecking(): 
{
	Token tName;
	long value;
	Process process = null;
}
{
	<WAIT> tName=<IDENTIFIER> "==" value=ConstOrLong()
	{
		if(!allPins.containsKey(tName.image))
			ErrorToken("Variable " + tName.image + " NOT found!", tName);
		else
			process = new Process(Process.CheckingType.WAIT, tName.image, (int)value);		
	}
	<LBRACE>
		(<CHECK> Results(process))+
	<RBRACE>
	{
		allProcesses.add(process);
	}
}


void Results(Process process) : {
	Token varType=null;
	VarType type= null;
}
{
	(varType=<IDENTIFIER> | type=Type()) 
	{
		if (varType != null) {
			if (allTypedefs.containsKey(varType.image)) {
				type=(VarType)(allTypedefs.get(varType.image));
			}
			else {
				ErrorToken("Type " + varType.image + " NOT found!", varType);
			}
		}
	}
	Result(type.bitwidth, process) <SEMICOLON>
}

void TestbenchEntries() : {
	Token varType=null;
	VarType type= null;
}
{
	(varType=<IDENTIFIER> | type=Type()) 
	{
		if (varType != null) {
			if (allTypedefs.containsKey(varType.image)) {
				type=(VarType)(allTypedefs.get(varType.image));
			}
			else {
				ErrorToken("Type " + varType.image + " NOT found!", varType);
			}
		}
	}
	TestbenchEntry(type.bitwidth) <SEMICOLON>
}


void Name() : {
	Token tName, tPort = null;
	SimpleNode node = null;
}
{
	tName=<IDENTIFIER> (<DOT> tPort=<IDENTIFIER>)?
	{
		if (allVariables.containsKey(tName.image) || allConsts.containsKey(tName.image) || allPins.containsKey(tName.image)) {
			jjtThis.setIdentifier(tName.image);
			//jjtThis.setComponentClass(loop.components.reg_op.class);
			if (tPort != null) {
				jjtThis.setPort(tPort.image);
			}
            //Verifica se o nome corresponde a uma variável float
            node = allVariables.get(tName.image);
            if(node!= null)
            {
              jjtThis.setFloatNumber(node.isFloat());
              jjtThis.setVarType(node.getVarType());
            }
		}
		else {
			ErrorToken("Variable/Pin " + tName.image + " NOT found!", tName);
		}
		
	}
}

void Const() : {
	Token constName, constVal;
}
{
	<CONST> constName=<IDENTIFIER> "=" constVal=<INTEGER_LITERAL>  <SEMICOLON>
	{
		if (allConsts.containsKey(constName.image)) {
			ErrorToken("Redefinition of Const " + constName.image, constName);
		}
		allConsts.put(constName.image, StringToInteger(constVal.image));
		jjtThis.setIdentifier(constName.image);
		jjtThis.jjtSetValue(StringToInteger(constVal.image));
		//jjtThis.setComponentClass(loop.components.const_op.class);
		//DEBUG
		//InfoToken("Const " + constName.image + " with value " + constVal.image + " found", constName);
	}
}

void Typedef() : {
	Token typedefName;
	VarType type= new VarType();
}
{
	<TYPEDEF> type=Type() typedefName=<IDENTIFIER> <SEMICOLON>
 	{
 	  
 		if (allTypedefs.containsKey(typedefName.image)) {
			ErrorToken("Redefinition of Typedef " + typedefName.image, typedefName);
		}
 		allTypedefs.put(typedefName.image, type);
		jjtThis.setIdentifier(typedefName.image);
		jjtThis.setWidth(type.bitwidth);
		//DEBUG
		//InfoToken("Type " + typedefName.image + " with " + typedefVal + " bit(s) found", typedefName);
 	}
}

VarType TypeFloat()#void :{
  int a=8,b=24;
  VarType t = new VarType();}
{
  (<FLOAT> (<LPAREN> a=ConstOrInt() <COMMA> b=ConstOrInt() <RPAREN>)?)
  {
    if((a<0)||(b<0))
    {
      Error("Invalid value for typedef!!\n");    }
    t.setType(VarType.Type.FLOAT);
    t.bitwidth = a+b;
    return t;  }}

VarType TypeFixed()#void :
{
  int a=16,b=16;
  VarType t = new VarType();
}
{
  (<FIXED> (<LPAREN> a=ConstOrInt() <COMMA> b=ConstOrInt() <RPAREN>)?)
  {    if((a<0)||(b<0))
    {
      Error("Invalid value for typedef!!\n");
    }    t.setType(VarType.Type.UFIXED);    t.bitwidth = a+b;
    return t;
  }
}

VarType TypeSFixed()#void :
{
  int a=16,b=16;
  VarType t = new VarType();
}
{
  
  (<SFIXED> (<LPAREN> a=ConstOrInt() <COMMA> b=ConstOrInt() <RPAREN>)?)
  {
    if((a<0)||(b<0))
    {
      Error("Invalid value for typedef!!\n");
    }
    t.setType(VarType.Type.SFIXED);
    t.bitwidth = a+b;
    return t;
  }
}

VarType TypeUFixed()#void :
{
  int a=32,b=32;
  VarType t = new VarType();
}
{
  
  (<UFIXED> (<LPAREN> a=ConstOrInt() <COMMA> b=ConstOrInt() <RPAREN>)?)
  {
    if((a<0)||(b<0))
    {
      Error("Invalid value for typedef!!\n");
    }
    t.setType(VarType.Type.UFIXED);
    t.bitwidth = a+b;
    return t;
  }
}


VarType TypeBit()#void:
{
  VarType t = new VarType();
}
{
  <BIT>
  {
    t.setType(VarType.Type.BIT);
    t.bitwidth = 1;
    return t;  }}

VarType TypeUnsigned()#void :
{
  int bitwidth=32;
  VarType t = new VarType();
}
{
    (<UNSIGNED> (<LPAREN> bitwidth=ConstOrInt() <RPAREN>)?)
    {
      t.setType(VarType.Type.UNSIGNED);
      t.bitwidth = bitwidth;
      return t;
    }
}

VarType TypeSigned()#void :
{
  int bitwidth=32;
  VarType t = new VarType();}
{
    (<SIGNED> (<LPAREN> bitwidth=ConstOrInt() <RPAREN>)?) 
    {
      t.setType(VarType.Type.SIGNED);
      t.bitwidth = bitwidth;
      return t;
    }}

VarType Type() #void : {
	VarType t = new VarType();
}
{
	( t=TypeFixed() |
	  t=TypeUFixed() |
	  t=TypeSFixed() |
	  t=TypeFloat() |
	  t=TypeBit() |
	  t=TypeUnsigned() | 
	  t=TypeSigned() )
    {
      Info(t.toString());
      return t;    }	
}

long FloatLong() #void :{
    Token t;
}
{
   t=<FLOAT_LITERAL>
   {
     return FloatStringToLong(t.image);
   }  
        
}

int Int() #void :{
    Token t;
}
{
   t=<INTEGER_LITERAL>
   {
     return StringToInteger(t.image);
   }
}

long Long() #void :{
    Token t;
}
{
   t=<INTEGER_LITERAL>
   {
     return StringToLong(t.image);
   }
}

void Pin() : {
	Token pinDir, pinName, pinType=null;
	VarType type= new VarType();
}
{
	(pinDir=<IN> | pinDir=<OUT>) ( pinType=<IDENTIFIER> | type=Type()) pinName=<IDENTIFIER>
	{
		if (pinType != null) {
		    if (allTypedefs.containsKey(pinType.image)) {
				type=(VarType)(allTypedefs.get(pinType.image));
				
				//DEBUG
				//InfoToken(pinDir.image + "put pin " + pinName.image + " of type " + pinType.image + " found", pinName);
			}
			else {
				ErrorToken("Type " + pinType.image + " NOT found!", pinType);
			}
		}
		else {
			//DEBUG
			//InfoToken(pinDir.image + "put pin " + pinName.image + " of size " + pinWidth + " found", pinName);
		}
		jjtThis.setIdentifier(pinName.image);
		jjtThis.setWidth(type.bitwidth);		
		allPins.put(pinName.image, jjtThis);
		if (pinDir.kind == IN) {
			jjtThis.setPortType(PortType.INPUT);
		}
		else {
			jjtThis.setPortType(PortType.OUTPUT);
		}
		//allComponents.put(pinName.image, comp);
		//jjtThis.setComponent(comp);
	}
}

void Statements() #void : {}
{
 	 (Declarations())?
 	 (Statement())+
}

void Declarations() #void : {}
{
 	 <LBRACE> (Declaration())+ <RBRACE>
 	
}

void Declaration() #void : {
	Token varType=null;
	VarType type= null;
}
{
	(varType=<IDENTIFIER> | type=Type()) 
	{
		if (varType != null) {
			if (allTypedefs.containsKey(varType.image)) {
				type=(VarType)(allTypedefs.get(varType.image));
			}
			else {
				ErrorToken("Type " + varType.image + " NOT found!", varType);
			}
		}
	}
	(Variable(type)) ("," (Variable(type)))* <SEMICOLON>
}

void Variable(VarType type) : {
	Token tName;
	Integer size = null;
	Long init = null;
	Vector<String> inits = null;
}
{
	
	tName=<IDENTIFIER> (<LBRACKET> (size=ConstOrInt())? <RBRACKET>)? ("=" (init=ConstOrLong() | inits=MemoryInit(inits)))?
	{
	  
		if (allVariables.containsKey(tName.image)) {
			ErrorToken("Redefinition of Variable " + tName.image, tName);
		}
		jjtThis.setIdentifier(tName.image);
		if (size == null && inits != null && inits.size() != 0)
			size = inits.size();
		jjtThis.setArraySize(size);
        jjtThis.jjtSetValue(init);
		jjtThis.setInits(inits);
		jjtThis.setWidth(type.bitwidth);
		jjtThis.setToken(tName);
		jjtThis.setVarType(type);
        
        // 
		//if(floatValue || type.getType()== VarType.Type.FLOAT)
		if(type.getType()== VarType.Type.FLOAT)
        {
          floatValue = false;
          jjtThis.setFloatNumber(true);
        }
        
		allVariables.put(tName.image, jjtThis);
		// comp = design.addComponent(comp);
		// jjtThis.setComponent(comp);
		// allComponents.put(tName.image, comp);
		//DEBUG 
		//InfoToken("Variable " + tName.image + (size>0 ? "[" + size +"]" : "") + (init != null ? " with initial value " + init : "") +" found", tName);
	}
}

void Result(int varWidth, Process process) : {
	Token tName;
	Integer size = null;
	Long init = null;
	Vector<String> inits = null;
}
{
	tName=<IDENTIFIER> (<LBRACKET> (size=ConstOrInt())? <RBRACKET>)? ("=" (init=ConstOrLong() | inits=MemoryInit(inits)))?
	{
		/*if (allResults.containsKey(tName.image)) {
			ErrorToken("Redefinition of Result " + tName.image, tName);
		}*/
		jjtThis.setIdentifier(tName.image);
		if (size == null && inits != null && inits.size() != 0)
			size = inits.size();
		jjtThis.setArraySize(size);
		jjtThis.jjtSetValue(init);
		jjtThis.setInits(inits);
		jjtThis.setWidth(varWidth);
		jjtThis.setToken(tName);
		allResults.put(tName.image, jjtThis);
		process.addResult(jjtThis);
		// comp = design.addComponent(comp);
		// jjtThis.setComponent(comp);
		// allComponents.put(tName.image, comp);
		//DEBUG 
		//InfoToken("Variable " + tName.image + (size>0 ? "[" + size +"]" : "") + (init != null ? " with initial value " + init : "") +" found", tName);
		/*
		testbenchUnity = new TestbenchUnity();
		testbenchUnity.setResultName(tName.image);
		testbenchUnity.setConditionalSignal(conditionalSignal);
		//Add the result to the list of its type
		if(resultType.equals("When"))
			whenList.add(testbenchUnity);
		else if(resultType.equals("Foreach"))
			foreachList.add(testbenchUnity);
		else
			equalityList.add(testbenchUnity);*/					
		
	}
}

void TestbenchEntry(int varWidth) : {
	Token tName;
	Integer size = null;
	Long init = null;
	Vector<String> inits = null;
}
{
	tName=<IDENTIFIER> (<LBRACKET> (size=ConstOrInt())? <RBRACKET>)? ("=" (init=ConstOrLong() | inits=MemoryInit(inits)))?
	{
		if (!allPins.containsKey(tName.image)) {
			ErrorToken("Output Variable " + tName.image + " NOT found!", tName);
		}
		jjtThis.setIdentifier(tName.image);
		if (size == null && inits != null && inits.size() != 0)
			size = inits.size();
		jjtThis.setArraySize(size);
		jjtThis.jjtSetValue(init);
		jjtThis.setInits(inits);
		jjtThis.setWidth(varWidth);
		jjtThis.setToken(tName);
		allTestbenchEntries.put(tName.image, jjtThis);
		// comp = design.addComponent(comp);
		// jjtThis.setComponent(comp);
		// allComponents.put(tName.image, comp);
		//DEBUG 
		//InfoToken("Variable " + tName.image + (size>0 ? "[" + size +"]" : "") + (init != null ? " with initial value " + init : "") +" found", tName);
	}
}


Vector<String> MemoryInit(Vector<String> inits) #void : {
    Token t1, t2=null;
}
{
    <LBRACE> (t1=<INTEGER_LITERAL> | t1=<FLOAT_LITERAL>)
    {
        if (inits == null) {
            inits = new Vector<String>();
        }
          inits.add(t1.image);
    }
    ( <COMMA> (t2=<INTEGER_LITERAL>|t2=<FLOAT_LITERAL>)
    {
        if (t2 != null) {
            inits.add(t2.image);
        }
    }
    )* <RBRACE>
    {
        return inits;
    }
}

void Counter() : {
	
	Token tVarInit, iLoad=null, vLoad=null;
	
	Token tVarTerm, iTerm=null, vTerm=null;
	String termCond;
	
	Token tVarInc, tIncOper;
	Integer steps = 1, increment = 1;
	
}
{
	<COUNTER> <LPAREN> 
		
	(tVarInit=<IDENTIFIER> "=" (iLoad=<INTEGER_LITERAL> | vLoad=<IDENTIFIER>))
	{
		if (!allVariables.containsKey(tVarInit.image)) {
			ErrorToken("Variable " + tVarInit.image + " NOT found!", tVarInit);
		}		
		if (iLoad != null) { //literal initialization
			jjtThis.setLoad(StringToInteger(iLoad.image));
		}
		else if (allConsts.containsKey(vLoad.image)) { //constant initialization
			jjtThis.setLoad(new Integer(allConsts.get(vLoad.image)));
		}
		else if (allVariables.containsKey(vLoad.image)) { //variable initialization
			jjtThis.setLoad(allVariables.get(vLoad.image));
		}
		else {
			ErrorToken("Constant/Variable "+vLoad.image+" NOT found!", vLoad);
		}
		jjtThis.setIdentifier(tVarInit.image);
		allAttribution.put(tVarInit.image, tVarInit.beginLine);
		//allVariables.put(tVarInit.image, jjtThis);	
	}
	
	<SEMICOLON> 
	
	(tVarTerm=<IDENTIFIER> termCond=CounterComp() (iTerm=<INTEGER_LITERAL> | vTerm=<IDENTIFIER>))
	{
		if (iTerm != null) { //literal initialization
			jjtThis.setTerm(StringToInteger(iTerm.image));
		}
		else if (allConsts.containsKey(vTerm.image)) { //constant initialization
			jjtThis.setTerm(new Integer(allConsts.get(vTerm.image)));
		}
		else if (allVariables.containsKey(vTerm.image)) { //variable initialization
			jjtThis.setTerm(allVariables.get(vTerm.image));
		}
		else {
			ErrorToken("Constant/Variable "+vTerm.image+" NOT found!", vTerm);
		}
		jjtThis.setTermCond(termCond);
	}
	
	<SEMICOLON> 
	
	(tVarInc=<IDENTIFIER> (tIncOper="++" | tIncOper="--" | tIncOper="+=" increment=ConstOrInt() | tIncOper="-=" increment=ConstOrInt()) (<AT> steps=ConstOrInt())?)
	{
		jjtThis.setIncOper(tIncOper.image);
		jjtThis.setStepDelay(steps);
		jjtThis.setInc(increment);
	}
	
	<RPAREN>
	
	{
		if (!(tVarInit.image.equals(tVarTerm.image) && tVarTerm.image.equals(tVarInc.image))) {
			Error("Counter Initialization/Termination/Increment must use the same variable");
		}
		String incOper=tIncOper.image;
		if (incOper.charAt(0)=='-') {
			jjtThis.setCounterDown(true);
		}						
		jjtThis.setComponentClass(counter.class);		
	}
}

String CounterComp() #void : {
	Token t;
}
{
	(t="<" | t="<=" | t=">" | t=">=" | t="==" | t="!=")
	{
		return t.image;
	}
}

void Statement() #void : {}
{
	(Assignment() | Counter()) <SEMICOLON>
}

void Assignment() : {
	String operator = null;
}
{
	LHS() operator=AssignmentOperator() RHS() (When())?
	{		
		jjtThis.setIdentifier(operator);
	}
}

void When() : {}
{
	<WHEN> Expression()
}

void WhenChecking(): 
{
	Token tName;
	Process process = null;
}
{

	<WHEN> tName=<IDENTIFIER> <CHANGES>
	{
		if(!allPins.containsKey(tName.image))
			ErrorToken("Variable " + tName.image + " NOT found!", tName);
		else
			process = new Process(Process.CheckingType.WHEN, tName.image);
	}
	<LBRACE>
		(<CHECK> Results(process))+
	<RBRACE>
	{
		allProcesses.add(process);
	}
}

void ForeachChecking(): 
{
	Process process = null;
	long value = 0;
}
{
	<FOREACH> (value = ConstOrLong())? <CLOCK>
	{
		process = new Process(Process.CheckingType.FOREACH, (int)value);
	}
	<LBRACE>
		(<CHECK> Results(process))+
	<RBRACE>
	{
		allProcesses.add(process);
	}
}

void LHS() : {
	Token tName, tPort = null;
}
{
	tName=<IDENTIFIER> (<DOT> tPort=<IDENTIFIER>)?
	{
		if (allVariables.containsKey(tName.image) || allPins.containsKey(tName.image)) {
			jjtThis.setIdentifier(tName.image);
			//jjtThis.setComponentClass(loop.components.reg_op.class);
			if (tPort != null) {
				jjtThis.setPort(tPort.image);
			}
			allAttribution.put(tName.image, tName.beginLine);
			allAttributionLines.put(tName.beginLine, tName.image);
		}
		else {
			ErrorToken("Variable/Pin " + tName.image + " NOT found!", tName);
		}
	}
}

String AssignmentOperator() #void : {
	Token t;
}
{
	( t="=" 
	| t="*=" 
	| t="/=" 
	| t="%=" 
	| t="+=" 
	| t="-=" 
	| t="<<=" 
	| t=">>=" 
	| t=">>>=" 
	| t="&=" 
	| t="^=" 
	| t="|=")
	{
		return t.image;
	}
}

void RHS() : {}
{
	Expression()
}

void Expression() : {}
{
	DelayExpression()
}

void DelayExpression() : {
	Integer amount = null;
	Integer endAmount = null;
}
{
	ConditionalExpression() (
	LOOKAHEAD(1) {jjtThis.setComponentClass(delay_op.class);} 
	<AT> amount=ConstOrInt()(<HASH> endAmount=ConstOrInt(){jjtThis.setEndStepDelay(endAmount);})? {jjtThis.setStepDelay(amount);} 
	)?
}


void ConditionalExpression() : {}
{
  ConditionalOrExpression() [ "?" {jjtThis.setComponentClass(reg_mux_op.class);} ConditionalOrExpression() ":" ConditionalOrExpression() ]
}

void ConditionalOrExpression() : {}
{
  ConditionalAndExpression() ( {jjtThis.setComponentClass(or_op.class);} "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression() : {}
{
  InclusiveOrExpression() ( {jjtThis.setComponentClass(and_op.class);} "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression() : {}
{
  ExclusiveOrExpression() ( {jjtThis.setComponentClass(or_op.class);} "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression() : {}
{
  AndExpression() ( {jjtThis.setComponentClass(xor_op.class);} "^" AndExpression() )*
}

void AndExpression() : {}
{
 	EqualityExpression() 
 	( {jjtThis.setComponentClass(and_op.class);} "&" EqualityExpression() )*
}

void EqualityExpression() : {}
{
	RelationalExpression() 
	( ( 
	"==" {jjtThis.setComponentClass(if_eq_op_s.class);} | 
	"!=" {jjtThis.setComponentClass(if_ne_op_s.class);}
	) RelationalExpression() )*
}

void RelationalExpression() : {}
{
  ShiftExpression() 
  ( ( 
  "<" {jjtThis.setComponentClass(if_lt_op_s.class);} | 
  ">" {jjtThis.setComponentClass(if_gt_op_s.class);} | 
  "<=" {jjtThis.setComponentClass(if_le_op_s.class);}| 
  ">=" {jjtThis.setComponentClass(if_ge_op_s.class);}
  ) ShiftExpression() )*
}

void ShiftExpression() : {
	Integer amount = null;
}
{
  AdditiveExpression() ( ( 
  "<<" {jjtThis.setComponentClass(shl_c_op_s.class);} | 
  ">>" {jjtThis.setComponentClass(shr_c_op_s.class);} | 
  ">>>" //TODO verificar qual dos dois shifts e o correto para a operação sem sinal que está no VHDL
  ) amount=ConstOrInt() {jjtThis.setStepDelay(amount);} )*
}

void AdditiveExpression() : {}
{
  MultiplicativeExpression() ( ( 
  <PLUS> {jjtThis.setComponentClass(add_op_s.class);}
  | 
  <MINUS> {jjtThis.setComponentClass(sub_op_s.class);}
  ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() : {
	Integer amount = null;
	Integer endAmount = null;
}
{
  UnaryExpression() ( ( 
  <STAR>     {jjtThis.setComponentClass(mult_op_s.class);} |
  "*@" amount=ConstOrInt()(<HASH> endAmount=ConstOrInt())? {jjtThis.setStepDelay(amount);} {jjtThis.setComponentClass(mult_op_s_p.class);} | // pipelined multiply 
  <SLASH>    {jjtThis.setComponentClass(div_op_s.class);} |
  <REM>      {jjtThis.setComponentClass(mod_op_s.class);}
  ) UnaryExpression() )*
}

void UnaryExpression() : {}
{
  ( 
  <PLUS> | 
  <MINUS> {jjtThis.setComponentClass(neg_op_s.class);}  
  ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

//TODO: talvez convenha remover estas duas operações 

void PreIncrementExpression() : {}
{
  <INCR> PrimaryExpression()
}

void PreDecrementExpression() : {}
{
  <DECR> PrimaryExpression()
}

void UnaryExpressionNotPlusMinus() : {}
{
  ( 
  "~" {jjtThis.setComponentClass(not_op.class);} | 
  "!" {jjtThis.setComponentClass(not_op.class);} 
  ) UnaryExpression()
|
  PostfixExpression()
}

//TODO talvez convenha remover estas duas operações 

void PostfixExpression() : {}
{
  PrimaryExpression() [ <INCR> | <DECR> ]
}

void PrimaryExpression() :{}
{
	<LPAREN> Expression() <RPAREN> | Literal() | Name()
}

void Literal() : {
	Token t;
}
{
	(t=<INTEGER_LITERAL> | t=<FLOAT_LITERAL> | t=<CHARACTER_LITERAL> | t=<STRING_LITERAL> )
	{
	  if(t.kind== FLOAT_LITERAL)	  {
	    jjtThis.jjtSetValue(FloatStringToLong(t.image));
	    jjtThis.setFloatNumber(true);
	  }else	  {
	    jjtThis.jjtSetValue(StringToLong(t.image));
	  }
	}
}

int Constant() #void :{
  Token t;}
{
  t=<IDENTIFIER>
  {    if (allConsts.containsKey(t.image)) {
          return allConsts.get(t.image);
    }
    else {
       ErrorToken("Const " + t.image + " NOT found!", t);
    }
        
   }}


int ConstOrInt() #void : {
	int value = 0;
}
{
   (value=Int()|value=Constant())
   {
     return value;   } 
}


long ConstOrLong() #void : {
	long value = 0;
}
{
   (value=Long() | value=Constant() | value=FloatLong())
   {
     return value;
   } 
}

void Error(String s) #void : {} 
{
	{
		System.err.println(s);
		System.exit(1);
	}
}

void ErrorToken(String s, Token t) #void : {}
{
	{
		Error(s + " line " + t.beginLine + " column " + t.beginColumn);
	}
}

void Info(String s) #void : {} 
{
	{
		System.out.println("parsing: " + s);
	}
}

void InfoToken(String s, Token t) #void : {} 
{
	{
		Info(s + " line " + t.beginLine + " column " + t.beginColumn);
	}
}

Integer StringToInteger(String s) #void : {}
{
	{
        if (s.length() > 1 && s.charAt(1) == 'x'){			return Integer.parseInt(s.substring(2), 16);
     	}
		else{		  return Integer.parseInt(s);
        }
	}
}

Long StringToLong(String s) #void : {}
{
	{
	  if (s.length() > 1 && s.charAt(1) == 'x')      {    	return Long.parseLong(s.substring(2), 16);
	  }
	  else	  {		return Long.parseLong(s);	  }	}
}

Long FloatStringToLong(String s) #void : {}
{
  {
     int raw = Float.floatToIntBits((Float.parseFloat(s)));
     floatValue = true;
     return new Long(raw);
  }
}
