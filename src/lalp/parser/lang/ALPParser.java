/* Generated By:JJTree&JavaCC: Do not edit this line. ALPParser.java */
/* Copyright (c) 2009 Jo√£o M. P. Cardoso <jmpc@acm.org>, All Rights Reserved.
 * Copyright (c) 2009 Ricardo Menotti <ricardomenotti@acm.org>, All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its 
 * documentation for NON-COMERCIAL purposes and without fee is hereby granted 
 * provided that this copyright notice appears in all copies.
 *
 * RICARDO MENOTTI MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR 
 * NON-INFRINGEMENT. RICARDO MENOTTI SHALL NOT BE LIABLE FOR ANY DAMAGES 
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS 
 * SOFTWARE OR ITS DERIVATIVES. 
 */

package lalp.parser.lang;

import java.util.*;

import lalp.core.*;
import lalp.core.Process;
import lalp.components.*;

/**
 * @author <a href="mailto:ricardomenotti@acm.org">Ricardo Menotti</a>
 * @author <a href="http://menotti.pro.br/">Author Page</a>
 * @author <a href="http://www.dc.ufscar.br/">DC UFSCar</a>
 * @version January, 2009
 */

@SuppressWarnings("unchecked")
public class ALPParser/*@bgen(jjtree)*/implements ALPParserTreeConstants, ALPParserConstants {/*@bgen(jjtree)*/
  protected JJTALPParserState jjtree = new JJTALPParserState();
        public Design design;
        public Hashtable<String, Integer> allConsts = new Hashtable<String, Integer>();
        public Hashtable<String, Integer> allTypedefs = new Hashtable<String, Integer>();
        public Hashtable<String, SimpleNode> allPins = new Hashtable<String, SimpleNode>();
        public Hashtable<String, SimpleNode> allVariables = new Hashtable<String, SimpleNode>();
        public Hashtable<String, SimpleNode> allResults = new Hashtable<String, SimpleNode>();
        public Hashtable<String, Integer> allAttribution = new Hashtable<String, Integer>();
        public TreeMap<Integer, String> allAttributionLines = new TreeMap<Integer, String>();
        /*
	public List<TestbenchUnity> whenList = new ArrayList<TestbenchUnity>();
	public List<TestbenchUnity> foreachList = new ArrayList<TestbenchUnity>();
	public List<TestbenchUnity> equalityList = new ArrayList<TestbenchUnity>();
	TestbenchUnity testbenchUnity;*/
        public Vector<Process> allProcesses = new Vector<Process>();

  final public SimpleNode Start() throws ParseException {
                      /*@bgen(jjtree) Start */
        SimpleNode jjtn000 = new SimpleNode(this, JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Const();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPEDEF:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Typedef();
      }
      t = jj_consume_token(IDENTIFIER);
                jjtn000.setIdentifier(t.image);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case OUT:
        Pin();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          Pin();
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      Statements();
      jj_consume_token(RBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        Testbench();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Testbench() throws ParseException {
                    /*@bgen(jjtree) Testbench */
        SimpleNode jjtn000 = new SimpleNode(this, JJTTESTBENCH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
                Info("This file has a testbench!");
      jj_consume_token(ASSERT);
      jj_consume_token(LBRACE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOREACH:
          ForeachChecking();
          break;
        case WHEN:
          WhenChecking();
          break;
        case WAIT:
          EqualityChecking();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHEN:
        case FOREACH:
        case WAIT:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EqualityChecking() throws ParseException {
 /*@bgen(jjtree) EqualityChecking */
        SimpleNode jjtn000 = new SimpleNode(this, JJTEQUALITYCHECKING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tName;
        long value;
        Process process = null;
    try {
      jj_consume_token(WAIT);
      tName = jj_consume_token(IDENTIFIER);
      jj_consume_token(EQ);
      value = ConstOrLong();
                if(!allPins.containsKey(tName.image))
                        ErrorToken("Variable " + tName.image + " NOT found!", tName);
                else
                        process = new Process(Process.CheckingType.WAIT, tName.image, (int)value);
      jj_consume_token(LBRACE);
      label_5:
      while (true) {
        jj_consume_token(CHECK);
        Results(process);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHECK:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                allProcesses.add(process);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Results(Process process) throws ParseException {
                                 /*@bgen(jjtree) Results */
        SimpleNode jjtn000 = new SimpleNode(this, JJTRESULTS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token varType=null;
        int varWidth=0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        varType = jj_consume_token(IDENTIFIER);
        break;
      case FIXED:
        varWidth = Fixed();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if (varType != null) {
                        if (allTypedefs.containsKey(varType.image)) {
                                varWidth=(Integer)(allTypedefs.get(varType.image));
                        }
                        else {
                                ErrorToken("Type " + varType.image + " NOT found!", varType);
                        }
                }
      Result(varWidth, process);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*
Vector<Long> TestResult(Vector<Long> inits) #void : {
	Token t1, t2=null;
}
{
	"{" t1=<INTEGER_LITERAL>
	{
		if (inits == null) {
			inits = new Vector<Long>();
		}
		inits.add(StringToLong(t1.image));
	}
	( "," t2=<INTEGER_LITERAL>
	{
		if (t2 != null) {
			inits.add(StringToLong(t2.image));
		}
	}
	)* "}"
	{
		return inits;
	}
}
*/
  final public void Name() throws ParseException {
               /*@bgen(jjtree) Name */
        SimpleNode jjtn000 = new SimpleNode(this, JJTNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tName, tPort = null;
    try {
      tName = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        tPort = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (allVariables.containsKey(tName.image) || allConsts.containsKey(tName.image) || allPins.containsKey(tName.image)) {
                        jjtn000.setIdentifier(tName.image);
                        //jjtThis.setComponentClass(loop.components.reg_op.class);
                        if (tPort != null) {
                                jjtn000.setPort(tPort.image);
                        }
                }
                else {
                        ErrorToken("Variable/Pin " + tName.image + " NOT found!", tName);
                }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Const() throws ParseException {
                /*@bgen(jjtree) Const */
        SimpleNode jjtn000 = new SimpleNode(this, JJTCONST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token constName, constVal;
    try {
      jj_consume_token(CONST);
      constName = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      constVal = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (allConsts.containsKey(constName.image)) {
                        ErrorToken("Redefinition of Const " + constName.image, constName);
                }
                allConsts.put(constName.image, StringToInteger(constVal.image));
                jjtn000.setIdentifier(constName.image);
                jjtn000.jjtSetValue(StringToInteger(constVal.image));
                //jjtThis.setComponentClass(loop.components.const_op.class);
                //DEBUG
                //InfoToken("Const " + constName.image + " with value " + constVal.image + " found", constName);

    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Typedef() throws ParseException {
                  /*@bgen(jjtree) Typedef */
        SimpleNode jjtn000 = new SimpleNode(this, JJTTYPEDEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token typedefName;
        int typedefVal;
    try {
      jj_consume_token(TYPEDEF);
      typedefVal = Fixed();
      typedefName = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (allTypedefs.containsKey(typedefName.image)) {
                        ErrorToken("Redefinition of Typedef " + typedefName.image, typedefName);
                }
                allTypedefs.put(typedefName.image, typedefVal);
                jjtn000.setIdentifier(typedefName.image);
                jjtn000.setWidth(typedefVal);
                //DEBUG
                //InfoToken("Type " + typedefName.image + " with " + typedefVal + " bit(s) found", typedefName);

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public int Fixed() throws ParseException {
        int bitwidth;
    jj_consume_token(FIXED);
    jj_consume_token(LPAREN);
    bitwidth = ConstOrInt();
    jj_consume_token(COMMA);
    ConstOrInt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      ConstOrInt();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                {if (true) return bitwidth;}
    throw new Error("Missing return statement in function");
  }

  final public void Pin() throws ParseException {
              /*@bgen(jjtree) Pin */
        SimpleNode jjtn000 = new SimpleNode(this, JJTPIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token pinDir, pinName, pinType=null;
        int pinWidth=0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        pinDir = jj_consume_token(IN);
        break;
      case OUT:
        pinDir = jj_consume_token(OUT);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        pinType = jj_consume_token(IDENTIFIER);
        break;
      case FIXED:
        pinWidth = Fixed();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      pinName = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (pinType != null) {
                        if (allTypedefs.containsKey(pinType.image)) {
                                pinWidth=(Integer)(allTypedefs.get(pinType.image));
                                //DEBUG
                                //InfoToken(pinDir.image + "put pin " + pinName.image + " of type " + pinType.image + " found", pinName);
                        }
                        else {
                                ErrorToken("Type " + pinType.image + " NOT found!", pinType);
                        }
                }
                else {
                        //DEBUG
                        //InfoToken(pinDir.image + "put pin " + pinName.image + " of size " + pinWidth + " found", pinName);
                }
                jjtn000.setIdentifier(pinName.image);
                jjtn000.setWidth(pinWidth);
                allPins.put(pinName.image, jjtn000);
                if (pinDir.kind == IN) {
                        jjtn000.setPortType(PortType.INPUT);
                }
                else {
                        jjtn000.setPortType(PortType.OUTPUT);
                }
                //allComponents.put(pinName.image, comp);
                //jjtThis.setComponent(comp);

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Statements() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Declarations();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COUNTER:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
    }
  }

  final public void Declarations() throws ParseException {
    jj_consume_token(LBRACE);
    label_7:
    while (true) {
      Declaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIXED:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
    }
    jj_consume_token(RBRACE);
  }

  final public void Declaration() throws ParseException {
        Token varType=null;
        int varWidth=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      varType = jj_consume_token(IDENTIFIER);
      break;
    case FIXED:
      varWidth = Fixed();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (varType != null) {
                        if (allTypedefs.containsKey(varType.image)) {
                                varWidth=(Integer)(allTypedefs.get(varType.image));
                        }
                        else {
                                ErrorToken("Type " + varType.image + " NOT found!", varType);
                        }
                }
    Variable(varWidth);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      Variable(varWidth);
    }
    jj_consume_token(SEMICOLON);
  }

  final public void Variable(int varWidth) throws ParseException {
                               /*@bgen(jjtree) Variable */
        SimpleNode jjtn000 = new SimpleNode(this, JJTVARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tName;
        Integer size = null;
        Long init = null;
        Vector<Long> inits = null;
    try {
      tName = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case IDENTIFIER:
          size = ConstOrInt();
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case IDENTIFIER:
          init = ConstOrLong();
          break;
        case LBRACE:
          inits = MemoryInit(inits);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (allVariables.containsKey(tName.image)) {
                        ErrorToken("Redefinition of Variable " + tName.image, tName);
                }
                jjtn000.setIdentifier(tName.image);
                if (size == null && inits != null && inits.size() != 0)
                        size = inits.size();
                jjtn000.setArraySize(size);
                jjtn000.jjtSetValue(init);
                jjtn000.setInits(inits);
                jjtn000.setWidth(varWidth);
                jjtn000.setToken(tName);
                allVariables.put(tName.image, jjtn000);
                // comp = design.addComponent(comp);
                // jjtThis.setComponent(comp);
                // allComponents.put(tName.image, comp);
                //DEBUG 
                //InfoToken("Variable " + tName.image + (size>0 ? "[" + size +"]" : "") + (init != null ? " with initial value " + init : "") +" found", tName);

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Result(int varWidth, Process process) throws ParseException {
                                              /*@bgen(jjtree) Result */
        SimpleNode jjtn000 = new SimpleNode(this, JJTRESULT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tName;
        Integer size = null;
        Long init = null;
        Vector<Long> inits = null;
    try {
      tName = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case IDENTIFIER:
          size = ConstOrInt();
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case IDENTIFIER:
          init = ConstOrLong();
          break;
        case LBRACE:
          inits = MemoryInit(inits);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                /*if (allResults.containsKey(tName.image)) {
			ErrorToken("Redefinition of Result " + tName.image, tName);
		}*/
                jjtn000.setIdentifier(tName.image);
                if (size == null && inits != null && inits.size() != 0)
                        size = inits.size();
                jjtn000.setArraySize(size);
                jjtn000.jjtSetValue(init);
                jjtn000.setInits(inits);
                jjtn000.setWidth(varWidth);
                jjtn000.setToken(tName);
                allResults.put(tName.image, jjtn000);
                process.addResult(jjtn000);
                // comp = design.addComponent(comp);
                // jjtThis.setComponent(comp);
                // allComponents.put(tName.image, comp);
                //DEBUG 
                //InfoToken("Variable " + tName.image + (size>0 ? "[" + size +"]" : "") + (init != null ? " with initial value " + init : "") +" found", tName);
                /*
		testbenchUnity = new TestbenchUnity();
		testbenchUnity.setResultName(tName.image);
		testbenchUnity.setConditionalSignal(conditionalSignal);
		//Add the result to the list of its type
		if(resultType.equals("When"))
			whenList.add(testbenchUnity);
		else if(resultType.equals("Foreach"))
			foreachList.add(testbenchUnity);
		else
			equalityList.add(testbenchUnity);*/

    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public Vector<Long> MemoryInit(Vector<Long> inits) throws ParseException {
        Token t1, t2=null;
    jj_consume_token(LBRACE);
    t1 = jj_consume_token(INTEGER_LITERAL);
                if (inits == null) {
                        inits = new Vector<Long>();
                }
                inits.add(StringToLong(t1.image));
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      t2 = jj_consume_token(INTEGER_LITERAL);
                if (t2 != null) {
                        inits.add(StringToLong(t2.image));
                }
    }
    jj_consume_token(RBRACE);
                {if (true) return inits;}
    throw new Error("Missing return statement in function");
  }

  final public void Counter() throws ParseException {
                  /*@bgen(jjtree) Counter */
        SimpleNode jjtn000 = new SimpleNode(this, JJTCOUNTER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tVarInit, iLoad=null, vLoad=null;

        Token tVarTerm, iTerm=null, vTerm=null;
        String termCond;

        Token tVarInc, tIncOper;
        Integer steps = 1, increment = 1;
    try {
      jj_consume_token(COUNTER);
      jj_consume_token(LPAREN);
      tVarInit = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        iLoad = jj_consume_token(INTEGER_LITERAL);
        break;
      case IDENTIFIER:
        vLoad = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if (!allVariables.containsKey(tVarInit.image)) {
                        ErrorToken("Variable " + tVarInit.image + " NOT found!", tVarInit);
                }
                if (iLoad != null) { //literal initialization
                        jjtn000.setLoad(StringToInteger(iLoad.image));
                }
                else if (allConsts.containsKey(vLoad.image)) { //constant initialization
                        jjtn000.setLoad(new Integer(allConsts.get(vLoad.image)));
                }
                else if (allVariables.containsKey(vLoad.image)) { //variable initialization
                        jjtn000.setLoad(allVariables.get(vLoad.image));
                }
                else {
                        ErrorToken("Constant/Variable "+vLoad.image+" NOT found!", vLoad);
                }
                jjtn000.setIdentifier(tVarInit.image);
                allAttribution.put(tVarInit.image, tVarInit.beginLine);
                //allVariables.put(tVarInit.image, jjtThis);	

      jj_consume_token(SEMICOLON);
      tVarTerm = jj_consume_token(IDENTIFIER);
      termCond = CounterComp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        iTerm = jj_consume_token(INTEGER_LITERAL);
        break;
      case IDENTIFIER:
        vTerm = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if (iTerm != null) { //literal initialization
                        jjtn000.setTerm(StringToInteger(iTerm.image));
                }
                else if (allConsts.containsKey(vTerm.image)) { //constant initialization
                        jjtn000.setTerm(new Integer(allConsts.get(vTerm.image)));
                }
                else if (allVariables.containsKey(vTerm.image)) { //variable initialization
                        jjtn000.setTerm(allVariables.get(vTerm.image));
                }
                else {
                        ErrorToken("Constant/Variable "+vTerm.image+" NOT found!", vTerm);
                }
                jjtn000.setTermCond(termCond);
      jj_consume_token(SEMICOLON);
      tVarInc = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        tIncOper = jj_consume_token(INCR);
        break;
      case DECR:
        tIncOper = jj_consume_token(DECR);
        break;
      case PLUSASSIGN:
        tIncOper = jj_consume_token(PLUSASSIGN);
        increment = ConstOrInt();
        break;
      case MINUSASSIGN:
        tIncOper = jj_consume_token(MINUSASSIGN);
        increment = ConstOrInt();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        jj_consume_token(AT);
        steps = ConstOrInt();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
                jjtn000.setIncOper(tIncOper.image);
                jjtn000.setStepDelay(steps);
                jjtn000.setInc(increment);
      jj_consume_token(RPAREN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (!(tVarInit.image.equals(tVarTerm.image) && tVarTerm.image.equals(tVarInc.image))) {
                        Error("Counter Initialization/Termination/Increment must use the same variable");
                }
                String incOper=tIncOper.image;
                if (incOper.charAt(0)=='-') {
                        jjtn000.setCounterDown(true);
                }
                jjtn000.setComponentClass(counter.class);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public String CounterComp() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      t = jj_consume_token(LT);
      break;
    case LE:
      t = jj_consume_token(LE);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case GE:
      t = jj_consume_token(GE);
      break;
    case EQ:
      t = jj_consume_token(EQ);
      break;
    case NE:
      t = jj_consume_token(NE);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Assignment();
      break;
    case COUNTER:
      Counter();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void Assignment() throws ParseException {
                     /*@bgen(jjtree) Assignment */
        SimpleNode jjtn000 = new SimpleNode(this, JJTASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String operator = null;
    try {
      LHS();
      operator = AssignmentOperator();
      RHS();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        When();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setIdentifier(operator);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void When() throws ParseException {
               /*@bgen(jjtree) When */
  SimpleNode jjtn000 = new SimpleNode(this, JJTWHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHEN);
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void WhenChecking() throws ParseException {
 /*@bgen(jjtree) WhenChecking */
        SimpleNode jjtn000 = new SimpleNode(this, JJTWHENCHECKING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tName;
        Process process = null;
    try {
      jj_consume_token(WHEN);
      tName = jj_consume_token(IDENTIFIER);
      jj_consume_token(CHANGES);
                if(!allPins.containsKey(tName.image))
                        ErrorToken("Variable " + tName.image + " NOT found!", tName);
                else
                        process = new Process(Process.CheckingType.WHEN, tName.image);
      jj_consume_token(LBRACE);
      label_10:
      while (true) {
        jj_consume_token(CHECK);
        Results(process);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHECK:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                allProcesses.add(process);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ForeachChecking() throws ParseException {
 /*@bgen(jjtree) ForeachChecking */
        SimpleNode jjtn000 = new SimpleNode(this, JJTFOREACHCHECKING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Process process = new Process(Process.CheckingType.FOREACH);
    try {
      jj_consume_token(FOREACH);
      jj_consume_token(CLOCK);
      jj_consume_token(LBRACE);
      label_11:
      while (true) {
        jj_consume_token(CHECK);
        Results(process);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHECK:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_11;
        }
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                allProcesses.add(process);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LHS() throws ParseException {
              /*@bgen(jjtree) LHS */
        SimpleNode jjtn000 = new SimpleNode(this, JJTLHS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tName, tPort = null;
    try {
      tName = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        tPort = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (allVariables.containsKey(tName.image) || allPins.containsKey(tName.image)) {
                        jjtn000.setIdentifier(tName.image);
                        //jjtThis.setComponentClass(loop.components.reg_op.class);
                        if (tPort != null) {
                                jjtn000.setPort(tPort.image);
                        }
                        allAttribution.put(tName.image, tName.beginLine);
                        allAttributionLines.put(tName.beginLine, tName.image);
                }
                else {
                        ErrorToken("Variable/Pin " + tName.image + " NOT found!", tName);
                }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public String AssignmentOperator() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      t = jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      t = jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      t = jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      t = jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      t = jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      t = jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      t = jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      t = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      t = jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      t = jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      t = jj_consume_token(ORASSIGN);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void RHS() throws ParseException {
              /*@bgen(jjtree) RHS */
  SimpleNode jjtn000 = new SimpleNode(this, JJTRHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Expression() throws ParseException {
                     /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DelayExpression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DelayExpression() throws ParseException {
                          /*@bgen(jjtree) DelayExpression */
        SimpleNode jjtn000 = new SimpleNode(this, JJTDELAYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Integer amount = null;
    try {
      ConditionalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
                      jjtn000.setComponentClass(delay_op.class);
        jj_consume_token(AT);
        amount = ConstOrInt();
                                 jjtn000.setStepDelay(amount);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ConditionalExpression() throws ParseException {
                                /*@bgen(jjtree) ConditionalExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalOrExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
        jj_consume_token(HOOK);
                                   jjtn000.setComponentClass(reg_mux_op.class);
        ConditionalOrExpression();
        jj_consume_token(COLON);
        ConditionalOrExpression();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
                                  /*@bgen(jjtree) ConditionalOrExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONDITIONALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalAndExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_OR:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_12;
        }
                                jjtn000.setComponentClass(or_op.class);
        jj_consume_token(SC_OR);
        ConditionalAndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
                                   /*@bgen(jjtree) ConditionalAndExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONDITIONALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InclusiveOrExpression();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_AND:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_13;
        }
                             jjtn000.setComponentClass(and_op.class);
        jj_consume_token(SC_AND);
        InclusiveOrExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
                                /*@bgen(jjtree) InclusiveOrExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExclusiveOrExpression();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_OR:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_14;
        }
                             jjtn000.setComponentClass(or_op.class);
        jj_consume_token(BIT_OR);
        ExclusiveOrExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
                                /*@bgen(jjtree) ExclusiveOrExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpression();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XOR:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_15;
        }
                     jjtn000.setComponentClass(and_op.class);
        jj_consume_token(XOR);
        AndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AndExpression() throws ParseException {
                        /*@bgen(jjtree) AndExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EqualityExpression();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_AND:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_16;
        }
           jjtn000.setComponentClass(and_op.class);
        jj_consume_token(BIT_AND);
        EqualityExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EqualityExpression() throws ParseException {
                             /*@bgen(jjtree) EqualityExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelationalExpression();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
              jjtn000.setComponentClass(if_eq_op_s.class);
          break;
        case NE:
          jj_consume_token(NE);
              jjtn000.setComponentClass(if_ne_op_s.class);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        RelationalExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void RelationalExpression() throws ParseException {
                               /*@bgen(jjtree) RelationalExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ShiftExpression();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
        case LT:
        case LE:
        case GE:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
       jjtn000.setComponentClass(if_lt_op_s.class);
          break;
        case GT:
          jj_consume_token(GT);
       jjtn000.setComponentClass(if_gt_op_s.class);
          break;
        case LE:
          jj_consume_token(LE);
        jjtn000.setComponentClass(if_le_op_s.class);
          break;
        case GE:
          jj_consume_token(GE);
        jjtn000.setComponentClass(if_ge_op_s.class);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ShiftExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ShiftExpression() throws ParseException {
                          /*@bgen(jjtree) ShiftExpression */
        SimpleNode jjtn000 = new SimpleNode(this, JJTSHIFTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Integer amount = null;
    try {
      AdditiveExpression();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
        case RSIGNEDSHIFT:
        case RUNSIGNEDSHIFT:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_19;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
          jj_consume_token(LSHIFT);
        jjtn000.setComponentClass(shl_c_op_s.class);
          break;
        case RSIGNEDSHIFT:
          jj_consume_token(RSIGNEDSHIFT);
        jjtn000.setComponentClass(shr_c_op_s.class);
          break;
        case RUNSIGNEDSHIFT:
          jj_consume_token(RUNSIGNEDSHIFT);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        amount = ConstOrInt();
                         jjtn000.setStepDelay(amount);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AdditiveExpression() throws ParseException {
                             /*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpression();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
       jjtn000.setComponentClass(add_op_s.class);
          break;
        case MINUS:
          jj_consume_token(MINUS);
       jjtn000.setComponentClass(sub_op_s.class);
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
                                   /*@bgen(jjtree) MultiplicativeExpression */
        SimpleNode jjtn000 = new SimpleNode(this, JJTMULTIPLICATIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Integer amount = null;
    try {
      UnaryExpression();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case 82:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
       jjtn000.setComponentClass(mult_op_s.class);
          break;
        case 82:
          jj_consume_token(82);
          amount = ConstOrInt();
                            jjtn000.setStepDelay(amount);
                                                            jjtn000.setComponentClass(mult_op_s_p.class);
          break;
        case SLASH:
          jj_consume_token(SLASH);
       jjtn000.setComponentClass(div_op_s.class);
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UnaryExpression() throws ParseException {
                          /*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
       jjtn000.setComponentClass(neg_op_s.class);
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
      case INCR:
        PreIncrementExpression();
        break;
      case DECR:
        PreDecrementExpression();
        break;
      case INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
        UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//TODO talvez convenha remover estas duas opera√ß√µes 
  final public void PreIncrementExpression() throws ParseException {
                                 /*@bgen(jjtree) PreIncrementExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREINCREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INCR);
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PreDecrementExpression() throws ParseException {
                                 /*@bgen(jjtree) PreDecrementExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREDECREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECR);
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
                                      /*@bgen(jjtree) UnaryExpressionNotPlusMinus */
  SimpleNode jjtn000 = new SimpleNode(this, JJTUNARYEXPRESSIONNOTPLUSMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case TILDE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
       jjtn000.setComponentClass(not_op.class);
          break;
        case BANG:
          jj_consume_token(BANG);
       jjtn000.setComponentClass(not_op.class);
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
      case INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        PostfixExpression();
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//TODO talvez convenha remover estas duas opera√ß√µes 
  final public void PostfixExpression() throws ParseException {
                            /*@bgen(jjtree) PostfixExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(INCR);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrimaryExpression() throws ParseException {
                            /*@bgen(jjtree) PrimaryExpression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        break;
      case INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Literal();
        break;
      case IDENTIFIER:
        Name();
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Literal() throws ParseException {
                  /*@bgen(jjtree) Literal */
        SimpleNode jjtn000 = new SimpleNode(this, JJTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
        break;
      case CHARACTER_LITERAL:
        t = jj_consume_token(CHARACTER_LITERAL);
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.jjtSetValue(StringToLong(t.image));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public int ConstOrInt() throws ParseException {
        Token t;
        int size = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (t.kind == IDENTIFIER) {
                        if (allConsts.containsKey(t.image)) {
                                size = allConsts.get(t.image);
                        }
                        else {
                                ErrorToken("Const " + t.image + " NOT found!", t);
                        }
                }
                else {
                        size = StringToInteger(t.image);
                }
                {if (true) return size;}
    throw new Error("Missing return statement in function");
  }

  final public long ConstOrLong() throws ParseException {
        Token t;
        long size = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (t.kind == IDENTIFIER) {
                        if (allConsts.containsKey(t.image)) {
                                size = allConsts.get(t.image);
                        }
                        else {
                                ErrorToken("Const " + t.image + " NOT found!", t);
                        }
                }
                else {
                        size = StringToLong(t.image);
                }
                {if (true) return size;}
    throw new Error("Missing return statement in function");
  }

  final public void Error(String s) throws ParseException {
                System.err.println(s);
                System.exit(1);
  }

  final public void ErrorToken(String s, Token t) throws ParseException {
                Error(s + " line " + t.beginLine + " column " + t.beginColumn);
  }

  final public void Info(String s) throws ParseException {
                System.out.println("parsing: " + s);
  }

  final public void InfoToken(String s, Token t) throws ParseException {
                Info(s + " line " + t.beginLine + " column " + t.beginColumn);
  }

  final public Integer StringToInteger(String s) throws ParseException {
                if (s.length() > 1 && s.charAt(1) == 'x')
                        {if (true) return Integer.parseInt(s.substring(2), 16);}
                else
                        {if (true) return Integer.parseInt(s);}
    throw new Error("Missing return statement in function");
  }

  final public Long StringToLong(String s) throws ParseException {
                if (s.length() > 1 && s.charAt(1) == 'x')
                        {if (true) return Long.parseLong(s.substring(2), 16);}
                else
                        {if (true) return Long.parseLong(s);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ALPParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[65];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000,0x2000,0x0,0x18000,0x100000,0x4480000,0x4480000,0x200000,0x4000,0x0,0x0,0x18000,0x4000,0x0,0x40000,0x4000,0x4000,0x0,0x8000000,0x0,0x8000000,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x40000,0x80000,0x200000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc8000000,0x0,0xc8000000,0x0,0x0,0xc8000000,0xc8000000,0x8000000,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x1,0x800,0x400,0x0,0x1,0x20,0x1,0x1,0x1,0x400,0x1,0x80,0x21,0x1000,0x1,0x80,0x21,0x1000,0x400,0x1,0x1,0xc000000,0x2000,0xf0c000,0x1,0x0,0x0,0x0,0x800,0x1000,0x2000,0x40000,0x1000000,0x2000000,0x0,0x0,0x0,0x900000,0x900000,0x60c000,0x60c000,0x0,0x0,0x30000000,0x30000000,0xc0000000,0xc0000000,0x30000000,0x3c030009,0x30000,0x30009,0xc000000,0xc000000,0x9,0x0,0x1,0x1,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ff80,0x0,0x0,0x0,0x0,0x2,0x4,0x1,0x0,0x0,0x0,0x0,0x70,0x70,0x0,0x0,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public ALPParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ALPParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ALPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ALPParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ALPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ALPParser(ALPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ALPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[83];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 65; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

/*	public static void main(String args[]) {
		FileInputStream inStream;
		if (args.length == 0) {
			System.out.println("usage: java RunFile <input_file>");
			System.exit(1);
		} else if (args.length != 1) {
			System.out.println("usage: java RunFile <input_file>");
			System.exit(1);
		}
		try {
			System.out.println("parsing: Reading from file " + args[0] + "...");
			inStream = new FileInputStream(args[0]);
			ALPParser parser = new ALPParser(inStream);
			SimpleNode root = parser.Start();
		} catch (FileNotFoundException e) {
			System.out.println("parsing:  File " + args[0] + " not found.");
			System.exit(1);
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}*/
}
