/* Copyright (c) 2009 Ricardo Menotti, All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its 
 * documentation for NON-COMERCIAL purposes and without fee is hereby granted 
 * provided that this copyright notice appears in all copies.
 *
 * RICARDO MENOTTI MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR 
 * NON-INFRINGEMENT. RICARDO MENOTTI SHALL NOT BE LIABLE FOR ANY DAMAGES 
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS 
 * SOFTWARE OR ITS DERIVATIVES. 
 */

// O hardware gerado n√£o foi verificado e possivelmente gera resultados incorretos

const DATA_WIDTH = 32;
const ITERATIONS = 32;

typedef fixed(DATA_WIDTH, 1) int;
typedef fixed(1, 0) bit;

bubble_sort_alp(in bit init, out fixed(DATA_WIDTH, 1) output, out bit done) {
	{
		int v[32] = {
			29, 81, 38, 76, 90, 10, 65, 82, 89, 23, 93, 28, 58, 15, 73, 91,
			30, 83, 39, 77, 91, 11, 66, 84, 92, 24, 94, 31, 58, 15, 73, 91
		};
		int a, b, maior, menor, troca;
		fixed(6, 0) i, im1, j, v_addr;
	}
	i.clk_en = init;
	counter (i=0; i<31; i++@125);
	im1 = i + 1;
	j.load = i.step;
	j.clk_en = init;
	counter (j=im1; j<32; j++@4);
	a = v.data_out when j.step;
	b = v.data_out when j.step@1;
	maior = a;
	maior = b when b > a;
	menor = b;
	menor = a when a < b;
	troca = maior;
	troca = menor when j.step@3;
	v.address = v_addr;
	v.data_in = troca when (j.step@2) | (j.step@3);
	v_addr = i;
	v_addr = j when j.step | (j.step@2);
	output = v.data_out;
	done = i.done@2;
}
