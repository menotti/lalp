/* Copyright (c) 2009 Ricardo Menotti, All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its 
 * documentation for NON-COMERCIAL purposes and without fee is hereby granted 
 * provided that this copyright notice appears in all copies.
 *
 * RICARDO MENOTTI MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
 * OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR 
 * NON-INFRINGEMENT. RICARDO MENOTTI SHALL NOT BE LIABLE FOR ANY DAMAGES 
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS 
 * SOFTWARE OR ITS DERIVATIVES. 
 */

const DATA_WIDTH = 32;
const ITERATIONS = 32;

typedef fixed(DATA_WIDTH, 1) int;
typedef fixed(1, 0) bit;

fibonacci_alp(in bit init, out int output, out bit done) {

	{
		fixed(6, 1) i, v_addr;
		int v[5] = {0, 1};
		int tmp1, tmp2;
	}
	
	counter (i=2; i<ITERATIONS; i++@3);
	i.clk_en = init;
	i.load = !init@1;
	
	v.address = v_addr;
	
	v_addr = i - 1;
	v_addr = i when i.step@1;
	v_addr = i - 2 when i.step@2;
		
	tmp2 = v.data_out when i.step;
	tmp1 = v.data_out when i.step@1;

	v.data_in = tmp1 + tmp2 when i.step@2;
	
	output = v;
	done = i.done;
}
