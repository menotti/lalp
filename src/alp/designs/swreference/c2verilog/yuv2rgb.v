
/*       This module was generated by c-to-verilog.com
 * THIS SOFTWARE IS PROVIDED BY www.c-to-verilog.com ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL c-to-verilog.com BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES)
 * 
 * Found a bug? email info@c-to-verilog.com 
 */


module _Z11yuv2rgba_u8PhS_S_S_i  (clk, reset, rdy,// control 
	mem_rgbp_out0, mem_rgbp_in0, mem_rgbp_addr0, mem_rgbp_mode0, // memport for: rgbp 
	mem_up_out0, mem_up_in0, mem_up_addr0, mem_up_mode0, // memport for: up 
	mem_vp_out0, mem_vp_in0, mem_vp_addr0, mem_vp_mode0, // memport for: vp 
	mem_yp_out0, mem_yp_in0, mem_yp_addr0, mem_yp_mode0, // memport for: yp 
	p_rgbp, p_yp, p_up, p_vp, i_n, return_value); // params 
 input wire clk;
 input wire reset;
 output rdy;
 reg rdy;
 output return_value;
 reg return_value;
 input [15:0] p_rgbp;
 input [15:0] p_yp;
 input [15:0] p_up;
 input [15:0] p_vp;
 input [31:0] i_n;
input wire [7:0] mem_rgbp_out0;
output reg [7:0] mem_rgbp_in0;
output reg [15:0] mem_rgbp_addr0;
output reg mem_rgbp_mode0;
input wire [7:0] mem_up_out0;
output reg [7:0] mem_up_in0;
output reg [15:0] mem_up_addr0;
output reg mem_up_mode0;
input wire [7:0] mem_vp_out0;
output reg [7:0] mem_vp_in0;
output reg [15:0] mem_vp_addr0;
output reg mem_vp_mode0;
input wire [7:0] mem_yp_out0;
output reg [7:0] mem_yp_in0;
output reg [15:0] mem_yp_addr0;
output reg mem_yp_mode0;


 reg i_tmp8021;   /*local var*/
 reg [31:0] i_incrementVal143;   /*local var*/
 reg [31:0] i_incrementVal598;   /*local var*/
 reg [31:0] i_incrementVal;   /*local var*/
 reg [31:0] i_incrementVal429;   /*local var*/
 reg [31:0] i_incrementVal203;   /*local var*/
 reg [31:0] i_incrementVal202;   /*local var*/
 reg [31:0] i_incrementVal144;   /*local var*/
 reg [31:0] i_incrementVal145;   /*local var*/
 reg [31:0] i_incrementVal260;   /*local var*/
 reg [31:0] i_tmp225___0___;   /*local var*/
 reg [31:0] i_tmp503___0___;   /*local var*/
 reg [31:0] i_tmp721___0___;   /*local var*/
 reg [31:0] i_cloned27___0___;   /*local var*/
 reg [31:0] i_tmp503___1___;   /*local var*/
 reg [31:0] i_tmp225___1___;   /*local var*/
 reg [31:0] i_tmp721___1___;   /*local var*/
 reg [31:0] i_cloned27___1___;   /*local var*/
 reg [7:0] i_tmp32___1___;   /*local var*/
 reg [7:0] i_tmp5___1___;   /*local var*/
 reg [7:0] i_tmp11___1___;   /*local var*/
 reg i_exitcond23___0___;   /*local var*/
 reg [7:0] i_tmp32___0___;   /*local var*/
 reg [7:0] i_tmp5___0___;   /*local var*/
 reg [7:0] i_tmp11___0___;   /*local var*/
 reg [31:0] i_tmp35___1___;   /*local var*/
 reg [7:0] i_tmp32___2___;   /*local var*/
 reg [7:0] i_tmp5___2___;   /*local var*/
 reg [7:0] i_tmp11___2___;   /*local var*/
 reg [31:0] i_tmp35___0___;   /*local var*/
 reg [7:0] i_tmp32___3___;   /*local var*/
 reg [7:0] i_tmp5___3___;   /*local var*/
 reg [7:0] i_tmp11___3___;   /*local var*/
 reg [31:0] i_tmp35___2___;   /*local var*/
 reg [7:0] i_tmp32___4___;   /*local var*/
 reg [7:0] i_tmp5___4___;   /*local var*/
 reg [7:0] i_tmp11___4___;   /*local var*/
 reg [31:0] i_tmp35___3___;   /*local var*/
 reg [7:0] i_tmp32___5___;   /*local var*/
 reg [7:0] i_tmp5___5___;   /*local var*/
 reg [7:0] i_tmp11___5___;   /*local var*/
 reg [31:0] i_tmp35___4___;   /*local var*/
 reg [7:0] i_tmp32___6___;   /*local var*/
 reg [7:0] i_tmp5___6___;   /*local var*/
 reg [7:0] i_tmp11___6___;   /*local var*/
 reg [31:0] ltmp_0_1;   /*local var*/
 reg [7:0] i_tmp11___7___;   /*local var*/
 reg [31:0] ltmp_1_1;   /*local var*/
 reg [31:0] i_tmp42___1___;   /*local var*/
 reg [31:0] ltmp_2_1;   /*local var*/
 reg [31:0] i_tmp14___1___;   /*local var*/
 reg [31:0] ltmp_3_1;   /*local var*/
 reg [31:0] i_tmp14___0___;   /*local var*/
 reg [31:0] i_tmp15___1___;   /*local var*/
 reg [31:0] ltmp_4_1;   /*local var*/
 reg [31:0] i_tmp64___1___;   /*local var*/
 reg [31:0] i_tmp15___0___;   /*local var*/
 reg [31:0] ltmp_5_1;   /*local var*/
 reg [31:0] i_tmp42___0___;   /*local var*/
 reg [31:0] i_tmp65___1___;   /*local var*/
 reg [31:0] ltmp_6_1;   /*local var*/
 reg [31:0] i_tmp64___0___;   /*local var*/
 reg [31:0] ltmp_7_1;   /*local var*/
 reg [31:0] i_tmp43___1___;   /*local var*/
 reg [31:0] i_tmp65___0___;   /*local var*/
 reg [31:0] ltmp_8_1;   /*local var*/
 reg [31:0] i_tmp43___0___;   /*local var*/
 reg [31:0] ltmp_9_1;   /*local var*/
 reg [31:0] i_tmp14___2___;   /*local var*/
 reg [31:0] ltmp_10_1;   /*local var*/
 reg [31:0] i_tmp42___2___;   /*local var*/
 reg [31:0] i_tmp15___2___;   /*local var*/
 reg [31:0] ltmp_11_1;   /*local var*/
 reg [31:0] i_tmp64___2___;   /*local var*/
 reg [31:0] ltmp_12_1;   /*local var*/
 reg [31:0] i_tmp43___2___;   /*local var*/
 reg [31:0] i_tmp65___2___;   /*local var*/
 reg [31:0] ltmp_13_1;   /*local var*/
 reg [31:0] i_tmp14___3___;   /*local var*/
 reg [31:0] ltmp_14_1;   /*local var*/
 reg [31:0] i_tmp42___3___;   /*local var*/
 reg [31:0] ltmp_15_1;   /*local var*/
 reg [31:0] i_tmp64___3___;   /*local var*/
 reg [31:0] ltmp_16_1;   /*local var*/
 reg [31:0] ltmp_17_1;   /*local var*/
 reg [31:0] ltmp_18_1;   /*local var*/
 reg [31:0] i_incrementVal2840;   /*local var*/
 reg [31:0] i_incrementVal2845;   /*local var*/
 reg [31:0] i_incrementVal2847;   /*local var*/
 reg [31:0] i_incrementVal2849;   /*local var*/
 reg [31:0] i_incrementVal2856;   /*local var*/
 reg [31:0] i_tmp14;   /*local var*/
 reg [31:0] i_tmp15;   /*local var*/
 reg [31:0] i_tmp225;   /*local var*/
 reg [31:0] i_tmp35;   /*local var*/
 reg [31:0] i_tmp42;   /*local var*/
 reg [31:0] i_tmp43;   /*local var*/
 reg [31:0] i_tmp503;   /*local var*/
 reg [31:0] i_tmp64;   /*local var*/
 reg [31:0] i_tmp65;   /*local var*/
 reg [31:0] i_tmp721;   /*local var*/
 reg [31:0] i_cloned27;   /*local var*/
 reg i_exitcond23;   /*local var*/
 reg [7:0] i_tmp32;   /*local var*/
 reg [7:0] i_tmp5;   /*local var*/
 reg [7:0] i_tmp11;   /*local var*/
 reg [31:0] i_indvar_next22;   /*local var*/
 reg [7:0] i_tmp39;   /*local var*/
 reg [7:0] i_tmp26;   /*local var*/
 reg [31:0] ltmp_19_1;   /*local var*/
 reg [31:0] ltmp_20_1;   /*local var*/
 reg [31:0] ltmp_21_1;   /*local var*/
 reg [31:0] ltmp_22_1;   /*local var*/
 reg i_gluePipelinedLoop2904;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2903;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop2901;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2900;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop2899;   /*phi var*/
 reg [7:0] i_gluePipelinedLoop2898;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2897;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2896;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2895;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2894;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2893;   /*phi var*/
 reg [7:0] i_gluePipelinedLoop2892;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2891;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2890;   /*phi var*/
 reg [7:0] i_gluePipelinedLoop2889;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2888;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop2887;   /*phi var*/
 reg [7:0] i_gluePipelinedLoop2886;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2885;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2884;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2883;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2882;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2881;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2880;   /*phi var*/
 reg [7:0] i_gluePipelinedLoop2879;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2878;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop2875;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2871;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2870;   /*phi var*/
 reg [7:0] i_gluePipelinedLoop2869;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2868;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop2867;   /*phi var*/
 reg [7:0] i_gluePipelinedLoop2866;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2865;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2864;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2863;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop2859;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop2857;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2853;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2852;   /*phi var*/
 reg [7:0] i_gluePipelinedLoop2851;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop2850;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop2848;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2846;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop2844;   /*phi var*/
 reg [31:0] i_i_07_0;   /*phi var*/

 // Number of states:41
 reg [5:0] eip;
 parameter entry0 = 6'd0;
 parameter entry1 = 6'd1;
 parameter bb_preheader0 = 6'd2;
 parameter bb_preheader1 = 6'd3;
 parameter bb_preheader2 = 6'd4;
 parameter bb_preheader3 = 6'd5;
 parameter bb_preheader4 = 6'd6;
 parameter bb_preheader5 = 6'd7;
 parameter bb_preheader6 = 6'd8;
 parameter bb_preheader7 = 6'd9;
 parameter bb_preheader8 = 6'd10;
 parameter bb_preheader9 = 6'd11;
 parameter bb_preheader10 = 6'd12;
 parameter bb_preheader11 = 6'd13;
 parameter bb_preheader12 = 6'd14;
 parameter bb_preheader13 = 6'd15;
 parameter bb_preheader14 = 6'd16;
 parameter bb_preheader15 = 6'd17;
 parameter bb_preheader16 = 6'd18;
 parameter bb_preheader17 = 6'd19;
 parameter bb_preheader18 = 6'd20;
 parameter bb_preheader19 = 6'd21;
 parameter bb_preheader20 = 6'd22;
 parameter bb_preheader21 = 6'd23;
 parameter bb_preheader22 = 6'd24;
 parameter bb_preheader23 = 6'd25;
 parameter bb_preheader24 = 6'd26;
 parameter bb_preheader25 = 6'd27;
 parameter bb_preheader26 = 6'd28;
 parameter bb_preheader27 = 6'd29;
 parameter PipelinedLoop0 = 6'd30;
 parameter PipelinedLoop1 = 6'd31;
 parameter PipelinedLoop2 = 6'd32;
 parameter PipelinedLoop3 = 6'd33;
 parameter PipelinedLoop4 = 6'd34;
 parameter PipelinedLoop5 = 6'd35;
 parameter PipelinedLoop6 = 6'd36;
 parameter PipelinedLoop7 = 6'd37;
 parameter PipelinedLoop8 = 6'd38;
 parameter PipelinedLoop9 = 6'd39;
 parameter return0 = 6'd40;

// Assign part (23)
wire [31:0] mul0_in_a;
wire [31:0] mul0_in_b;
 assign mul0_in_a = 
 (eip == PipelinedLoop0) ? i_gluePipelinedLoop2852 :
 (eip == PipelinedLoop1) ? i_gluePipelinedLoop2890 :
 (eip == PipelinedLoop2) ? i_gluePipelinedLoop2880 :
 (eip == PipelinedLoop3) ? i_gluePipelinedLoop2890 :
 (eip == bb_preheader3) ? (i_tmp32___1___) :
 (eip == bb_preheader4) ? (i_tmp5___1___) :
 (eip == bb_preheader5) ? (i_tmp5___0___) :
 (eip == bb_preheader6) ? (i_tmp32___1___) :
 (eip == bb_preheader7) ? (i_tmp32___0___) :
 (eip == bb_preheader8) ? (i_tmp32___0___) :
 (eip == bb_preheader9) ? (i_tmp5___1___) :
 (eip == bb_preheader10) ? (i_tmp5___0___) :
 (eip == bb_preheader11) ? (i_tmp5___2___) :
 (eip == bb_preheader12) ? (i_tmp32___2___) :
 (eip == bb_preheader13) ? (i_tmp32___2___) :
 (eip == bb_preheader14) ? (i_tmp5___2___) :
 (eip == bb_preheader15) ? (i_tmp5___3___) :
 (eip == bb_preheader16) ? (i_tmp32___3___) :
 (eip == bb_preheader17) ? (i_tmp32___3___) :
 (eip == bb_preheader18) ? (i_tmp5___3___) :
 (eip == bb_preheader19) ? (i_tmp5___4___) :
 (eip == bb_preheader20) ? (i_tmp32___4___) :
 (eip == bb_preheader21) ? (i_tmp32___4___) :0;
 assign mul0_in_b = 
 (eip == PipelinedLoop0) ? (358) :
 (eip == PipelinedLoop1) ? (-88) :
 (eip == PipelinedLoop2) ? (-183) :
 (eip == PipelinedLoop3) ? (454) :
 (eip == bb_preheader3) ? (-88) :
 (eip == bb_preheader4) ? (358) :
 (eip == bb_preheader5) ? (358) :
 (eip == bb_preheader6) ? (454) :
 (eip == bb_preheader7) ? (-88) :
 (eip == bb_preheader8) ? (454) :
 (eip == bb_preheader9) ? (-183) :
 (eip == bb_preheader10) ? (-183) :
 (eip == bb_preheader11) ? (358) :
 (eip == bb_preheader12) ? (-88) :
 (eip == bb_preheader13) ? (454) :
 (eip == bb_preheader14) ? (-183) :
 (eip == bb_preheader15) ? (358) :
 (eip == bb_preheader16) ? (-88) :
 (eip == bb_preheader17) ? (454) :
 (eip == bb_preheader18) ? (-183) :
 (eip == bb_preheader19) ? (358) :
 (eip == bb_preheader20) ? (-88) :
 (eip == bb_preheader21) ? (454) :0;

wire [31:0] out_mul0;
mul  mul0_instance (.clk(clk), .a(mul0_in_a), .b(mul0_in_b), .p(out_mul0));



always @(posedge clk)
 begin
  if (reset)
   begin
    $display("@hard reset");
    eip<=0;
    rdy<=0;
   end


// Datapath 
i_tmp8021 <= (i_n > (0));
i_incrementVal143 <= (1)+(0);
i_incrementVal598 <= (0)+(0);
i_incrementVal <= (2)+(0);
i_incrementVal429 <= (3)+(0);
i_incrementVal203 <= (4)+(0);
i_incrementVal202 <= (5)+(0);
i_incrementVal144 <= (6)+(0);
i_incrementVal145 <= (7)+(0);
i_incrementVal260 <= (8)+(0);
i_tmp225___0___ <= (i_incrementVal598 << (2))|(1);
i_tmp503___0___ <= (i_incrementVal598 << (2))|(2);
i_tmp721___0___ <= (i_incrementVal598 << (2))|(3);
i_cloned27___0___ <= i_incrementVal598+(1);
i_tmp503___1___ <= (i_incrementVal143 << (2))|(2);
i_tmp225___1___ <= (i_incrementVal143 << (2))|(1);
i_tmp721___1___ <= (i_incrementVal143 << (2))|(3);
i_cloned27___1___ <= i_incrementVal143+(1);
i_exitcond23___0___ <= (i_cloned27___0___ == i_n);
i_tmp35___1___ <= ((i_tmp11___1___) << (8))+(34688);
i_tmp35___0___ <= ((i_tmp11___0___) << (8))+(34688);
i_tmp35___2___ <= ((i_tmp11___2___) << (8))+(34688);
i_tmp35___3___ <= ((i_tmp11___3___) << (8))+(34688);
i_tmp35___4___ <= ((i_tmp11___4___) << (8))+(34688);
i_tmp42___1___ <= i_tmp35___1___+ltmp_0_1;
i_tmp14___1___ <= ltmp_1_1+(19712);
i_tmp14___0___ <= ltmp_2_1+(19712);
i_tmp15___1___ <= i_tmp14___1___+((i_tmp11___1___) << (8));
i_tmp64___1___ <= ltmp_3_1+(7424);
i_tmp15___0___ <= i_tmp14___0___+((i_tmp11___0___) << (8));
i_tmp42___0___ <= i_tmp35___0___+ltmp_4_1;
i_tmp65___1___ <= i_tmp64___1___+((i_tmp11___1___) << (8));
i_tmp64___0___ <= ltmp_5_1+(7424);
i_tmp43___1___ <= i_tmp42___1___+ltmp_6_1;
i_tmp65___0___ <= i_tmp64___0___+((i_tmp11___0___) << (8));
i_tmp43___0___ <= i_tmp42___0___+ltmp_7_1;
i_tmp14___2___ <= ltmp_8_1+(19712);
i_tmp42___2___ <= i_tmp35___2___+ltmp_9_1;
i_tmp15___2___ <= i_tmp14___2___+((i_tmp11___2___) << (8));
i_tmp64___2___ <= ltmp_10_1+(7424);
i_tmp43___2___ <= i_tmp42___2___+ltmp_11_1;
i_tmp65___2___ <= i_tmp64___2___+((i_tmp11___2___) << (8));
i_tmp14___3___ <= ltmp_12_1+(19712);
i_tmp42___3___ <= i_tmp35___3___+ltmp_13_1;
i_tmp64___3___ <= ltmp_14_1+(7424);
i_incrementVal2840 <= (3)+i_i_07_0;
i_incrementVal2845 <= (2)+i_i_07_0;
i_incrementVal2847 <= (7)+i_i_07_0;
i_incrementVal2849 <= (8)+i_i_07_0;
i_incrementVal2856 <= (9)+i_i_07_0;
i_tmp14 <= i_gluePipelinedLoop2853+(19712);
i_tmp15 <= i_gluePipelinedLoop2863+i_gluePipelinedLoop2894;
i_tmp225 <= i_gluePipelinedLoop2844|(1);
i_tmp35 <= i_gluePipelinedLoop2871+(34688);
i_tmp42 <= i_gluePipelinedLoop2882+i_gluePipelinedLoop2878;
i_tmp43 <= i_gluePipelinedLoop2883+i_gluePipelinedLoop2881;
i_tmp503 <= i_gluePipelinedLoop2844|(2);
i_tmp64 <= i_gluePipelinedLoop2891+(7424);
i_tmp65 <= i_gluePipelinedLoop2895+i_gluePipelinedLoop2894;
i_tmp721 <= i_gluePipelinedLoop2844|(3);
i_cloned27 <= i_i_07_0+(1);
i_exitcond23 <= (i_gluePipelinedLoop2903 == i_n);
i_indvar_next22 <= i_incrementVal2845+(1);


// Control 
case (eip)
entry0:
begin
	eip <= entry1;
end
entry1:
begin
	if (i_tmp8021) begin
		eip <= bb_preheader0;
	end else begin
		eip <= return0;
	end
end
bb_preheader0:
begin
	eip <= bb_preheader1;
end
bb_preheader1:
begin
	mem_up_mode0 <= 0;
	mem_up_addr0 <= (p_up + i_incrementVal143);
	mem_vp_mode0 <= 0;
	mem_vp_addr0 <= (p_vp + i_incrementVal143);
	mem_yp_mode0 <= 0;
	mem_yp_addr0 <= (p_yp + i_incrementVal143);
	eip <= bb_preheader2;
end
bb_preheader2:
begin
	i_tmp32___1___ <= mem_up_out0;
	mem_up_mode0 <= 0;
	mem_up_addr0 <= (p_up + i_incrementVal598);
	i_tmp5___1___ <= mem_vp_out0;
	mem_vp_mode0 <= 0;
	mem_vp_addr0 <= (p_vp + i_incrementVal598);
	i_tmp11___1___ <= mem_yp_out0;
	mem_yp_mode0 <= 0;
	mem_yp_addr0 <= (p_yp + i_incrementVal598);
	eip <= bb_preheader3;
end
bb_preheader3:
begin
	i_tmp32___0___ <= mem_up_out0;
	mem_up_mode0 <= 0;
	mem_up_addr0 <= (p_up + i_incrementVal);
	i_tmp5___0___ <= mem_vp_out0;
	mem_vp_mode0 <= 0;
	mem_vp_addr0 <= (p_vp + i_incrementVal);
	i_tmp11___0___ <= mem_yp_out0;
	mem_yp_mode0 <= 0;
	mem_yp_addr0 <= (p_yp + i_incrementVal);
	eip <= bb_preheader4;
end
bb_preheader4:
begin
	i_tmp32___2___ <= mem_up_out0;
	mem_up_mode0 <= 0;
	mem_up_addr0 <= (p_up + i_incrementVal429);
	i_tmp5___2___ <= mem_vp_out0;
	mem_vp_mode0 <= 0;
	mem_vp_addr0 <= (p_vp + i_incrementVal429);
	i_tmp11___2___ <= mem_yp_out0;
	mem_yp_mode0 <= 0;
	mem_yp_addr0 <= (p_yp + i_incrementVal429);
	eip <= bb_preheader5;
end
bb_preheader5:
begin
	i_tmp32___3___ <= mem_up_out0;
	mem_up_mode0 <= 0;
	mem_up_addr0 <= (p_up + i_incrementVal203);
	i_tmp5___3___ <= mem_vp_out0;
	mem_vp_mode0 <= 0;
	mem_vp_addr0 <= (p_vp + i_incrementVal203);
	i_tmp11___3___ <= mem_yp_out0;
	mem_yp_mode0 <= 0;
	mem_yp_addr0 <= (p_yp + i_incrementVal203);
	eip <= bb_preheader6;
end
bb_preheader6:
begin
	i_tmp32___4___ <= mem_up_out0;
	mem_up_mode0 <= 0;
	mem_up_addr0 <= (p_up + i_incrementVal202);
	i_tmp5___4___ <= mem_vp_out0;
	mem_vp_mode0 <= 0;
	mem_vp_addr0 <= (p_vp + i_incrementVal202);
	i_tmp11___4___ <= mem_yp_out0;
	mem_yp_mode0 <= 0;
	mem_yp_addr0 <= (p_yp + i_incrementVal202);
	eip <= bb_preheader7;
end
bb_preheader7:
begin
	i_tmp32___5___ <= mem_up_out0;
	mem_up_mode0 <= 0;
	mem_up_addr0 <= (p_up + i_incrementVal144);
	i_tmp5___5___ <= mem_vp_out0;
	mem_vp_mode0 <= 0;
	mem_vp_addr0 <= (p_vp + i_incrementVal144);
	i_tmp11___5___ <= mem_yp_out0;
	mem_yp_mode0 <= 0;
	mem_yp_addr0 <= (p_yp + i_incrementVal144);
	eip <= bb_preheader8;
end
bb_preheader8:
begin
	i_tmp32___6___ <= mem_up_out0;
	i_tmp5___6___ <= mem_vp_out0;
	i_tmp11___6___ <= mem_yp_out0;
	mem_yp_mode0 <= 0;
	mem_yp_addr0 <= (p_yp + i_incrementVal145);
	ltmp_0_1 <= out_mul0;
	eip <= bb_preheader9;
end
bb_preheader9:
begin
	i_tmp11___7___ <= mem_yp_out0;
	ltmp_1_1 <= out_mul0;
	eip <= bb_preheader10;
end
bb_preheader10:
begin
	ltmp_2_1 <= out_mul0;
	eip <= bb_preheader11;
end
bb_preheader11:
begin
	ltmp_3_1 <= out_mul0;
	eip <= bb_preheader12;
end
bb_preheader12:
begin
	ltmp_4_1 <= out_mul0;
	eip <= bb_preheader13;
end
bb_preheader13:
begin
	ltmp_5_1 <= out_mul0;
	eip <= bb_preheader14;
end
bb_preheader14:
begin
	ltmp_6_1 <= out_mul0;
	eip <= bb_preheader15;
end
bb_preheader15:
begin
	ltmp_7_1 <= out_mul0;
	eip <= bb_preheader16;
end
bb_preheader16:
begin
	ltmp_8_1 <= out_mul0;
	eip <= bb_preheader17;
end
bb_preheader17:
begin
	ltmp_9_1 <= out_mul0;
	eip <= bb_preheader18;
end
bb_preheader18:
begin
	ltmp_10_1 <= out_mul0;
	eip <= bb_preheader19;
end
bb_preheader19:
begin
	ltmp_11_1 <= out_mul0;
	eip <= bb_preheader20;
end
bb_preheader20:
begin
	ltmp_12_1 <= out_mul0;
	eip <= bb_preheader21;
end
bb_preheader21:
begin
	ltmp_13_1 <= out_mul0;
	eip <= bb_preheader22;
end
bb_preheader22:
begin
	ltmp_14_1 <= out_mul0;
	eip <= bb_preheader23;
end
bb_preheader23:
begin
	ltmp_15_1 <= out_mul0;
	eip <= bb_preheader24;
end
bb_preheader24:
begin
	ltmp_16_1 <= out_mul0;
	eip <= bb_preheader25;
end
bb_preheader25:
begin
	ltmp_17_1 <= out_mul0;
	eip <= bb_preheader26;
end
bb_preheader26:
begin
	ltmp_18_1 <= out_mul0;
	eip <= bb_preheader27;
end
bb_preheader27:
begin
			i_gluePipelinedLoop2904 <= i_exitcond23___0___;
		i_gluePipelinedLoop2903 <= i_cloned27___1___;
		p_gluePipelinedLoop2901 <= (p_rgbp + i_tmp721___0___);
		i_gluePipelinedLoop2900 <= i_tmp721___1___;
		p_gluePipelinedLoop2899 <= (p_rgbp + i_tmp503___0___);
		i_gluePipelinedLoop2898 <= (((i_tmp65___0___) >> ((8))));
		i_gluePipelinedLoop2897 <= (((i_tmp65___1___) >> ((8))));
		i_gluePipelinedLoop2896 <= i_tmp65___2___;
		i_gluePipelinedLoop2895 <= i_tmp64___3___;
		i_gluePipelinedLoop2894 <= ((i_tmp11___3___) << (8));
		i_gluePipelinedLoop2893 <= (i_tmp11___4___);
		i_gluePipelinedLoop2892 <= i_tmp11___5___;
		i_gluePipelinedLoop2891 <= ltmp_18_1;
		i_gluePipelinedLoop2890 <= (i_tmp32___5___);
		i_gluePipelinedLoop2889 <= i_tmp32___6___;
		i_gluePipelinedLoop2888 <= i_tmp503___1___;
		p_gluePipelinedLoop2887 <= (p_rgbp + i_tmp225___0___);
		i_gluePipelinedLoop2886 <= (((i_tmp43___0___) >> ((8))));
		i_gluePipelinedLoop2885 <= (((i_tmp43___1___) >> ((8))));
		i_gluePipelinedLoop2884 <= i_tmp43___2___;
		i_gluePipelinedLoop2883 <= i_tmp42___3___;
		i_gluePipelinedLoop2882 <= i_tmp35___4___;
		i_gluePipelinedLoop2881 <= ltmp_15_1;
		i_gluePipelinedLoop2880 <= (i_tmp5___4___);
		i_gluePipelinedLoop2879 <= i_tmp5___5___;
		i_gluePipelinedLoop2878 <= ltmp_17_1;
		p_gluePipelinedLoop2875 <= (p_up + i_incrementVal145);
		i_gluePipelinedLoop2871 <= ((i_tmp11___5___) << (8));
		i_gluePipelinedLoop2870 <= (i_tmp11___6___);
		i_gluePipelinedLoop2869 <= i_tmp11___7___;
		i_gluePipelinedLoop2868 <= i_tmp225___1___;
		p_gluePipelinedLoop2867 <= (p_rgbp + (i_incrementVal598 << (2)));
		i_gluePipelinedLoop2866 <= (((i_tmp15___0___) >> ((8))));
		i_gluePipelinedLoop2865 <= (((i_tmp15___1___) >> ((8))));
		i_gluePipelinedLoop2864 <= i_tmp15___2___;
		i_gluePipelinedLoop2863 <= i_tmp14___3___;
		p_gluePipelinedLoop2859 <= (p_yp + i_incrementVal144);
		p_gluePipelinedLoop2857 <= (p_yp + i_incrementVal260);
		i_gluePipelinedLoop2853 <= ltmp_16_1;
		i_gluePipelinedLoop2852 <= (i_tmp5___5___);
		i_gluePipelinedLoop2851 <= i_tmp5___6___;
		p_gluePipelinedLoop2850 <= (p_vp + i_incrementVal145);
		p_gluePipelinedLoop2848 <= (p_vp + i_incrementVal144);
		i_gluePipelinedLoop2846 <= (i_incrementVal143 << (2));
		i_gluePipelinedLoop2844 <= (i_incrementVal << (2));
		i_i_07_0 <= (0);
		eip <= PipelinedLoop0;
end
PipelinedLoop0:
begin
	mem_rgbp_in0 <= i_gluePipelinedLoop2866;
	mem_rgbp_mode0 <= 1;
	mem_rgbp_addr0 <= p_gluePipelinedLoop2867;
	mem_up_mode0 <= 0;
	mem_up_addr0 <= p_gluePipelinedLoop2875;
	mem_vp_mode0 <= 0;
	mem_vp_addr0 <= p_gluePipelinedLoop2850;
	mem_yp_mode0 <= 0;
	mem_yp_addr0 <= p_gluePipelinedLoop2859;
	eip <= PipelinedLoop1;
end
PipelinedLoop1:
begin
	mem_rgbp_mode0 <= 0;
	mem_rgbp_in0 <= i_gluePipelinedLoop2886;
	mem_rgbp_mode0 <= 1;
	mem_rgbp_addr0 <= p_gluePipelinedLoop2887;
	i_tmp32 <= mem_up_out0;
	i_tmp5 <= mem_vp_out0;
	mem_vp_mode0 <= 0;
	mem_vp_addr0 <= p_gluePipelinedLoop2848;
	i_tmp11 <= mem_yp_out0;
	mem_yp_mode0 <= 0;
	mem_yp_addr0 <= p_gluePipelinedLoop2857;
	eip <= PipelinedLoop2;
end
PipelinedLoop2:
begin
	mem_rgbp_mode0 <= 0;
	mem_rgbp_in0 <= i_gluePipelinedLoop2898;
	mem_rgbp_mode0 <= 1;
	mem_rgbp_addr0 <= p_gluePipelinedLoop2899;
	i_tmp39 <= mem_vp_out0;
	i_tmp26 <= mem_yp_out0;
	eip <= PipelinedLoop3;
end
PipelinedLoop3:
begin
	mem_rgbp_mode0 <= 0;
	mem_rgbp_in0 <= (0);
	mem_rgbp_mode0 <= 1;
	mem_rgbp_addr0 <= p_gluePipelinedLoop2901;
	eip <= PipelinedLoop4;
end
PipelinedLoop4:
begin
	mem_rgbp_mode0 <= 0;
	eip <= PipelinedLoop5;
end
PipelinedLoop5:
begin
	ltmp_19_1 <= out_mul0;
	eip <= PipelinedLoop6;
end
PipelinedLoop6:
begin
	ltmp_20_1 <= out_mul0;
	eip <= PipelinedLoop7;
end
PipelinedLoop7:
begin
	ltmp_21_1 <= out_mul0;
	eip <= PipelinedLoop8;
end
PipelinedLoop8:
begin
	ltmp_22_1 <= out_mul0;
	eip <= PipelinedLoop9;
end
PipelinedLoop9:
begin
	if (i_gluePipelinedLoop2904) begin
		eip <= return0;
	end else begin
		i_gluePipelinedLoop2904 <= i_exitcond23;
		i_gluePipelinedLoop2903 <= i_indvar_next22;
		p_gluePipelinedLoop2901 <= (p_rgbp + i_gluePipelinedLoop2900);
		i_gluePipelinedLoop2900 <= i_tmp721;
		p_gluePipelinedLoop2899 <= (p_rgbp + i_gluePipelinedLoop2888);
		i_gluePipelinedLoop2898 <= (i_gluePipelinedLoop2897);
		i_gluePipelinedLoop2897 <= (((i_gluePipelinedLoop2896) >> ((8))));
		i_gluePipelinedLoop2896 <= i_tmp65;
		i_gluePipelinedLoop2895 <= i_tmp64;
		i_gluePipelinedLoop2894 <= (i_gluePipelinedLoop2893 << (8));
		i_gluePipelinedLoop2893 <= (i_gluePipelinedLoop2892);
		i_gluePipelinedLoop2892 <= i_tmp11;
		i_gluePipelinedLoop2891 <= ltmp_22_1;
		i_gluePipelinedLoop2890 <= (i_gluePipelinedLoop2889);
		i_gluePipelinedLoop2889 <= i_tmp32;
		i_gluePipelinedLoop2888 <= i_tmp503;
		p_gluePipelinedLoop2887 <= (p_rgbp + i_gluePipelinedLoop2868);
		i_gluePipelinedLoop2886 <= (i_gluePipelinedLoop2885);
		i_gluePipelinedLoop2885 <= (((i_gluePipelinedLoop2884) >> ((8))));
		i_gluePipelinedLoop2884 <= i_tmp43;
		i_gluePipelinedLoop2883 <= i_tmp42;
		i_gluePipelinedLoop2882 <= i_tmp35;
		i_gluePipelinedLoop2881 <= ltmp_21_1;
		i_gluePipelinedLoop2880 <= (i_gluePipelinedLoop2879);
		i_gluePipelinedLoop2879 <= i_tmp39;
		i_gluePipelinedLoop2878 <= ltmp_20_1;
		p_gluePipelinedLoop2875 <= (p_up + i_incrementVal2849);
		i_gluePipelinedLoop2871 <= (i_gluePipelinedLoop2870 << (8));
		i_gluePipelinedLoop2870 <= (i_gluePipelinedLoop2869);
		i_gluePipelinedLoop2869 <= i_tmp26;
		i_gluePipelinedLoop2868 <= i_tmp225;
		p_gluePipelinedLoop2867 <= (p_rgbp + i_gluePipelinedLoop2846);
		i_gluePipelinedLoop2866 <= (i_gluePipelinedLoop2865);
		i_gluePipelinedLoop2865 <= (((i_gluePipelinedLoop2864) >> ((8))));
		i_gluePipelinedLoop2864 <= i_tmp15;
		i_gluePipelinedLoop2863 <= i_tmp14;
		p_gluePipelinedLoop2859 <= (p_yp + i_incrementVal2847);
		p_gluePipelinedLoop2857 <= (p_yp + i_incrementVal2856);
		i_gluePipelinedLoop2853 <= ltmp_19_1;
		i_gluePipelinedLoop2852 <= (i_gluePipelinedLoop2851);
		i_gluePipelinedLoop2851 <= i_tmp5;
		p_gluePipelinedLoop2850 <= (p_vp + i_incrementVal2849);
		p_gluePipelinedLoop2848 <= (p_vp + i_incrementVal2847);
		i_gluePipelinedLoop2846 <= (i_incrementVal2845 << (2));
		i_gluePipelinedLoop2844 <= (i_incrementVal2840 << (2));
		i_i_07_0 <= i_cloned27;
		eip <= PipelinedLoop0;
	end
end
return0:
begin
	 rdy <= 1;
 return_value <= 0;
 $finish();
end
 endcase //eip
end //always @(..)

endmodule



// -- Library components --  

module mul (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a * b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module div (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a / b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module shl (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a << b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule

// Dual port memory block
module xram (out0, din0, addr0, we0, clk0,
           out1, din1, addr1, we1, clk1);
  parameter ADDRESS_WIDTH = 16;
  parameter WORD_WIDTH = 32;
  output [WORD_WIDTH-1:0] out0;
  input [WORD_WIDTH-1:0] din0;
  input [ADDRESS_WIDTH-1:0] addr0;
  input we0;
  input clk0;
  output [WORD_WIDTH-1:0] out1;
  input [WORD_WIDTH-1:0] din1;
  input [ADDRESS_WIDTH-1:0] addr1;
  input we1;
  input clk1;
  reg [WORD_WIDTH-1:0] mem[1<<ADDRESS_WIDTH-1:0];
   integer i;
   initial begin
       for (i = 0; i < (1<<(ADDRESS_WIDTH-1)); i = i + 1) begin
       mem[i] <= i;
     end
   end
  assign out0 = mem[addr0];
  assign out1 = mem[addr1];
  always @(posedge clk0)begin
      if (we0) begin
          mem[addr0] = din0;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end
  end
  always @(posedge clk1)begin
      if (we1) begin
          mem[addr1] = din1;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end 
  end
endmodule

 // Test Bench 


module _Z11yuv2rgba_u8PhS_S_S_i_test;
 wire rdy;
 reg reset, clk;
wire [7:0] mem_rgbp_out0;
wire [7:0] mem_rgbp_in0;
wire [15:0] mem_rgbp_addr0;
wire mem_rgbp_mode0;
wire [7:0] mem_rgbp_out1;
wire [7:0] mem_rgbp_in1;
wire [15:0] mem_rgbp_addr1;
wire mem_rgbp_mode1;
xram ram_rgbp (mem_rgbp_out0, mem_rgbp_in0, mem_rgbp_addr0, mem_rgbp_mode0, clk,
  mem_rgbp_out1, mem_rgbp_in1, mem_rgbp_addr1, mem_rgbp_mode1, clk);


wire [7:0] mem_up_out0;
wire [7:0] mem_up_in0;
wire [15:0] mem_up_addr0;
wire mem_up_mode0;
wire [7:0] mem_up_out1;
wire [7:0] mem_up_in1;
wire [15:0] mem_up_addr1;
wire mem_up_mode1;
xram ram_up (mem_up_out0, mem_up_in0, mem_up_addr0, mem_up_mode0, clk,
  mem_up_out1, mem_up_in1, mem_up_addr1, mem_up_mode1, clk);


wire [7:0] mem_vp_out0;
wire [7:0] mem_vp_in0;
wire [15:0] mem_vp_addr0;
wire mem_vp_mode0;
wire [7:0] mem_vp_out1;
wire [7:0] mem_vp_in1;
wire [15:0] mem_vp_addr1;
wire mem_vp_mode1;
xram ram_vp (mem_vp_out0, mem_vp_in0, mem_vp_addr0, mem_vp_mode0, clk,
  mem_vp_out1, mem_vp_in1, mem_vp_addr1, mem_vp_mode1, clk);


wire [7:0] mem_yp_out0;
wire [7:0] mem_yp_in0;
wire [15:0] mem_yp_addr0;
wire mem_yp_mode0;
wire [7:0] mem_yp_out1;
wire [7:0] mem_yp_in1;
wire [15:0] mem_yp_addr1;
wire mem_yp_mode1;
xram ram_yp (mem_yp_out0, mem_yp_in0, mem_yp_addr0, mem_yp_mode0, clk,
  mem_yp_out1, mem_yp_in1, mem_yp_addr1, mem_yp_mode1, clk);


 always #5 clk = ~clk;
 reg [15:0] p_rgbp;
 reg [15:0] p_yp;
 reg [15:0] p_up;
 reg [15:0] p_vp;
 reg [31:0] i_n;
 wire return_value;
_Z11yuv2rgba_u8PhS_S_S_i instance1 (clk, reset, rdy,// control 
	mem_rgbp_out0, mem_rgbp_in0, mem_rgbp_addr0, mem_rgbp_mode0, // memport for: rgbp 
	mem_up_out0, mem_up_in0, mem_up_addr0, mem_up_mode0, // memport for: up 
	mem_vp_out0, mem_vp_in0, mem_vp_addr0, mem_vp_mode0, // memport for: vp 
	mem_yp_out0, mem_yp_in0, mem_yp_addr0, mem_yp_mode0, // memport for: yp 
	p_rgbp, p_yp, p_up, p_vp, i_n, return_value); // params 
initial begin
 clk = 0;
 $monitor("return = %b, 0x%x", rdy,  return_value);

 // Configure the values below to test the module
 p_rgbp <= 0;
 p_yp <= 0;
 p_up <= 0;
 p_vp <= 0;
 i_n <= 128;// detected index variable
 #5 reset = 1; #5 reset = 0;
end

endmodule //main_test 
