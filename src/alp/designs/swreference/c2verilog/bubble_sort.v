
/*       This module was generated by c-to-verilog.com
 * THIS SOFTWARE IS PROVIDED BY www.c-to-verilog.com ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL c-to-verilog.com BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES)
 * 
 * Found a bug? email info@c-to-verilog.com 
 */


module _Z11bubble_sortPjj  (clk, reset, rdy,// control 
	mem_ar_out0, mem_ar_in0, mem_ar_addr0, mem_ar_mode0, // memport for: ar 
	p_ar, i_n, return_value); // params 
 input wire clk;
 input wire reset;
 output rdy;
 reg rdy;
 output return_value;
 reg return_value;
 input [15:0] p_ar;
 input [31:0] i_n;
input wire [31:0] mem_ar_out0;
output reg [31:0] mem_ar_in0;
output reg [15:0] mem_ar_addr0;
output reg mem_ar_mode0;


 reg i_tmp444;   /*local var*/
 reg i_tmp357;   /*local var*/
 reg [31:0] i_tmp33;   /*local var*/
 reg [31:0] i_i_01_0_ph;   /*phi var*/
 reg [31:0] i_tmp6;   /*local var*/
 reg [31:0] i_tmp4;   /*local var*/
 reg [31:0] i_tmp9;   /*local var*/
 reg i_tmp10;   /*local var*/
 reg [31:0] i_j_05;   /*phi var*/
 reg i_tmp35;   /*local var*/
 reg [31:0] i_indvar_next;   /*local var*/
 reg [31:0] i_tmp40;   /*local var*/
 reg [31:0] i_indvar_next9;   /*local var*/
 reg i_tmp44;   /*local var*/

 // Number of states:20
 reg [4:0] eip;
 parameter entry0 = 5'd0;
 parameter entry1 = 5'd1;
 parameter bb31_preheader0 = 5'd2;
 parameter bb31_preheader1 = 5'd3;
 parameter bb31_outer_preheader0 = 5'd4;
 parameter bb31_outer0 = 5'd5;
 parameter bb10 = 5'd6;
 parameter bb11 = 5'd7;
 parameter bb12 = 5'd8;
 parameter bb13 = 5'd9;
 parameter bb14 = 5'd10;
 parameter cond_true0 = 5'd11;
 parameter cond_true1 = 5'd12;
 parameter cond_true2 = 5'd13;
 parameter cond_next0 = 5'd14;
 parameter cond_next1 = 5'd15;
 parameter bb380 = 5'd16;
 parameter bb381 = 5'd17;
 parameter bb382 = 5'd18;
 parameter return0 = 5'd19;

// Assign part (0)


always @(posedge clk)
 begin
  if (reset)
   begin
    $display("@hard reset");
    eip<=0;
    rdy<=0;
   end


// Datapath 
i_tmp444 <= (i_n == (0));
i_tmp357 <= (i_n == (1));
i_tmp33 <= i_n+(-1);
i_tmp6 <= i_j_05+(1);
i_tmp10 <= (i_tmp4 > i_tmp9);
i_tmp35 <= (i_tmp33 > i_tmp6);
i_indvar_next <= i_j_05+(1);
i_tmp40 <= i_i_01_0_ph+(1);
i_indvar_next9 <= i_i_01_0_ph+(1);
i_tmp44 <= (i_tmp40 < i_n);


// Control 
case (eip)
entry0:
begin
	eip <= entry1;
end
entry1:
begin
	if (i_tmp444) begin
		eip <= return0;
	end else begin
		eip <= bb31_preheader0;
	end
end
bb31_preheader0:
begin
	eip <= bb31_preheader1;
end
bb31_preheader1:
begin
	if (i_tmp357) begin
		eip <= return0;
	end else begin
		eip <= bb31_outer_preheader0;
	end
end
bb31_outer_preheader0:
begin
			i_i_01_0_ph <= (0);
		eip <= bb31_outer0;
end
bb31_outer0:
begin
			i_j_05 <= (0);
		eip <= bb10;
end
bb10:
begin
	mem_ar_mode0 <= 0;
	mem_ar_addr0 <= (p_ar + i_j_05);
	eip <= bb11;
end
bb11:
begin
	i_tmp4 <= mem_ar_out0;
	mem_ar_mode0 <= 0;
	mem_ar_addr0 <= (p_ar + i_tmp6);
	eip <= bb12;
end
bb12:
begin
	i_tmp9 <= mem_ar_out0;
	eip <= bb13;
end
bb13:
begin
	eip <= bb14;
end
bb14:
begin
	if (i_tmp10) begin
		eip <= cond_true0;
	end else begin
		eip <= cond_next0;
	end
end
cond_true0:
begin
	mem_ar_in0 <= i_tmp4;
	mem_ar_mode0 <= 1;
	mem_ar_addr0 <= (p_ar + i_tmp6);
	eip <= cond_true1;
end
cond_true1:
begin
	mem_ar_mode0 <= 0;
	mem_ar_in0 <= i_tmp9;
	mem_ar_mode0 <= 1;
	mem_ar_addr0 <= (p_ar + i_j_05);
	eip <= cond_true2;
end
cond_true2:
begin
	mem_ar_mode0 <= 0;
			eip <= cond_next0;
end
cond_next0:
begin
	eip <= cond_next1;
end
cond_next1:
begin
	if (i_tmp35) begin
		i_j_05 <= i_indvar_next;
		eip <= bb10;
	end else begin
		eip <= bb380;
	end
end
bb380:
begin
	eip <= bb381;
end
bb381:
begin
	eip <= bb382;
end
bb382:
begin
	if (i_tmp44) begin
		i_i_01_0_ph <= i_indvar_next9;
		eip <= bb31_outer0;
	end else begin
		eip <= return0;
	end
end
return0:
begin
	 rdy <= 1;
 return_value <= 0;
 $finish();
end
 endcase //eip
end //always @(..)

endmodule



// -- Library components --  

module mul (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a * b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module div (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a / b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module shl (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a << b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule

// Dual port memory block
module xram (out0, din0, addr0, we0, clk0,
           out1, din1, addr1, we1, clk1);
  parameter ADDRESS_WIDTH = 16;
  parameter WORD_WIDTH = 32;
  output [WORD_WIDTH-1:0] out0;
  input [WORD_WIDTH-1:0] din0;
  input [ADDRESS_WIDTH-1:0] addr0;
  input we0;
  input clk0;
  output [WORD_WIDTH-1:0] out1;
  input [WORD_WIDTH-1:0] din1;
  input [ADDRESS_WIDTH-1:0] addr1;
  input we1;
  input clk1;
  reg [WORD_WIDTH-1:0] mem[1<<ADDRESS_WIDTH-1:0];
   integer i;
   initial begin
       for (i = 0; i < (1<<(ADDRESS_WIDTH-1)); i = i + 1) begin
       mem[i] <= i;
     end
   end
  assign out0 = mem[addr0];
  assign out1 = mem[addr1];
  always @(posedge clk0)begin
      if (we0) begin
          mem[addr0] = din0;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end
  end
  always @(posedge clk1)begin
      if (we1) begin
          mem[addr1] = din1;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end 
  end
endmodule

 // Test Bench 


module _Z11bubble_sortPjj_test;
 wire rdy;
 reg reset, clk;
wire [31:0] mem_ar_out0;
wire [31:0] mem_ar_in0;
wire [15:0] mem_ar_addr0;
wire mem_ar_mode0;
wire [31:0] mem_ar_out1;
wire [31:0] mem_ar_in1;
wire [15:0] mem_ar_addr1;
wire mem_ar_mode1;
xram ram_ar (mem_ar_out0, mem_ar_in0, mem_ar_addr0, mem_ar_mode0, clk,
  mem_ar_out1, mem_ar_in1, mem_ar_addr1, mem_ar_mode1, clk);


 always #5 clk = ~clk;
 reg [15:0] p_ar;
 reg [31:0] i_n;
 wire return_value;
_Z11bubble_sortPjj instance1 (clk, reset, rdy,// control 
	mem_ar_out0, mem_ar_in0, mem_ar_addr0, mem_ar_mode0, // memport for: ar 
	p_ar, i_n, return_value); // params 
initial begin
 clk = 0;
 $monitor("return = %b, 0x%x", rdy,  return_value);

 // Configure the values below to test the module
 p_ar <= 0;
 i_n <= 128;// detected index variable
 #5 reset = 1; #5 reset = 0;
end

endmodule //main_test 
