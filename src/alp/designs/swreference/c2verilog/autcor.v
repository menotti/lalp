
/*       This module was generated by c-to-verilog.com
 * THIS SOFTWARE IS PROVIDED BY www.c-to-verilog.com ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL c-to-verilog.com BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES)
 * 
 * Found a bug? email info@c-to-verilog.com 
 */


module _Z5autocPsS_ss  (clk, reset, rdy,// control 
	mem_ac_out0, mem_ac_in0, mem_ac_addr0, mem_ac_mode0, // memport for: ac 
	mem_sd_out0, mem_sd_in0, mem_sd_addr0, mem_sd_mode0, // memport for: sd 
	p_sd, p_ac, i_Nx, i_Nt, return_value); // params 
 input wire clk;
 input wire reset;
 output rdy;
 reg rdy;
 output return_value;
 reg return_value;
 input [15:0] p_sd;
 input [15:0] p_ac;
 input [15:0] i_Nx;
 input [15:0] i_Nt;
input wire [15:0] mem_ac_out0;
output reg [15:0] mem_ac_in0;
output reg [15:0] mem_ac_addr0;
output reg mem_ac_mode0;
input wire [15:0] mem_sd_out0;
output reg [15:0] mem_sd_in0;
output reg [15:0] mem_sd_addr0;
output reg mem_sd_mode0;


 reg i_tmp417;   /*local var*/
 reg i_tmp2610;   /*local var*/
 reg [15:0] i_incrementVal24;   /*local var*/
 reg [15:0] i_incrementVal;   /*local var*/
 reg [15:0] i_tmp37___0___;   /*local var*/
 reg [15:0] i_tmp37___1___;   /*local var*/
 reg i_tmp41___0___;   /*local var*/
 reg [15:0] i_incrementVal58;   /*local var*/
 reg [15:0] i_incrementVal277;   /*local var*/
 reg [15:0] i_incrementVal276;   /*local var*/
 reg [15:0] i_incrementVal77;   /*local var*/
 reg [15:0] i_cloned56____1___;   /*local var*/
 reg [15:0] i_cloned56___0___;   /*local var*/
 reg [15:0] i_cloned56___1___;   /*local var*/
 reg [15:0] i_cloned56___2___;   /*local var*/
 reg [31:0] i_tmp12_us____1___;   /*local var*/
 reg [15:0] i_tmp21_us___0___;   /*local var*/
 reg [15:0] i_tmp21_us___1___;   /*local var*/
 reg [15:0] i_tmp6_us____1___;   /*local var*/
 reg i_tmp26_us___0___;   /*local var*/
 reg [15:0] i_tmp15_us____1___;   /*local var*/
 reg [31:0] ltmp_0_1;   /*local var*/
 reg [31:0] i_tmp19_us____1___;   /*local var*/
 reg [15:0] i_i_02_0_ph_us;   /*phi var*/
 reg [15:0] i_cloned56;   /*local var*/
 reg [15:0] i_incrementVal315;   /*local var*/
 reg [31:0] i_tmp12_us;   /*local var*/
 reg [31:0] i_tmp19_us;   /*local var*/
 reg [15:0] i_tmp21_us;   /*local var*/
 reg i_tmp26_us;   /*local var*/
 reg [15:0] i_indvar_next21;   /*local var*/
 reg [15:0] i_tmp6_us;   /*local var*/
 reg [15:0] i_k_09_us;   /*local var*/
 reg [15:0] i_tmp15_us;   /*local var*/
 reg [31:0] ltmp_1_1;   /*local var*/
 reg i_gluePipelinedLoop57329;   /*phi var*/
 reg [15:0] i_gluePipelinedLoop57328;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop57327;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop57326;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop57325;   /*phi var*/
 reg [15:0] i_gluePipelinedLoop57324;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop57323;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop57322;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop57321;   /*phi var*/
 reg [15:0] i_gluePipelinedLoop57320;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop57319;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop57318;   /*phi var*/
 reg [15:0] i_gluePipelinedLoop57316;   /*phi var*/
 reg [15:0] i_gluePipelinedLoop57314;   /*phi var*/
 reg [15:0] i_indvar;   /*phi var*/
 reg [31:0] i_sum_08_us;   /*phi var*/
 reg [15:0] i_tmp37_us;   /*local var*/
 reg [15:0] i_indvar_next;   /*local var*/
 reg i_tmp41_us;   /*local var*/
 reg [31:0] i_tmp19_us_lcssa;   /*phi var*/
 reg [15:0] i_incrementVal50;   /*local var*/
 reg i_tmp41;   /*local var*/
 reg [15:0] i_indvar_next19;   /*local var*/
 reg [15:0] i_tmp37;   /*local var*/
 reg i_gluePipelinedLoop54;   /*phi var*/
 reg [15:0] i_gluePipelinedLoop53;   /*phi var*/
 reg [15:0] p_gluePipelinedLoop51;   /*phi var*/
 reg [31:0] i_gluePipelinedLoop;   /*phi var*/
 reg [15:0] i_i_02_0_ph;   /*phi var*/

 // Number of states:36
 reg [5:0] eip;
 parameter entry0 = 6'd0;
 parameter entry1 = 6'd1;
 parameter bb22_preheader0 = 6'd2;
 parameter bb22_preheader1 = 6'd3;
 parameter bb28_preheader0 = 6'd4;
 parameter bb28_preheader1 = 6'd5;
 parameter bb28_preheader2 = 6'd6;
 parameter bb28_preheader3 = 6'd7;
 parameter bb22_outer_us_preheader0 = 6'd8;
 parameter bb22_outer_us0 = 6'd9;
 parameter bb22_outer_us1 = 6'd10;
 parameter bb22_outer_us2 = 6'd11;
 parameter bb22_outer_us3 = 6'd12;
 parameter bb22_outer_us4 = 6'd13;
 parameter bb22_outer_us5 = 6'd14;
 parameter bb22_outer_us6 = 6'd15;
 parameter bb22_outer_us7 = 6'd16;
 parameter bb22_outer_us8 = 6'd17;
 parameter bb22_outer_us9 = 6'd18;
 parameter bb22_outer_us10 = 6'd19;
 parameter bb22_outer_us11 = 6'd20;
 parameter bb22_outer_us12 = 6'd21;
 parameter PipelinedLoop570 = 6'd22;
 parameter PipelinedLoop571 = 6'd23;
 parameter PipelinedLoop572 = 6'd24;
 parameter PipelinedLoop573 = 6'd25;
 parameter PipelinedLoop574 = 6'd26;
 parameter PipelinedLoop575 = 6'd27;
 parameter PipelinedLoop576 = 6'd28;
 parameter bb22_bb28_crit_edge_us0 = 6'd29;
 parameter bb22_bb28_crit_edge_us1 = 6'd30;
 parameter bb22_bb28_crit_edge_us2 = 6'd31;
 parameter PipelinedLoop0 = 6'd32;
 parameter PipelinedLoop1 = 6'd33;
 parameter PipelinedLoop2 = 6'd34;
 parameter return0 = 6'd35;

// Assign part (2)
wire [31:0] mul0_in_a;
wire [31:0] mul0_in_b;
 assign mul0_in_a = 
 (eip == PipelinedLoop570) ? i_gluePipelinedLoop57325 :
 (eip == bb22_outer_us5) ? (i_tmp15_us____1___) :0;
 assign mul0_in_b = 
 (eip == PipelinedLoop570) ? i_gluePipelinedLoop57321 :
 (eip == bb22_outer_us5) ? (i_tmp6_us____1___) :0;

wire [31:0] out_mul0;
mul  mul0_instance (.clk(clk), .a(mul0_in_a), .b(mul0_in_b), .p(out_mul0));



always @(posedge clk)
 begin
  if (reset)
   begin
    $display("@hard reset");
    eip<=0;
    rdy<=0;
   end


// Datapath 
i_tmp417 <= (i_Nt > (0));
i_tmp2610 <= (i_Nt < i_Nx);
i_incrementVal24 <= (0)+(0);
i_incrementVal <= (1)+(0);
i_tmp37___0___ <= i_incrementVal24+(1);
i_tmp37___1___ <= i_incrementVal+(1);
i_tmp41___0___ <= (i_tmp37___0___ < i_Nt);
i_incrementVal58 <= (-1)+(0);
i_incrementVal277 <= (0)+(0);
i_incrementVal276 <= (1)+(0);
i_incrementVal77 <= (2)+(0);
i_cloned56____1___ <= i_incrementVal58+i_Nt;
i_cloned56___0___ <= i_incrementVal277+i_Nt;
i_cloned56___1___ <= i_incrementVal276+i_Nt;
i_cloned56___2___ <= i_incrementVal77+i_Nt;
i_tmp12_us____1___ <= (i_cloned56____1___)-(i_i_02_0_ph_us);
i_tmp21_us___0___ <= i_cloned56___0___+(1);
i_tmp21_us___1___ <= i_cloned56___1___+(1);
i_tmp26_us___0___ <= (i_tmp21_us___0___ < i_Nx);
i_tmp19_us____1___ <= ltmp_0_1+(0);
i_cloned56 <= i_indvar+i_Nt;
i_incrementVal315 <= (3)+i_indvar;
i_tmp12_us <= i_gluePipelinedLoop57318-(i_i_02_0_ph_us);
i_tmp19_us <= i_gluePipelinedLoop57326+i_sum_08_us;
i_tmp21_us <= i_gluePipelinedLoop57316+(1);
i_tmp26_us <= (i_gluePipelinedLoop57328 < i_Nx);
i_indvar_next21 <= i_indvar+(1);
i_k_09_us <= i_incrementVal315+i_Nt;
i_tmp37_us <= i_i_02_0_ph_us+(1);
i_indvar_next <= i_i_02_0_ph_us+(1);
i_tmp41_us <= (i_tmp37_us < i_Nt);
i_incrementVal50 <= (2)+i_i_02_0_ph;
i_tmp41 <= (i_gluePipelinedLoop53 < i_Nt);
i_indvar_next19 <= i_i_02_0_ph+(1);
i_tmp37 <= i_incrementVal50+(1);


// Control 
case (eip)
entry0:
begin
	eip <= entry1;
end
entry1:
begin
	if (i_tmp417) begin
		eip <= bb22_preheader0;
	end else begin
		eip <= return0;
	end
end
bb22_preheader0:
begin
	eip <= bb22_preheader1;
end
bb22_preheader1:
begin
	if (i_tmp2610) begin
		eip <= bb22_outer_us_preheader0;
	end else begin
		eip <= bb28_preheader0;
	end
end
bb28_preheader0:
begin
	eip <= bb28_preheader1;
end
bb28_preheader1:
begin
	eip <= bb28_preheader2;
end
bb28_preheader2:
begin
	eip <= bb28_preheader3;
end
bb28_preheader3:
begin
			i_gluePipelinedLoop54 <= i_tmp41___0___;
		i_gluePipelinedLoop53 <= i_tmp37___1___;
		p_gluePipelinedLoop51 <= (p_ac + (i_incrementVal24));
		i_gluePipelinedLoop <= (i_incrementVal);
		i_i_02_0_ph <= (0);
		eip <= PipelinedLoop0;
end
bb22_outer_us_preheader0:
begin
			i_i_02_0_ph_us <= (0);
		eip <= bb22_outer_us0;
end
bb22_outer_us0:
begin
	eip <= bb22_outer_us1;
end
bb22_outer_us1:
begin
	eip <= bb22_outer_us2;
end
bb22_outer_us2:
begin
	mem_sd_mode0 <= 0;
	mem_sd_addr0 <= (p_sd + (i_cloned56____1___));
	eip <= bb22_outer_us3;
end
bb22_outer_us3:
begin
	i_tmp6_us____1___ <= mem_sd_out0;
	mem_sd_mode0 <= 0;
	mem_sd_addr0 <= (p_sd + i_tmp12_us____1___);
	eip <= bb22_outer_us4;
end
bb22_outer_us4:
begin
	i_tmp15_us____1___ <= mem_sd_out0;
	eip <= bb22_outer_us5;
end
bb22_outer_us5:
begin
	eip <= bb22_outer_us6;
end
bb22_outer_us6:
begin
	eip <= bb22_outer_us7;
end
bb22_outer_us7:
begin
	eip <= bb22_outer_us8;
end
bb22_outer_us8:
begin
	eip <= bb22_outer_us9;
end
bb22_outer_us9:
begin
	eip <= bb22_outer_us10;
end
bb22_outer_us10:
begin
	ltmp_0_1 <= out_mul0;
	eip <= bb22_outer_us11;
end
bb22_outer_us11:
begin
	eip <= bb22_outer_us12;
end
bb22_outer_us12:
begin
			i_gluePipelinedLoop57329 <= i_tmp26_us___0___;
		i_gluePipelinedLoop57328 <= i_tmp21_us___1___;
		i_gluePipelinedLoop57327 <= i_tmp19_us____1___;
		i_gluePipelinedLoop57326 <= ltmp_0_1;
		i_gluePipelinedLoop57325 <= (i_tmp15_us____1___);
		i_gluePipelinedLoop57324 <= i_tmp15_us____1___;
		p_gluePipelinedLoop57323 <= (p_sd + i_tmp12_us____1___);
		i_gluePipelinedLoop57322 <= i_tmp12_us____1___;
		i_gluePipelinedLoop57321 <= (i_tmp6_us____1___);
		i_gluePipelinedLoop57320 <= i_tmp6_us____1___;
		p_gluePipelinedLoop57319 <= (p_sd + (i_cloned56____1___));
		i_gluePipelinedLoop57318 <= (i_cloned56____1___);
		i_gluePipelinedLoop57316 <= i_cloned56___2___;
		i_gluePipelinedLoop57314 <= i_cloned56____1___;
		i_indvar <= (0);
		i_sum_08_us <= (0);
		eip <= PipelinedLoop570;
end
PipelinedLoop570:
begin
	mem_sd_mode0 <= 0;
	mem_sd_addr0 <= p_gluePipelinedLoop57319;
	eip <= PipelinedLoop571;
end
PipelinedLoop571:
begin
	i_tmp6_us <= mem_sd_out0;
	mem_sd_mode0 <= 0;
	mem_sd_addr0 <= p_gluePipelinedLoop57323;
	eip <= PipelinedLoop572;
end
PipelinedLoop572:
begin
	i_tmp15_us <= mem_sd_out0;
	eip <= PipelinedLoop573;
end
PipelinedLoop573:
begin
	eip <= PipelinedLoop574;
end
PipelinedLoop574:
begin
	eip <= PipelinedLoop575;
end
PipelinedLoop575:
begin
	ltmp_1_1 <= out_mul0;
	eip <= PipelinedLoop576;
end
PipelinedLoop576:
begin
	if (i_gluePipelinedLoop57329) begin
		i_gluePipelinedLoop57329 <= i_tmp26_us;
		i_gluePipelinedLoop57328 <= i_tmp21_us;
		i_gluePipelinedLoop57327 <= i_tmp19_us;
		i_gluePipelinedLoop57326 <= ltmp_1_1;
		i_gluePipelinedLoop57325 <= (i_gluePipelinedLoop57324);
		i_gluePipelinedLoop57324 <= i_tmp15_us;
		p_gluePipelinedLoop57323 <= (p_sd + i_gluePipelinedLoop57322);
		i_gluePipelinedLoop57322 <= i_tmp12_us;
		i_gluePipelinedLoop57321 <= (i_gluePipelinedLoop57320);
		i_gluePipelinedLoop57320 <= i_tmp6_us;
		p_gluePipelinedLoop57319 <= (p_sd + i_gluePipelinedLoop57318);
		i_gluePipelinedLoop57318 <= (i_gluePipelinedLoop57314);
		i_gluePipelinedLoop57316 <= i_k_09_us;
		i_gluePipelinedLoop57314 <= i_cloned56;
		i_indvar <= i_indvar_next21;
		i_sum_08_us <= i_gluePipelinedLoop57327;
		eip <= PipelinedLoop570;
	end else begin
		i_tmp19_us_lcssa <= i_gluePipelinedLoop57327;
		eip <= bb22_bb28_crit_edge_us0;
	end
end
bb22_bb28_crit_edge_us0:
begin
	mem_ac_in0 <= (((i_tmp19_us_lcssa) >> ((15))));
	mem_ac_mode0 <= 1;
	mem_ac_addr0 <= (p_ac + (i_i_02_0_ph_us));
	eip <= bb22_bb28_crit_edge_us1;
end
bb22_bb28_crit_edge_us1:
begin
	mem_ac_mode0 <= 0;
	eip <= bb22_bb28_crit_edge_us2;
end
bb22_bb28_crit_edge_us2:
begin
	if (i_tmp41_us) begin
		i_i_02_0_ph_us <= i_indvar_next;
		eip <= bb22_outer_us0;
	end else begin
		eip <= return0;
	end
end
PipelinedLoop0:
begin
	mem_ac_in0 <= (0);
	mem_ac_mode0 <= 1;
	mem_ac_addr0 <= p_gluePipelinedLoop51;
	eip <= PipelinedLoop1;
end
PipelinedLoop1:
begin
	mem_ac_mode0 <= 0;
	eip <= PipelinedLoop2;
end
PipelinedLoop2:
begin
	if (i_gluePipelinedLoop54) begin
		i_gluePipelinedLoop54 <= i_tmp41;
		i_gluePipelinedLoop53 <= i_tmp37;
		p_gluePipelinedLoop51 <= (p_ac + i_gluePipelinedLoop);
		i_gluePipelinedLoop <= (i_incrementVal50);
		i_i_02_0_ph <= i_indvar_next19;
		eip <= PipelinedLoop0;
	end else begin
		eip <= return0;
	end
end
return0:
begin
	 rdy <= 1;
 return_value <= 0;
 $finish();
end
 endcase //eip
end //always @(..)

endmodule



// -- Library components --  

module mul (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a * b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module div (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a / b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module shl (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a << b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule

// Dual port memory block
module xram (out0, din0, addr0, we0, clk0,
           out1, din1, addr1, we1, clk1);
  parameter ADDRESS_WIDTH = 16;
  parameter WORD_WIDTH = 32;
  output [WORD_WIDTH-1:0] out0;
  input [WORD_WIDTH-1:0] din0;
  input [ADDRESS_WIDTH-1:0] addr0;
  input we0;
  input clk0;
  output [WORD_WIDTH-1:0] out1;
  input [WORD_WIDTH-1:0] din1;
  input [ADDRESS_WIDTH-1:0] addr1;
  input we1;
  input clk1;
  reg [WORD_WIDTH-1:0] mem[1<<ADDRESS_WIDTH-1:0];
   integer i;
   initial begin
       for (i = 0; i < (1<<(ADDRESS_WIDTH-1)); i = i + 1) begin
       mem[i] <= i;
     end
   end
  assign out0 = mem[addr0];
  assign out1 = mem[addr1];
  always @(posedge clk0)begin
      if (we0) begin
          mem[addr0] = din0;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end
  end
  always @(posedge clk1)begin
      if (we1) begin
          mem[addr1] = din1;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end 
  end
endmodule

 // Test Bench 


module _Z5autocPsS_ss_test;
 wire rdy;
 reg reset, clk;
wire [15:0] mem_ac_out0;
wire [15:0] mem_ac_in0;
wire [15:0] mem_ac_addr0;
wire mem_ac_mode0;
wire [15:0] mem_ac_out1;
wire [15:0] mem_ac_in1;
wire [15:0] mem_ac_addr1;
wire mem_ac_mode1;
xram ram_ac (mem_ac_out0, mem_ac_in0, mem_ac_addr0, mem_ac_mode0, clk,
  mem_ac_out1, mem_ac_in1, mem_ac_addr1, mem_ac_mode1, clk);


wire [15:0] mem_sd_out0;
wire [15:0] mem_sd_in0;
wire [15:0] mem_sd_addr0;
wire mem_sd_mode0;
wire [15:0] mem_sd_out1;
wire [15:0] mem_sd_in1;
wire [15:0] mem_sd_addr1;
wire mem_sd_mode1;
xram ram_sd (mem_sd_out0, mem_sd_in0, mem_sd_addr0, mem_sd_mode0, clk,
  mem_sd_out1, mem_sd_in1, mem_sd_addr1, mem_sd_mode1, clk);


 always #5 clk = ~clk;
 reg [15:0] p_sd;
 reg [15:0] p_ac;
 reg [15:0] i_Nx;
 reg [15:0] i_Nt;
 wire return_value;
_Z5autocPsS_ss instance1 (clk, reset, rdy,// control 
	mem_ac_out0, mem_ac_in0, mem_ac_addr0, mem_ac_mode0, // memport for: ac 
	mem_sd_out0, mem_sd_in0, mem_sd_addr0, mem_sd_mode0, // memport for: sd 
	p_sd, p_ac, i_Nx, i_Nt, return_value); // params 
initial begin
 clk = 0;
 $monitor("return = %b, 0x%x", rdy,  return_value);

 // Configure the values below to test the module
 p_sd <= 0;
 p_ac <= 0;
 i_Nx <= 0;
 i_Nt <= 0;
 #5 reset = 1; #5 reset = 0;
end

endmodule //main_test 
