
/*       This module was generated by c-to-verilog.com
 * THIS SOFTWARE IS PROVIDED BY www.c-to-verilog.com ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL c-to-verilog.com BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES)
 * 
 * Found a bug? email info@c-to-verilog.com 
 */


module _Z13adpcm_decoderPiS_S_S_  (clk, reset, rdy,// control 
	mem_indata_out0, mem_indata_in0, mem_indata_addr0, mem_indata_mode0, // memport for: indata 
	mem_indexTable_out0, mem_indexTable_in0, mem_indexTable_addr0, mem_indexTable_mode0, // memport for: indexTable 
	mem_outdata_out0, mem_outdata_in0, mem_outdata_addr0, mem_outdata_mode0, // memport for: outdata 
	mem_stepSizeTable_out0, mem_stepSizeTable_in0, mem_stepSizeTable_addr0, mem_stepSizeTable_mode0, // memport for: stepSizeTable 
	p_indata, p_outdata, p_indexTable, p_stepSizeTable, return_value); // params 
 input wire clk;
 input wire reset;
 output rdy;
 reg rdy;
 output return_value;
 reg return_value;
 input [15:0] p_indata;
 input [15:0] p_outdata;
 input [15:0] p_indexTable;
 input [15:0] p_stepSizeTable;
input wire [31:0] mem_indata_out0;
output reg [31:0] mem_indata_in0;
output reg [15:0] mem_indata_addr0;
output reg mem_indata_mode0;
input wire [31:0] mem_indexTable_out0;
output reg [31:0] mem_indexTable_in0;
output reg [15:0] mem_indexTable_addr0;
output reg mem_indexTable_mode0;
input wire [31:0] mem_outdata_out0;
output reg [31:0] mem_outdata_in0;
output reg [15:0] mem_outdata_addr0;
output reg mem_outdata_mode0;
input wire [31:0] mem_stepSizeTable_out0;
output reg [31:0] mem_stepSizeTable_in0;
output reg [15:0] mem_stepSizeTable_addr0;
output reg mem_stepSizeTable_mode0;


 reg [31:0] i_tmp3;   /*local var*/
 reg i_tmp5;   /*local var*/
 reg [31:0] i_len_013_0;   /*phi var*/
 reg [31:0] i_step_07_0;   /*phi var*/
 reg [31:0] i_valpred_111_0;   /*phi var*/
 reg [31:0] i_i_116_0;   /*phi var*/
 reg [31:0] i_index_019_0;   /*phi var*/
 reg [31:0] i_bufferstep_020_0;   /*phi var*/
 reg [31:0] i_inputbuffer_122_0;   /*phi var*/
 reg [31:0] i_tmp14;   /*local var*/
 reg [31:0] i_tmp12;   /*local var*/
 reg [3:0] i_reduced_and;   /*local var*/
 reg [2:0] i_reduced_and35;   /*local var*/
 reg [3:0] i_reduced_and31;   /*local var*/
 reg i_toBool49;   /*local var*/
 reg [31:0] i_tmp24;   /*local var*/
 reg [31:0] i_tmp26;   /*local var*/
 reg i_tmp28;   /*local var*/
 reg [31:0] i_index_1;   /*local var*/
 reg i_tmp34;   /*local var*/
 reg [31:0] i_index_2;   /*local var*/
 reg [31:0] i_delta_0_in;   /*phi var*/
 reg [31:0] i_i_0;   /*phi var*/
 reg [31:0] i_inputbuffer_0;   /*phi var*/
 reg [31:0] i_tmp53;   /*local var*/
 reg i_toBool60;   /*local var*/
 reg [31:0] i_tmp65;   /*local var*/
 reg i_toBool70;   /*local var*/
 reg [31:0] i_tmp75;   /*local var*/
 reg i_tmp80;   /*local var*/
 reg [31:0] i_tmp;   /*local var*/
 reg [31:0] i_valpred_0_p;   /*local var*/
 reg [31:0] i_valpred_0;   /*local var*/
 reg i_tmp93;   /*local var*/
 reg [31:0] i_vpdiff_0;   /*phi var*/
 reg i_tmp99;   /*local var*/
 reg [31:0] i_indvar_next26;   /*local var*/
 reg [31:0] i_tmp108;   /*local var*/
 reg i_exitcond27;   /*local var*/
 reg [31:0] i_valpred_2;   /*phi var*/

 // Number of states:38
 reg [5:0] eip;
 parameter entry0 = 6'd0;
 parameter entry1 = 6'd1;
 parameter entry2 = 6'd2;
 parameter bb0 = 6'd3;
 parameter bb1 = 6'd4;
 parameter cond_false0 = 6'd5;
 parameter cond_false1 = 6'd6;
 parameter cond_false2 = 6'd7;
 parameter cond_next0 = 6'd8;
 parameter cond_next1 = 6'd9;
 parameter cond_next2 = 6'd10;
 parameter cond_next3 = 6'd11;
 parameter cond_next4 = 6'd12;
 parameter cond_next5 = 6'd13;
 parameter cond_next6 = 6'd14;
 parameter cond_next7 = 6'd15;
 parameter cond_true500 = 6'd16;
 parameter cond_true501 = 6'd17;
 parameter cond_false540 = 6'd18;
 parameter cond_false541 = 6'd19;
 parameter cond_true610 = 6'd20;
 parameter cond_true611 = 6'd21;
 parameter cond_false660 = 6'd22;
 parameter cond_false661 = 6'd23;
 parameter cond_true710 = 6'd24;
 parameter cond_true711 = 6'd25;
 parameter cond_next780 = 6'd26;
 parameter cond_next781 = 6'd27;
 parameter cond_next782 = 6'd28;
 parameter cond_next783 = 6'd29;
 parameter cond_next784 = 6'd30;
 parameter cond_false970 = 6'd31;
 parameter cond_false971 = 6'd32;
 parameter cond_true1020 = 6'd33;
 parameter cond_next1040 = 6'd34;
 parameter cond_next1041 = 6'd35;
 parameter cond_next1042 = 6'd36;
 parameter return0 = 6'd37;

// Assign part (0)


always @(posedge clk)
 begin
  if (reset)
   begin
    $display("@hard reset");
    eip<=0;
    rdy<=0;
   end


// Datapath 
i_tmp5 <= (i_bufferstep_020_0 == (0));
i_tmp14 <= i_i_116_0+(1);
i_reduced_and <= ((15))&(i_delta_0_in);
i_reduced_and35 <= ((4))&(i_delta_0_in);
i_reduced_and31 <= ((8))&(i_delta_0_in);
i_toBool49 <= ((i_reduced_and35) == (0));
i_tmp26 <= i_tmp24+i_index_019_0;
i_tmp28 <= (i_tmp26 < (0));
i_index_1 <= (i_tmp28 ? (0) : i_tmp26);
i_tmp34 <= (i_index_1 > (88));
i_index_2 <= (i_tmp34 ? (88) : i_index_1);
i_tmp53 <= (i_step_07_0 >> (3))+i_step_07_0;
i_toBool60 <= (((((2)) & (i_delta_0_in))) == (0));
i_tmp65 <= (i_step_07_0 >> (1))+(i_step_07_0 >> (3));
i_toBool70 <= (((((1)) & (i_delta_0_in))) == (0));
i_tmp75 <= (i_step_07_0 >> (2))+(i_step_07_0 >> (3));
i_tmp80 <= ((i_reduced_and31) == (0));
i_tmp <= (0)-i_vpdiff_0;
i_valpred_0_p <= (i_tmp80 ? i_vpdiff_0 : i_tmp);
i_valpred_0 <= i_valpred_0_p+i_valpred_111_0;
i_tmp93 <= (i_valpred_0 > (32767));
i_tmp99 <= (i_valpred_0 < (-32768));
i_indvar_next26 <= i_len_013_0+(1);
i_exitcond27 <= (i_indvar_next26 == (1024));


// Control 
case (eip)
entry0:
begin
	mem_stepSizeTable_mode0 <= 0;
	mem_stepSizeTable_addr0 <= (p_stepSizeTable + ltmp_0_1);
	eip <= entry1;
end
entry1:
begin
	i_tmp3 <= mem_stepSizeTable_out0;
	eip <= entry2;
end
entry2:
begin
			i_len_013_0 <= (0);
		i_step_07_0 <= i_tmp3;
		i_i_116_0 <= (0);
		i_bufferstep_020_0 <= (0);
		eip <= bb0;
end
bb0:
begin
	eip <= bb1;
end
bb1:
begin
	if (i_tmp5) begin
		eip <= cond_false0;
	end else begin
		i_delta_0_in <= i_inputbuffer_122_0;
		i_i_0 <= i_i_116_0;
		i_inputbuffer_0 <= i_inputbuffer_122_0;
		eip <= cond_next0;
	end
end
cond_false0:
begin
	mem_indata_mode0 <= 0;
	mem_indata_addr0 <= (p_indata + i_i_116_0);
	eip <= cond_false1;
end
cond_false1:
begin
	i_tmp12 <= mem_indata_out0;
	eip <= cond_false2;
end
cond_false2:
begin
			i_delta_0_in <= (i_tmp12 >> (4));
		i_i_0 <= i_tmp14;
		i_inputbuffer_0 <= i_tmp12;
		eip <= cond_next0;
end
cond_next0:
begin
	eip <= cond_next1;
end
cond_next1:
begin
	mem_indexTable_mode0 <= 0;
	mem_indexTable_addr0 <= (p_indexTable + (i_reduced_and));
	eip <= cond_next2;
end
cond_next2:
begin
	i_tmp24 <= mem_indexTable_out0;
	eip <= cond_next3;
end
cond_next3:
begin
	eip <= cond_next4;
end
cond_next4:
begin
	eip <= cond_next5;
end
cond_next5:
begin
	eip <= cond_next6;
end
cond_next6:
begin
	eip <= cond_next7;
end
cond_next7:
begin
	if (i_toBool49) begin
		eip <= cond_false540;
	end else begin
		eip <= cond_true500;
	end
end
cond_true500:
begin
	eip <= cond_true501;
end
cond_true501:
begin
			i_vpdiff_0 <= i_tmp53;
		eip <= cond_next780;
end
cond_false540:
begin
	eip <= cond_false541;
end
cond_false541:
begin
	if (i_toBool60) begin
		eip <= cond_false660;
	end else begin
		eip <= cond_true610;
	end
end
cond_true610:
begin
	eip <= cond_true611;
end
cond_true611:
begin
			i_vpdiff_0 <= i_tmp65;
		eip <= cond_next780;
end
cond_false660:
begin
	eip <= cond_false661;
end
cond_false661:
begin
	if (i_toBool70) begin
		i_vpdiff_0 <= (i_step_07_0 >> (3));
		eip <= cond_next780;
	end else begin
		eip <= cond_true710;
	end
end
cond_true710:
begin
	eip <= cond_true711;
end
cond_true711:
begin
			i_vpdiff_0 <= i_tmp75;
		eip <= cond_next780;
end
cond_next780:
begin
	eip <= cond_next781;
end
cond_next781:
begin
	eip <= cond_next782;
end
cond_next782:
begin
	eip <= cond_next783;
end
cond_next783:
begin
	eip <= cond_next784;
end
cond_next784:
begin
	if (i_tmp93) begin
		i_valpred_2 <= (32767);
		eip <= cond_next1040;
	end else begin
		eip <= cond_false970;
	end
end
cond_false970:
begin
	eip <= cond_false971;
end
cond_false971:
begin
	if (i_tmp99) begin
		eip <= cond_true1020;
	end else begin
		i_valpred_2 <= i_valpred_0;
		eip <= cond_next1040;
	end
end
cond_true1020:
begin
			i_valpred_2 <= (-32768);
		eip <= cond_next1040;
end
cond_next1040:
begin
	mem_outdata_in0 <= i_valpred_2;
	mem_outdata_mode0 <= 1;
	mem_outdata_addr0 <= (p_outdata + i_len_013_0);
	mem_stepSizeTable_mode0 <= 0;
	mem_stepSizeTable_addr0 <= (p_stepSizeTable + i_index_2);
	eip <= cond_next1041;
end
cond_next1041:
begin
	mem_outdata_mode0 <= 0;
	i_tmp108 <= mem_stepSizeTable_out0;
	eip <= cond_next1042;
end
cond_next1042:
begin
	if (i_exitcond27) begin
		eip <= return0;
	end else begin
		i_len_013_0 <= i_indvar_next26;
		i_step_07_0 <= i_tmp108;
		i_valpred_111_0 <= i_valpred_2;
		i_i_116_0 <= i_i_0;
		i_index_019_0 <= i_index_2;
		i_bufferstep_020_0 <= (i_tmp5);
		i_inputbuffer_122_0 <= i_inputbuffer_0;
		eip <= bb0;
	end
end
return0:
begin
	 rdy <= 1;
 return_value <= 0;
 $finish();
end
 endcase //eip
end //always @(..)

endmodule



// -- Library components --  

module mul (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a * b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module div (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a / b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule


module shl (clk, a, b, p);
output reg [31:0] p;
input [31:0] a;
input [31:0] b;
input clk;reg [31:0] t0;
reg [31:0] t1;
reg [31:0] t2;
reg [31:0] t3;
always @(posedge clk)begin
t0 <= a << b;
t1 <= t0;
t2 <= t1;
t3 <= t2;
p <=t3;
end
endmodule

// Dual port memory block
module xram (out0, din0, addr0, we0, clk0,
           out1, din1, addr1, we1, clk1);
  parameter ADDRESS_WIDTH = 16;
  parameter WORD_WIDTH = 32;
  output [WORD_WIDTH-1:0] out0;
  input [WORD_WIDTH-1:0] din0;
  input [ADDRESS_WIDTH-1:0] addr0;
  input we0;
  input clk0;
  output [WORD_WIDTH-1:0] out1;
  input [WORD_WIDTH-1:0] din1;
  input [ADDRESS_WIDTH-1:0] addr1;
  input we1;
  input clk1;
  reg [WORD_WIDTH-1:0] mem[1<<ADDRESS_WIDTH-1:0];
   integer i;
   initial begin
       for (i = 0; i < (1<<(ADDRESS_WIDTH-1)); i = i + 1) begin
       mem[i] <= i;
     end
   end
  assign out0 = mem[addr0];
  assign out1 = mem[addr1];
  always @(posedge clk0)begin
      if (we0) begin
          mem[addr0] = din0;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end
  end
  always @(posedge clk1)begin
      if (we1) begin
          mem[addr1] = din1;
          $display($time,"w mem[%d] == %d; in=%d",addr0, mem[addr0],din0);
      end 
  end
endmodule

 // Test Bench 


module _Z13adpcm_decoderPiS_S_S__test;
 wire rdy;
 reg reset, clk;
wire [31:0] mem_indata_out0;
wire [31:0] mem_indata_in0;
wire [15:0] mem_indata_addr0;
wire mem_indata_mode0;
wire [31:0] mem_indata_out1;
wire [31:0] mem_indata_in1;
wire [15:0] mem_indata_addr1;
wire mem_indata_mode1;
xram ram_indata (mem_indata_out0, mem_indata_in0, mem_indata_addr0, mem_indata_mode0, clk,
  mem_indata_out1, mem_indata_in1, mem_indata_addr1, mem_indata_mode1, clk);


wire [31:0] mem_indexTable_out0;
wire [31:0] mem_indexTable_in0;
wire [15:0] mem_indexTable_addr0;
wire mem_indexTable_mode0;
wire [31:0] mem_indexTable_out1;
wire [31:0] mem_indexTable_in1;
wire [15:0] mem_indexTable_addr1;
wire mem_indexTable_mode1;
xram ram_indexTable (mem_indexTable_out0, mem_indexTable_in0, mem_indexTable_addr0, mem_indexTable_mode0, clk,
  mem_indexTable_out1, mem_indexTable_in1, mem_indexTable_addr1, mem_indexTable_mode1, clk);


wire [31:0] mem_outdata_out0;
wire [31:0] mem_outdata_in0;
wire [15:0] mem_outdata_addr0;
wire mem_outdata_mode0;
wire [31:0] mem_outdata_out1;
wire [31:0] mem_outdata_in1;
wire [15:0] mem_outdata_addr1;
wire mem_outdata_mode1;
xram ram_outdata (mem_outdata_out0, mem_outdata_in0, mem_outdata_addr0, mem_outdata_mode0, clk,
  mem_outdata_out1, mem_outdata_in1, mem_outdata_addr1, mem_outdata_mode1, clk);


wire [31:0] mem_stepSizeTable_out0;
wire [31:0] mem_stepSizeTable_in0;
wire [15:0] mem_stepSizeTable_addr0;
wire mem_stepSizeTable_mode0;
wire [31:0] mem_stepSizeTable_out1;
wire [31:0] mem_stepSizeTable_in1;
wire [15:0] mem_stepSizeTable_addr1;
wire mem_stepSizeTable_mode1;
xram ram_stepSizeTable (mem_stepSizeTable_out0, mem_stepSizeTable_in0, mem_stepSizeTable_addr0, mem_stepSizeTable_mode0, clk,
  mem_stepSizeTable_out1, mem_stepSizeTable_in1, mem_stepSizeTable_addr1, mem_stepSizeTable_mode1, clk);


 always #5 clk = ~clk;
 reg [15:0] p_indata;
 reg [15:0] p_outdata;
 reg [15:0] p_indexTable;
 reg [15:0] p_stepSizeTable;
 wire return_value;
_Z13adpcm_decoderPiS_S_S_ instance1 (clk, reset, rdy,// control 
	mem_indata_out0, mem_indata_in0, mem_indata_addr0, mem_indata_mode0, // memport for: indata 
	mem_indexTable_out0, mem_indexTable_in0, mem_indexTable_addr0, mem_indexTable_mode0, // memport for: indexTable 
	mem_outdata_out0, mem_outdata_in0, mem_outdata_addr0, mem_outdata_mode0, // memport for: outdata 
	mem_stepSizeTable_out0, mem_stepSizeTable_in0, mem_stepSizeTable_addr0, mem_stepSizeTable_mode0, // memport for: stepSizeTable 
	p_indata, p_outdata, p_indexTable, p_stepSizeTable, return_value); // params 
initial begin
 clk = 0;
 $monitor("return = %b, 0x%x", rdy,  return_value);

 // Configure the values below to test the module
 p_indata <= 0;
 p_outdata <= 0;
 p_indexTable <= 0;
 p_stepSizeTable <= 0;
 #5 reset = 1; #5 reset = 0;
end

endmodule //main_test 
