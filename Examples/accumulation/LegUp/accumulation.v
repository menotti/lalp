//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Mon Jan 21 17:30:53 2013
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu May 23 10:45:18 2013
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 2
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @main.a = internal unnamed_addr constant [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1], align 4

`define TAG_g_main_a `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_main_a_a {`TAG_g_main_a, 23'b0}
//   %a = alloca [100 x i32], align 4
`define TAG_main_0_a `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_main_0_a_a {`TAG_main_0_a, 23'b0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_out_a( memory_controller_out_a ),
	.memory_controller_out_b( memory_controller_out_b )
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] main_a_address_a;
reg [6:0] main_a_address_b;
reg main_a_write_enable_a;
reg main_a_write_enable_b;
reg [31:0] main_a_in_a;
reg [31:0] main_a_in_b;
wire [31:0] main_a_out_a;
wire [31:0] main_a_out_b;

// @main.a = internal unnamed_addr constant [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1], align 4

ram_dual_port main_a (
	.clk( clk ),
	.address_a( main_a_address_a ),
	.address_b( main_a_address_b ),
	.wren_a( main_a_write_enable_a ),
	.wren_b( main_a_write_enable_b ),
	.data_a( main_a_in_a ),
	.data_b( main_a_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_a_out_a ),
	.q_b( main_a_out_b)
);
defparam main_a.width_a = 32;
defparam main_a.width_b = 32;
defparam main_a.widthad_a = 7;
defparam main_a.widthad_b = 7;
defparam main_a.width_be_a = 1;
defparam main_a.width_be_b = 1;
defparam main_a.numwords_a = 100;
defparam main_a.numwords_b = 100;
defparam main_a.init_file = "main_a.mif";


reg [6:0] main_0_a_address_a;
reg [6:0] main_0_a_address_b;
reg main_0_a_write_enable_a;
reg main_0_a_write_enable_b;
reg [31:0] main_0_a_in_a;
reg [31:0] main_0_a_in_b;
wire [31:0] main_0_a_out_a;
wire [31:0] main_0_a_out_b;

//   %a = alloca [100 x i32], align 4
ram_dual_port main_0_a (
	.clk( clk ),
	.address_a( main_0_a_address_a ),
	.address_b( main_0_a_address_b ),
	.wren_a( main_0_a_write_enable_a ),
	.wren_b( main_0_a_write_enable_b ),
	.data_a( main_0_a_in_a ),
	.data_b( main_0_a_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_a_out_a ),
	.q_b( main_0_a_out_b)
);
defparam main_0_a.width_a = 32;
defparam main_0_a.width_b = 32;
defparam main_0_a.widthad_a = 7;
defparam main_0_a.widthad_b = 7;
defparam main_0_a.width_be_a = 1;
defparam main_0_a.width_be_b = 1;
defparam main_0_a.numwords_a = 100;
defparam main_0_a.numwords_b = 100;

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_main_a_a;
assign select_main_a_a = (tag_a ==`TAG_g_main_a);
reg select_main_a_reg_a;
wire [31:0] memory_controller_main_a_out_a;
assign memory_controller_main_a_out_a = {32{ select_main_a_reg_a}} & main_a_out_a;

wire select_main_0_a_a;
assign select_main_0_a_a = (tag_a ==`TAG_main_0_a);
reg select_main_0_a_reg_a;
wire [31:0] memory_controller_main_0_a_out_a;
assign memory_controller_main_0_a_out_a = {32{ select_main_0_a_reg_a}} & main_0_a_out_a;

always @(*)
begin
	main_a_address_a = memory_controller_address_a [7-1+2:2] & {7{select_main_a_a}};
	main_a_write_enable_a = memory_controller_write_enable_a & select_main_a_a;
	main_a_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_0_a_address_a = memory_controller_address_a [7-1+2:2] & {7{select_main_0_a_a}};
	main_0_a_write_enable_a = memory_controller_write_enable_a & select_main_0_a_a;
	main_0_a_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_main_a_reg_a}} | {2{select_main_0_a_reg_a}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_main_a_out_a | memory_controller_main_0_a_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select_main_a_reg_a <= select_main_a_a;
select_main_0_a_reg_a <= select_main_0_a_a;
end

reg [2:0] select_not_struct_b;

wire select_main_a_b;
assign select_main_a_b = (tag_b ==`TAG_g_main_a);
reg select_main_a_reg_b;
wire [31:0] memory_controller_main_a_out_b;
assign memory_controller_main_a_out_b = {32{ select_main_a_reg_b}} & main_a_out_b;

wire select_main_0_a_b;
assign select_main_0_a_b = (tag_b ==`TAG_main_0_a);
reg select_main_0_a_reg_b;
wire [31:0] memory_controller_main_0_a_out_b;
assign memory_controller_main_0_a_out_b = {32{ select_main_0_a_reg_b}} & main_0_a_out_b;

always @(*)
begin
	main_a_address_b = memory_controller_address_b [7-1+2:2] & {7{select_main_a_b}};
	main_a_write_enable_b = memory_controller_write_enable_b & select_main_a_b;
	main_a_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_a_address_b = memory_controller_address_b [7-1+2:2] & {7{select_main_0_a_b}};
	main_0_a_write_enable_b = memory_controller_write_enable_b & select_main_0_a_b;
	main_0_a_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_main_a_reg_b}} | {2{select_main_0_a_reg_b}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_main_a_out_b | memory_controller_main_0_a_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select_main_a_reg_b <= select_main_a_b;
select_main_0_a_reg_b <= select_main_0_a_b;
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_main_BB_0_1 = 4'd1;
parameter [3:0] LEGUP_F_main_BB_1_2 = 4'd2;
parameter [3:0] LEGUP_F_main_BB_legup_memcpy_4_exit_preheader_3 = 4'd3;
parameter [3:0] LEGUP_F_main_BB_4_4 = 4'd4;
parameter [3:0] LEGUP_F_main_BB_4_5 = 4'd5;
parameter [3:0] LEGUP_F_main_BB_4_6 = 4'd6;
parameter [3:0] LEGUP_F_main_BB_legup_memcpy_4_exit_7 = 4'd7;
parameter [3:0] LEGUP_F_main_BB_legup_memcpy_4_exit_8 = 4'd8;
parameter [3:0] LEGUP_F_main_BB_legup_memcpy_4_exit_9 = 4'd9;
parameter [3:0] LEGUP_F_main_BB_13_10 = 4'd10;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [3:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_tmp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_st_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_st_i_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_dt_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_dt_i_0_reg;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg  main_1_3;
reg [31:0] main_4_5;
reg [31:0] main_4_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_6_reg;
reg [31:0] main_4_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_8_reg;
reg [31:0] main_legup_memcpy_4_exit_9;
reg [31:0] main_legup_memcpy_4_exit_9_reg;
reg [31:0] main_legup_memcpy_4_exit_sum_01;
reg [31:0] main_legup_memcpy_4_exit_sum_01_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memcpy_4_exit_scevgep;
reg [31:0] main_legup_memcpy_4_exit_10;
reg [31:0] main_legup_memcpy_4_exit_tmp4;
reg [31:0] main_legup_memcpy_4_exit_tmp5;
reg [31:0] main_legup_memcpy_4_exit_tmp5_reg;
reg [31:0] main_legup_memcpy_4_exit_12;
reg [31:0] main_legup_memcpy_4_exit_12_reg;
reg  main_legup_memcpy_4_exit_exitcond;
reg  main_legup_memcpy_4_exit_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_st_i_0_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_dt_i_0_phi_temp;
reg [31:0] main_1_2_phi_temp;
reg [31:0] main_legup_memcpy_4_exit_9_phi_temp;
reg [31:0] main_legup_memcpy_4_exit_sum_01_phi_temp;


/* Unsynthesizable Statements */
always @(posedge clk) begin
/* main: %legup_memcpy_4.exit*/
/*   %11 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str, i32 0, i32 0), i32 %9, i32 %tmp5) nounwind*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_9))
begin
$write("sum %d = %d\n", main_legup_memcpy_4_exit_9_reg, main_legup_memcpy_4_exit_tmp5);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_9_reg) === 1'bX) finish <= 0;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_tmp5) === 1'bX) finish <= 0;
end
/* main: %13*/
/*   %14 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str1, i32 0, i32 0), i32 %tmp5) nounwind*/
if ((cur_state == LEGUP_F_main_BB_13_10))
begin
$write("sum = %d\n", main_legup_memcpy_4_exit_tmp5_reg);
// to fix quartus warning
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_tmp5_reg) === 1'bX) finish <= 0;
end
end
always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (main_1_3 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memcpy_4_exit_preheader_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memcpy_4_exit_preheader_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (main_1_3 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_preheader_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memcpy_4_exit_preheader_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memcpy_4_exit_preheader_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_preheader_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memcpy_4_exit_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memcpy_4_exit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_4_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_4_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_4_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_4_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_4_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memcpy_4_exit_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memcpy_4_exit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memcpy_4_exit_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memcpy_4_exit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memcpy_4_exit_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memcpy_4_exit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memcpy_4_exit_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memcpy_4_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memcpy_4_exit_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memcpy_4_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_9) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memcpy_4_exit_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_13_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_13_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_9) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memcpy_4_exit_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memcpy_4_exit_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memcpy_4_exit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_13_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_13_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_13_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_13_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 4'd0;
if (^reset !== 1'bX && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %tmp = getelementptr inbounds [100 x i32]* %a, i32 0, i32 0*/
if (reset) begin main_0_tmp = 0; end
begin
main_0_tmp = `TAG_main_0_a_a;
end
end
always @(*) begin
/* main: %1*/
/*   %st.i.0 = phi i32* [ getelementptr inbounds ([100 x i32]* @main.a, i32 0, i32 0), %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_st_i_0 = main_1_st_i_0_phi_temp;
end
/* main: %1*/
/*   %st.i.0 = phi i32* [ getelementptr inbounds ([100 x i32]* @main.a, i32 0, i32 0), %0 ], [ %6, %4 ]*/
else if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_st_i_0 = main_1_st_i_0_phi_temp;
end
/* main: %1*/
/*   %st.i.0 = phi i32* [ getelementptr inbounds ([100 x i32]* @main.a, i32 0, i32 0), %0 ], [ %6, %4 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_st_i_0 = main_1_st_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %st.i.0 = phi i32* [ getelementptr inbounds ([100 x i32]* @main.a, i32 0, i32 0), %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_st_i_0_reg <= main_1_st_i_0;
if (^reset !== 1'bX && ^(main_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_st_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %st.i.0 = phi i32* [ getelementptr inbounds ([100 x i32]* @main.a, i32 0, i32 0), %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_st_i_0_reg <= main_1_st_i_0;
if (^reset !== 1'bX && ^(main_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_st_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %st.i.0 = phi i32* [ getelementptr inbounds ([100 x i32]* @main.a, i32 0, i32 0), %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_st_i_0_reg <= main_1_st_i_0;
if (^reset !== 1'bX && ^(main_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_st_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %st.i.0 = phi i32* [ getelementptr inbounds ([100 x i32]* @main.a, i32 0, i32 0), %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_st_i_0_reg <= main_1_st_i_0;
if (^reset !== 1'bX && ^(main_1_st_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_st_i_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_dt_i_0 = main_1_dt_i_0_phi_temp;
end
/* main: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
else if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_dt_i_0 = main_1_dt_i_0_phi_temp;
end
/* main: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_dt_i_0 = main_1_dt_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_dt_i_0_reg <= main_1_dt_i_0;
if (^reset !== 1'bX && ^(main_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_dt_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_dt_i_0_reg <= main_1_dt_i_0;
if (^reset !== 1'bX && ^(main_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_dt_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_dt_i_0_reg <= main_1_dt_i_0;
if (^reset !== 1'bX && ^(main_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_dt_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_dt_i_0_reg <= main_1_dt_i_0;
if (^reset !== 1'bX && ^(main_1_dt_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_dt_i_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %2 = phi i32 [ 100, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2 = main_1_2_phi_temp;
end
/* main: %1*/
/*   %2 = phi i32 [ 100, %0 ], [ %5, %4 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_2 = main_1_2_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %2 = phi i32 [ 100, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2_reg <= main_1_2;
if (^reset !== 1'bX && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
end
/* main: %1*/
/*   %2 = phi i32 [ 100, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2_reg <= main_1_2;
if (^reset !== 1'bX && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
end
/* main: %1*/
/*   %2 = phi i32 [ 100, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2_reg <= main_1_2;
if (^reset !== 1'bX && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %3 = icmp eq i32 %2, 0*/
begin
main_1_3 = (main_1_2 == 32'd0);
end
end
always @(*) begin
/* main: %4*/
/*   %5 = add i32 %2, -1*/
begin
main_4_5 = (main_1_2_reg + -32'd1);
end
end
always @(posedge clk) begin
/* main: %4*/
/*   %5 = add i32 %2, -1*/
if ((cur_state == LEGUP_F_main_BB_4_4))
begin
main_4_5_reg <= main_4_5;
if (^reset !== 1'bX && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %4*/
/*   %6 = getelementptr inbounds i32* %st.i.0, i32 1*/
begin
main_4_6 = (main_1_st_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %4*/
/*   %6 = getelementptr inbounds i32* %st.i.0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_4_4))
begin
main_4_6_reg <= main_4_6;
if (^reset !== 1'bX && ^(main_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_6_reg"); $finish; end
end
end
always @(*) begin
/* main: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
begin
main_4_7 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* main: %4*/
/*   %8 = getelementptr inbounds i32* %dt.i.0, i32 1*/
begin
main_4_8 = (main_1_dt_i_0_reg + (4 * 32'd1));
end
end
always @(posedge clk) begin
/* main: %4*/
/*   %8 = getelementptr inbounds i32* %dt.i.0, i32 1*/
if ((cur_state == LEGUP_F_main_BB_4_4))
begin
main_4_8_reg <= main_4_8;
if (^reset !== 1'bX && ^(main_4_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memcpy_4.exit*/
/*   %9 = phi i32 [ %12, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_9 = main_legup_memcpy_4_exit_9_phi_temp;
end
/* main: %legup_memcpy_4.exit*/
/*   %9 = phi i32 [ %12, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
else if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_9 = main_legup_memcpy_4_exit_9_phi_temp;
end
/* main: %legup_memcpy_4.exit*/
/*   %9 = phi i32 [ %12, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
else /* if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7)) */
begin
main_legup_memcpy_4_exit_9 = main_legup_memcpy_4_exit_9_phi_temp;
end
end
always @(posedge clk) begin
/* main: %legup_memcpy_4.exit*/
/*   %9 = phi i32 [ %12, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_9_reg <= main_legup_memcpy_4_exit_9;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_9_reg"); $finish; end
end
/* main: %legup_memcpy_4.exit*/
/*   %9 = phi i32 [ %12, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_9_reg <= main_legup_memcpy_4_exit_9;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_9_reg"); $finish; end
end
/* main: %legup_memcpy_4.exit*/
/*   %9 = phi i32 [ %12, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_9_reg <= main_legup_memcpy_4_exit_9;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_9_reg"); $finish; end
end
/* main: %legup_memcpy_4.exit*/
/*   %9 = phi i32 [ %12, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_9_reg <= main_legup_memcpy_4_exit_9;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memcpy_4.exit*/
/*   %sum.01 = phi i32 [ %tmp5, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_sum_01 = main_legup_memcpy_4_exit_sum_01_phi_temp;
end
/* main: %legup_memcpy_4.exit*/
/*   %sum.01 = phi i32 [ %tmp5, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
else /* if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7)) */
begin
main_legup_memcpy_4_exit_sum_01 = main_legup_memcpy_4_exit_sum_01_phi_temp;
end
end
always @(posedge clk) begin
/* main: %legup_memcpy_4.exit*/
/*   %sum.01 = phi i32 [ %tmp5, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_sum_01_reg <= main_legup_memcpy_4_exit_sum_01;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_sum_01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_sum_01_reg"); $finish; end
end
/* main: %legup_memcpy_4.exit*/
/*   %sum.01 = phi i32 [ %tmp5, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_sum_01_reg <= main_legup_memcpy_4_exit_sum_01;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_sum_01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_sum_01_reg"); $finish; end
end
/* main: %legup_memcpy_4.exit*/
/*   %sum.01 = phi i32 [ %tmp5, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_sum_01_reg <= main_legup_memcpy_4_exit_sum_01;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_sum_01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_sum_01_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memcpy_4.exit*/
/*   %scevgep = getelementptr [100 x i32]* %a, i32 0, i32 %9*/
begin
main_legup_memcpy_4_exit_scevgep = (`TAG_main_0_a_a + (4 * main_legup_memcpy_4_exit_9));
end
end
always @(*) begin
/* main: %legup_memcpy_4.exit*/
/*   %10 = volatile load i32* %scevgep, align 4, !tbaa !0*/
begin
main_legup_memcpy_4_exit_10 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* main: %legup_memcpy_4.exit*/
/*   %tmp4 = add i32 %sum.01, %10*/
begin
main_legup_memcpy_4_exit_tmp4 = (main_legup_memcpy_4_exit_sum_01_reg + main_legup_memcpy_4_exit_10);
end
end
always @(*) begin
/* main: %legup_memcpy_4.exit*/
/*   %tmp5 = add i32 %tmp4, %9*/
begin
main_legup_memcpy_4_exit_tmp5 = (main_legup_memcpy_4_exit_tmp4 + main_legup_memcpy_4_exit_9_reg);
end
end
always @(posedge clk) begin
/* main: %legup_memcpy_4.exit*/
/*   %tmp5 = add i32 %tmp4, %9*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_9))
begin
main_legup_memcpy_4_exit_tmp5_reg <= main_legup_memcpy_4_exit_tmp5;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_tmp5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_tmp5_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memcpy_4.exit*/
/*   %12 = add nsw i32 %9, 1*/
begin
main_legup_memcpy_4_exit_12 = (main_legup_memcpy_4_exit_9 + 32'd1);
end
end
always @(posedge clk) begin
/* main: %legup_memcpy_4.exit*/
/*   %12 = add nsw i32 %9, 1*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_12_reg <= main_legup_memcpy_4_exit_12;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_12_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memcpy_4.exit*/
/*   %exitcond = icmp eq i32 %12, 100*/
begin
main_legup_memcpy_4_exit_exitcond = (main_legup_memcpy_4_exit_12 == 32'd100);
end
end
always @(posedge clk) begin
/* main: %legup_memcpy_4.exit*/
/*   %exitcond = icmp eq i32 %12, 100*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
main_legup_memcpy_4_exit_exitcond_reg <= main_legup_memcpy_4_exit_exitcond;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_exitcond_reg"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %st.i.0 = phi i32* [ getelementptr inbounds ([100 x i32]* @main.a, i32 0, i32 0), %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_st_i_0_phi_temp <= `TAG_g_main_a_a;
if (^reset !== 1'bX && ^(`TAG_g_main_a_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_st_i_0_phi_temp"); $finish; end
end
/* main: %1*/
/*   %st.i.0 = phi i32* [ getelementptr inbounds ([100 x i32]* @main.a, i32 0, i32 0), %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_4_6) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_st_i_0_phi_temp <= main_4_6_reg;
if (^reset !== 1'bX && ^(main_4_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_st_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_dt_i_0_phi_temp <= main_0_tmp;
if (^reset !== 1'bX && ^(main_0_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_dt_i_0_phi_temp"); $finish; end
end
/* main: %1*/
/*   %dt.i.0 = phi i32* [ %tmp, %0 ], [ %8, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_4_6) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_dt_i_0_phi_temp <= main_4_8_reg;
if (^reset !== 1'bX && ^(main_4_8_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_dt_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %2 = phi i32 [ 100, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_2_phi_temp <= 32'd100;
if (^reset !== 1'bX && ^(32'd100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_phi_temp"); $finish; end
end
/* main: %1*/
/*   %2 = phi i32 [ 100, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_4_6) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_2_phi_temp <= main_4_5_reg;
if (^reset !== 1'bX && ^(main_4_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %legup_memcpy_4.exit*/
/*   %9 = phi i32 [ %12, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_preheader_3) & (memory_controller_waitrequest == 1'd0)))
begin
main_legup_memcpy_4_exit_9_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_9_phi_temp"); $finish; end
end
/* main: %legup_memcpy_4.exit*/
/*   %9 = phi i32 [ %12, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if ((((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_9) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memcpy_4_exit_exitcond_reg == 1'd0)))
begin
main_legup_memcpy_4_exit_9_phi_temp <= main_legup_memcpy_4_exit_12_reg;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_12_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_9_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %legup_memcpy_4.exit*/
/*   %sum.01 = phi i32 [ %tmp5, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_preheader_3) & (memory_controller_waitrequest == 1'd0)))
begin
main_legup_memcpy_4_exit_sum_01_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_sum_01_phi_temp"); $finish; end
end
/* main: %legup_memcpy_4.exit*/
/*   %sum.01 = phi i32 [ %tmp5, %legup_memcpy_4.exit ], [ 0, %legup_memcpy_4.exit.preheader ]*/
if ((((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_9) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memcpy_4_exit_exitcond_reg == 1'd0)))
begin
main_legup_memcpy_4_exit_sum_01_phi_temp <= main_legup_memcpy_4_exit_tmp5;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_tmp5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memcpy_4_exit_sum_01_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %13*/
/*   ret i32 %tmp5*/
if ((cur_state == LEGUP_F_main_BB_13_10))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (^reset !== 1'bX && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %13*/
/*   ret i32 %tmp5*/
if ((cur_state == LEGUP_F_main_BB_13_10))
begin
return_val <= main_legup_memcpy_4_exit_tmp5_reg;
if (^reset !== 1'bX && ^(main_legup_memcpy_4_exit_tmp5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* main: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_4))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_6))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %legup_memcpy_4.exit*/
/*   %10 = volatile load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* main: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_4))
begin
memory_controller_address_a = main_1_st_i_0_reg;
end
/* main: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_6))
begin
memory_controller_address_a = main_1_dt_i_0_reg;
end
/* main: %legup_memcpy_4.exit*/
/*   %10 = volatile load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
memory_controller_address_a = main_legup_memcpy_4_exit_scevgep;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_6))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %legup_memcpy_4.exit*/
/*   %10 = volatile load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* main: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_6))
begin
memory_controller_in_a = {main_4_7};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* main: %4*/
/*   %7 = load i32* %st.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_4))
begin
memory_controller_size_a = 2'd2;
end
/* main: %4*/
/*   store i32 %7, i32* %dt.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_6))
begin
memory_controller_size_a = 2'd2;
end
/* main: %legup_memcpy_4.exit*/
/*   %10 = volatile load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_legup_memcpy_4_exit_7))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	q_a,
	q_b,
	byteena_a,
	byteena_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (1'd1),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.wren_a (wren_a),
	.wren_b (wren_b),
	.rden_a (1'd1),
	.rden_b (1'd1),
	.data_a (data_a),
	.data_b (data_b),
	.q_a (q_a),
	.q_b (q_b),
	.byteena_a (byteena_a),
	.byteena_b (byteena_b)
);

defparam
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone II",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0",
	altsyncram_component.width_byteena_a = width_be_a,
	altsyncram_component.width_byteena_b = width_be_b;


always @(*) begin
clk_wire = clk;
end

endmodule 
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [1:0] KEY;
    input [15:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire  clk;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
    hex_digits h7( .x(return_val_reg[31:28]), .hex_LEDs(HEX7));
    hex_digits h6( .x(return_val_reg[27:24]), .hex_LEDs(HEX6));
    hex_digits h5( .x(return_val_reg[23:20]), .hex_LEDs(HEX5));
    hex_digits h4( .x(return_val_reg[19:16]), .hex_LEDs(HEX4));
    hex_digits h3( .x(return_val_reg[15:12]), .hex_LEDs(HEX3));
    hex_digits h2( .x(return_val_reg[11:8]), .hex_LEDs(HEX2));
    hex_digits h1( .x(return_val_reg[7:4]), .hex_LEDs(HEX1));
    hex_digits h0( .x(return_val_reg[3:0]), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
