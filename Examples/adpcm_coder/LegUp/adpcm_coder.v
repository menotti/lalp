//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jan 22 02:17:46 2013
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Mar 29 19:43:22 2015
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 32
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @main.indata = internal unnamed_addr constant [1024 x i32] [i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77], align 4

`define TAG_g_main_indata `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_main_indata_a {`TAG_g_main_indata, 23'b0}
// @main.indexTable = internal unnamed_addr constant [16 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 2, i32 4, i32 6, i32 8, i32 -1, i32 -1, i32 -1, i32 -1, i32 2, i32 4, i32 6, i32 8], align 4

`define TAG_g_main_indexTable `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_main_indexTable_a {`TAG_g_main_indexTable, 23'b0}
// @main.stepsizeTable = internal unnamed_addr constant [89 x i32] [i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 16, i32 17, i32 19, i32 21, i32 23, i32 25, i32 28, i32 31, i32 34, i32 37, i32 41, i32 45, i32 50, i32 55, i32 60, i32 66, i32 73, i32 80, i32 88, i32 97, i32 107, i32 118, i32 130, i32 143, i32 157, i32 173, i32 190, i32 209, i32 230, i32 253, i32 279, i32 307, i32 337, i32 371, i32 408, i32 449, i32 494, i32 544, i32 598, i32 658, i32 724, i32 796, i32 876, i32 963, i32 1060, i32 1166, i32 1282, i32 1411, i32 1552, i32 1707, i32 1878, i32 2066, i32 2272, i32 2499, i32 2749, i32 3024, i32 3327, i32 3660, i32 4026, i32 4428, i32 4871, i32 5358, i32 5894, i32 6484, i32 7132, i32 7845, i32 8630, i32 9493, i32 10442, i32 11487, i32 12635, i32 13899, i32 15289, i32 16818, i32 18500, i32 20350, i32 22385, i32 24623, i32 27086, i32 29794, i32 32767], align 4

`define TAG_g_main_stepsizeTable `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_main_stepsizeTable_a {`TAG_g_main_stepsizeTable, 23'b0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_out_a( memory_controller_out_a ),
	.memory_controller_out_b( memory_controller_out_b )
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [9:0] main_indata_address_a;
reg [9:0] main_indata_address_b;
reg main_indata_write_enable_a;
reg main_indata_write_enable_b;
reg [31:0] main_indata_in_a;
reg [31:0] main_indata_in_b;
wire [31:0] main_indata_out_a;
wire [31:0] main_indata_out_b;

// @main.indata = internal unnamed_addr constant [1024 x i32] [i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77, i32 87, i32 97, i32 107, i32 117, i32 0, i32 10, i32 20, i32 30, i32 40, i32 50, i32 60, i32 70, i32 80, i32 90, i32 100, i32 110, i32 120, i32 3, i32 13, i32 23, i32 33, i32 43, i32 53, i32 63, i32 73, i32 83, i32 93, i32 103, i32 113, i32 123, i32 6, i32 16, i32 26, i32 36, i32 46, i32 56, i32 66, i32 76, i32 86, i32 96, i32 106, i32 116, i32 126, i32 9, i32 19, i32 29, i32 39, i32 49, i32 59, i32 69, i32 79, i32 89, i32 99, i32 109, i32 119, i32 2, i32 12, i32 22, i32 32, i32 42, i32 52, i32 62, i32 72, i32 82, i32 92, i32 102, i32 112, i32 122, i32 5, i32 15, i32 25, i32 35, i32 45, i32 55, i32 65, i32 75, i32 85, i32 95, i32 105, i32 115, i32 125, i32 8, i32 18, i32 28, i32 38, i32 48, i32 58, i32 68, i32 78, i32 88, i32 98, i32 108, i32 118, i32 1, i32 11, i32 21, i32 31, i32 41, i32 51, i32 61, i32 71, i32 81, i32 91, i32 101, i32 111, i32 121, i32 4, i32 14, i32 24, i32 34, i32 44, i32 54, i32 64, i32 74, i32 84, i32 94, i32 104, i32 114, i32 124, i32 7, i32 17, i32 27, i32 37, i32 47, i32 57, i32 67, i32 77], align 4

ram_dual_port main_indata (
	.clk( clk ),
	.address_a( main_indata_address_a ),
	.address_b( main_indata_address_b ),
	.wren_a( main_indata_write_enable_a ),
	.wren_b( main_indata_write_enable_b ),
	.data_a( main_indata_in_a ),
	.data_b( main_indata_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_indata_out_a ),
	.q_b( main_indata_out_b)
);
defparam main_indata.width_a = 32;
defparam main_indata.width_b = 32;
defparam main_indata.widthad_a = 10;
defparam main_indata.widthad_b = 10;
defparam main_indata.width_be_a = 1;
defparam main_indata.width_be_b = 1;
defparam main_indata.numwords_a = 1024;
defparam main_indata.numwords_b = 1024;
defparam main_indata.init_file = "main_indata.mif";


reg [3:0] main_indexTable_address_a;
reg [3:0] main_indexTable_address_b;
reg main_indexTable_write_enable_a;
reg main_indexTable_write_enable_b;
reg [31:0] main_indexTable_in_a;
reg [31:0] main_indexTable_in_b;
wire [31:0] main_indexTable_out_a;
wire [31:0] main_indexTable_out_b;

// @main.indexTable = internal unnamed_addr constant [16 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 2, i32 4, i32 6, i32 8, i32 -1, i32 -1, i32 -1, i32 -1, i32 2, i32 4, i32 6, i32 8], align 4

ram_dual_port main_indexTable (
	.clk( clk ),
	.address_a( main_indexTable_address_a ),
	.address_b( main_indexTable_address_b ),
	.wren_a( main_indexTable_write_enable_a ),
	.wren_b( main_indexTable_write_enable_b ),
	.data_a( main_indexTable_in_a ),
	.data_b( main_indexTable_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_indexTable_out_a ),
	.q_b( main_indexTable_out_b)
);
defparam main_indexTable.width_a = 32;
defparam main_indexTable.width_b = 32;
defparam main_indexTable.widthad_a = 4;
defparam main_indexTable.widthad_b = 4;
defparam main_indexTable.width_be_a = 1;
defparam main_indexTable.width_be_b = 1;
defparam main_indexTable.numwords_a = 16;
defparam main_indexTable.numwords_b = 16;
defparam main_indexTable.init_file = "main_indexTable.mif";


reg [6:0] main_stepsizeTable_address_a;
reg [6:0] main_stepsizeTable_address_b;
reg main_stepsizeTable_write_enable_a;
reg main_stepsizeTable_write_enable_b;
reg [31:0] main_stepsizeTable_in_a;
reg [31:0] main_stepsizeTable_in_b;
wire [31:0] main_stepsizeTable_out_a;
wire [31:0] main_stepsizeTable_out_b;

// @main.stepsizeTable = internal unnamed_addr constant [89 x i32] [i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 16, i32 17, i32 19, i32 21, i32 23, i32 25, i32 28, i32 31, i32 34, i32 37, i32 41, i32 45, i32 50, i32 55, i32 60, i32 66, i32 73, i32 80, i32 88, i32 97, i32 107, i32 118, i32 130, i32 143, i32 157, i32 173, i32 190, i32 209, i32 230, i32 253, i32 279, i32 307, i32 337, i32 371, i32 408, i32 449, i32 494, i32 544, i32 598, i32 658, i32 724, i32 796, i32 876, i32 963, i32 1060, i32 1166, i32 1282, i32 1411, i32 1552, i32 1707, i32 1878, i32 2066, i32 2272, i32 2499, i32 2749, i32 3024, i32 3327, i32 3660, i32 4026, i32 4428, i32 4871, i32 5358, i32 5894, i32 6484, i32 7132, i32 7845, i32 8630, i32 9493, i32 10442, i32 11487, i32 12635, i32 13899, i32 15289, i32 16818, i32 18500, i32 20350, i32 22385, i32 24623, i32 27086, i32 29794, i32 32767], align 4

ram_dual_port main_stepsizeTable (
	.clk( clk ),
	.address_a( main_stepsizeTable_address_a ),
	.address_b( main_stepsizeTable_address_b ),
	.wren_a( main_stepsizeTable_write_enable_a ),
	.wren_b( main_stepsizeTable_write_enable_b ),
	.data_a( main_stepsizeTable_in_a ),
	.data_b( main_stepsizeTable_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_stepsizeTable_out_a ),
	.q_b( main_stepsizeTable_out_b)
);
defparam main_stepsizeTable.width_a = 32;
defparam main_stepsizeTable.width_b = 32;
defparam main_stepsizeTable.widthad_a = 7;
defparam main_stepsizeTable.widthad_b = 7;
defparam main_stepsizeTable.width_be_a = 1;
defparam main_stepsizeTable.width_be_b = 1;
defparam main_stepsizeTable.numwords_a = 89;
defparam main_stepsizeTable.numwords_b = 89;
defparam main_stepsizeTable.init_file = "main_stepsizeTable.mif";

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_main_indata_a;
assign select_main_indata_a = (tag_a ==`TAG_g_main_indata);
reg select_main_indata_reg_a;
wire [31:0] memory_controller_main_indata_out_a;
assign memory_controller_main_indata_out_a = {32{ select_main_indata_reg_a}} & main_indata_out_a;

wire select_main_indexTable_a;
assign select_main_indexTable_a = (tag_a ==`TAG_g_main_indexTable);
reg select_main_indexTable_reg_a;
wire [31:0] memory_controller_main_indexTable_out_a;
assign memory_controller_main_indexTable_out_a = {32{ select_main_indexTable_reg_a}} & main_indexTable_out_a;

wire select_main_stepsizeTable_a;
assign select_main_stepsizeTable_a = (tag_a ==`TAG_g_main_stepsizeTable);
reg select_main_stepsizeTable_reg_a;
wire [31:0] memory_controller_main_stepsizeTable_out_a;
assign memory_controller_main_stepsizeTable_out_a = {32{ select_main_stepsizeTable_reg_a}} & main_stepsizeTable_out_a;

always @(*)
begin
	main_indata_address_a = memory_controller_address_a [10-1+2:2] & {10{select_main_indata_a}};
	main_indata_write_enable_a = memory_controller_write_enable_a & select_main_indata_a;
	main_indata_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_indexTable_address_a = memory_controller_address_a [4-1+2:2] & {4{select_main_indexTable_a}};
	main_indexTable_write_enable_a = memory_controller_write_enable_a & select_main_indexTable_a;
	main_indexTable_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_stepsizeTable_address_a = memory_controller_address_a [7-1+2:2] & {7{select_main_stepsizeTable_a}};
	main_stepsizeTable_write_enable_a = memory_controller_write_enable_a & select_main_stepsizeTable_a;
	main_stepsizeTable_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_main_indata_reg_a}} | {2{select_main_indexTable_reg_a}} | {2{select_main_stepsizeTable_reg_a}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_main_indata_out_a | memory_controller_main_indexTable_out_a | memory_controller_main_stepsizeTable_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select_main_indata_reg_a <= select_main_indata_a;
select_main_indexTable_reg_a <= select_main_indexTable_a;
select_main_stepsizeTable_reg_a <= select_main_stepsizeTable_a;
end

reg [2:0] select_not_struct_b;

wire select_main_indata_b;
assign select_main_indata_b = (tag_b ==`TAG_g_main_indata);
reg select_main_indata_reg_b;
wire [31:0] memory_controller_main_indata_out_b;
assign memory_controller_main_indata_out_b = {32{ select_main_indata_reg_b}} & main_indata_out_b;

wire select_main_indexTable_b;
assign select_main_indexTable_b = (tag_b ==`TAG_g_main_indexTable);
reg select_main_indexTable_reg_b;
wire [31:0] memory_controller_main_indexTable_out_b;
assign memory_controller_main_indexTable_out_b = {32{ select_main_indexTable_reg_b}} & main_indexTable_out_b;

wire select_main_stepsizeTable_b;
assign select_main_stepsizeTable_b = (tag_b ==`TAG_g_main_stepsizeTable);
reg select_main_stepsizeTable_reg_b;
wire [31:0] memory_controller_main_stepsizeTable_out_b;
assign memory_controller_main_stepsizeTable_out_b = {32{ select_main_stepsizeTable_reg_b}} & main_stepsizeTable_out_b;

always @(*)
begin
	main_indata_address_b = memory_controller_address_b [10-1+2:2] & {10{select_main_indata_b}};
	main_indata_write_enable_b = memory_controller_write_enable_b & select_main_indata_b;
	main_indata_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_indexTable_address_b = memory_controller_address_b [4-1+2:2] & {4{select_main_indexTable_b}};
	main_indexTable_write_enable_b = memory_controller_write_enable_b & select_main_indexTable_b;
	main_indexTable_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_stepsizeTable_address_b = memory_controller_address_b [7-1+2:2] & {7{select_main_stepsizeTable_b}};
	main_stepsizeTable_write_enable_b = memory_controller_write_enable_b & select_main_stepsizeTable_b;
	main_stepsizeTable_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_main_indata_reg_b}} | {2{select_main_indexTable_reg_b}} | {2{select_main_stepsizeTable_reg_b}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_main_indata_out_b | memory_controller_main_indexTable_out_b | memory_controller_main_stepsizeTable_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select_main_indata_reg_b <= select_main_indata_b;
select_main_indexTable_reg_b <= select_main_indexTable_b;
select_main_stepsizeTable_reg_b <= select_main_stepsizeTable_b;
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_main_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_main_BB_1_2 = 5'd2;
parameter [4:0] LEGUP_F_main_BB_1_3 = 5'd3;
parameter [4:0] LEGUP_F_main_BB_1_4 = 5'd4;
parameter [4:0] LEGUP_F_main_BB_1_5 = 5'd5;
parameter [4:0] LEGUP_F_main_BB_1_6 = 5'd6;
parameter [4:0] LEGUP_F_main_BB_1_7 = 5'd7;
parameter [4:0] LEGUP_F_main_BB_1_8 = 5'd8;
parameter [4:0] LEGUP_F_main_BB_1_9 = 5'd9;
parameter [4:0] LEGUP_F_main_BB_21_10 = 5'd10;
parameter [4:0] LEGUP_F_main_BB_23_11 = 5'd11;
parameter [4:0] LEGUP_F_main_BB_24_12 = 5'd12;
parameter [4:0] LEGUP_F_main_BB_24_13 = 5'd13;
parameter [4:0] LEGUP_F_main_BB_24_14 = 5'd14;
parameter [4:0] LEGUP_F_main_BB_24_15 = 5'd15;
parameter [4:0] LEGUP_F_main_BB_24_16 = 5'd16;
parameter [4:0] LEGUP_F_main_BB_24_17 = 5'd17;
parameter [4:0] LEGUP_F_main_BB_24_18 = 5'd18;
parameter [4:0] LEGUP_F_main_BB_24_19 = 5'd19;
parameter [4:0] LEGUP_F_main_BB_34_20 = 5'd20;
parameter [4:0] LEGUP_F_main_BB_37_21 = 5'd21;
parameter [4:0] LEGUP_F_main_BB_41_22 = 5'd22;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [4:0] cur_state;
reg [31:0] main_1_outputbuffer_06;
reg [31:0] main_1_outputbuffer_06_reg;
reg [31:0] main_1_len_05;
reg [31:0] main_1_len_05_reg;
reg [31:0] main_1_bufferstep_04;
reg [31:0] main_1_bufferstep_04_reg;
reg [31:0] main_1_step_03;
reg [31:0] main_1_step_03_reg;
reg [31:0] main_1_valpred_02;
reg [31:0] main_1_valpred_02_reg;
reg [31:0] main_1_index_01;
reg [31:0] main_1_index_01_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [31:0] main_1_2;
reg [31:0] main_1_3;
reg  main_1_4;
reg  main_1_4_reg;
reg [31:0] main_1_5;
reg [31:0] main_1_6;
reg [31:0] main_1_6_reg;
reg [31:0] main_1_7;
reg [31:0] main_1__;
reg [31:0] main_1___reg;
reg [31:0] main_1_8;
reg [31:0] main_1_8_reg;
reg  main_1_9;
reg [31:0] main_1_10;
reg [31:0] main_1_delta_0;
reg [31:0] main_1_delta_0_reg;
reg [31:0] main_1_diff_1;
reg [31:0] main_1_diff_1_reg;
reg [31:0] main_1_11;
reg [31:0] main_1_11_reg;
reg  main_1_12;
reg [31:0] main_1_13;
reg [31:0] main_1_13_reg;
reg [31:0] main_1_14;
reg [31:0] main_1_15;
reg [31:0] main_1_15_reg;
reg [31:0] main_1_diff_2;
reg [31:0] main_1_diff_2_reg;
reg [31:0] main_1_16;
reg [31:0] main_1_16_reg;
reg  main_1_17;
reg [31:0] main_1_18;
reg [31:0] main_1_vpdiff_0;
reg [31:0] main_1_vpdiff_0_reg;
reg [31:0] main_1_vpdiff_1;
reg [31:0] main_1_vpdiff_1_reg;
reg [31:0] main_1_vpdiff_2;
reg [31:0] main_1_vpdiff_2_reg;
reg [31:0] main_1_19;
reg [31:0] main_1_19_reg;
reg [31:0] main_1_tmp;
reg [31:0] main_1_valpred_1_p;
reg [31:0] main_1_valpred_1;
reg [31:0] main_1_valpred_1_reg;
reg  main_1_20;
reg  main_21_22;
reg [31:0] main_24_valpred_2;
reg [31:0] main_24_valpred_2_reg;
reg [31:0] main_24_delta_1;
reg [31:0] main_24_delta_2;
reg [31:0] main_24_25;
reg [31:0] main_24_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_24_26;
reg [31:0] main_24_27;
reg [31:0] main_24_28;
reg  main_24_29;
reg [31:0] main_24_index_1;
reg [31:0] main_24_index_1_reg;
reg  main_24_30;
reg [31:0] main_24_index_2;
reg [31:0] main_24_index_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_24_31;
reg [31:0] main_24_32;
reg [31:0] main_24_32_reg;
reg  main_24_33;
reg  main_24_33_reg;
reg [31:0] main_34_35;
reg [31:0] main_34_36;
reg [31:0] main_37_outputbuffer_1;
reg [31:0] main_37_outputbuffer_1_reg;
reg [31:0] main_37_38;
reg [31:0] main_37_39;
reg [31:0] main_37_40;
reg  main_37_exitcond;
reg [31:0] main_1_outputbuffer_06_phi_temp;
reg [31:0] main_1_len_05_phi_temp;
reg [31:0] main_1_bufferstep_04_phi_temp;
reg [31:0] main_1_step_03_phi_temp;
reg [31:0] main_1_valpred_02_phi_temp;
reg [31:0] main_1_index_01_phi_temp;
reg [31:0] main_24_valpred_2_phi_temp;
reg [31:0] main_37_outputbuffer_1_phi_temp;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_1_9) & (memory_controller_waitrequest == 1'd0)) & (main_1_20 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_1_9) & (memory_controller_waitrequest == 1'd0)) & (main_1_20 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_21_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_21_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_21_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_21_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_21_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_21_10) & (memory_controller_waitrequest == 1'd0)) & (main_21_22 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_23_11;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_23_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_21_10) & (memory_controller_waitrequest == 1'd0)) & (main_21_22 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_24_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_23_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_23_11;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_23_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_23_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_24_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_24_13;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_13;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_24_14;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_14;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_24_15;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_15;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_24_16;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_16;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_24_17;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_17;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_24_18;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_18) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_18;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_18) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_24_19;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_19) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_19;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_24_19) & (memory_controller_waitrequest == 1'd0)) & (main_24_33_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_34_20;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_34_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_24_19) & (memory_controller_waitrequest == 1'd0)) & (main_24_33_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_37_21;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_37_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_34_20) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_34_20;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_34_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_34_20) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_37_21;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_37_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_37_21) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_37_21;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_37_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_37_21) & (memory_controller_waitrequest == 1'd0)) & (main_37_exitcond == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_41_22;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_41_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_37_21) & (memory_controller_waitrequest == 1'd0)) & (main_37_exitcond == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_41_22) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_41_22;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_41_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_41_22) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (^reset !== 1'bX && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %outputbuffer.06 = phi i32 [ 0, %0 ], [ %outputbuffer.1, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_outputbuffer_06 = main_1_outputbuffer_06_phi_temp;
end
/* main: %1*/
/*   %outputbuffer.06 = phi i32 [ 0, %0 ], [ %outputbuffer.1, %37 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_outputbuffer_06 = main_1_outputbuffer_06_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %outputbuffer.06 = phi i32 [ 0, %0 ], [ %outputbuffer.1, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_outputbuffer_06_reg <= main_1_outputbuffer_06;
if (^reset !== 1'bX && ^(main_1_outputbuffer_06) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_outputbuffer_06_reg"); $finish; end
end
/* main: %1*/
/*   %outputbuffer.06 = phi i32 [ 0, %0 ], [ %outputbuffer.1, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_outputbuffer_06_reg <= main_1_outputbuffer_06;
if (^reset !== 1'bX && ^(main_1_outputbuffer_06) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_outputbuffer_06_reg"); $finish; end
end
/* main: %1*/
/*   %outputbuffer.06 = phi i32 [ 0, %0 ], [ %outputbuffer.1, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_outputbuffer_06_reg <= main_1_outputbuffer_06;
if (^reset !== 1'bX && ^(main_1_outputbuffer_06) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_outputbuffer_06_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %len.05 = phi i32 [ 0, %0 ], [ %40, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_len_05 = main_1_len_05_phi_temp;
end
/* main: %1*/
/*   %len.05 = phi i32 [ 0, %0 ], [ %40, %37 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_len_05 = main_1_len_05_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %len.05 = phi i32 [ 0, %0 ], [ %40, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_len_05_reg <= main_1_len_05;
if (^reset !== 1'bX && ^(main_1_len_05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_len_05_reg"); $finish; end
end
/* main: %1*/
/*   %len.05 = phi i32 [ 0, %0 ], [ %40, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_len_05_reg <= main_1_len_05;
if (^reset !== 1'bX && ^(main_1_len_05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_len_05_reg"); $finish; end
end
/* main: %1*/
/*   %len.05 = phi i32 [ 0, %0 ], [ %40, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_len_05_reg <= main_1_len_05;
if (^reset !== 1'bX && ^(main_1_len_05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_len_05_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %bufferstep.04 = phi i32 [ 1, %0 ], [ %39, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_bufferstep_04 = main_1_bufferstep_04_phi_temp;
end
/* main: %1*/
/*   %bufferstep.04 = phi i32 [ 1, %0 ], [ %39, %37 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_bufferstep_04 = main_1_bufferstep_04_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %bufferstep.04 = phi i32 [ 1, %0 ], [ %39, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_bufferstep_04_reg <= main_1_bufferstep_04;
if (^reset !== 1'bX && ^(main_1_bufferstep_04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_bufferstep_04_reg"); $finish; end
end
/* main: %1*/
/*   %bufferstep.04 = phi i32 [ 1, %0 ], [ %39, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_bufferstep_04_reg <= main_1_bufferstep_04;
if (^reset !== 1'bX && ^(main_1_bufferstep_04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_bufferstep_04_reg"); $finish; end
end
/* main: %1*/
/*   %bufferstep.04 = phi i32 [ 1, %0 ], [ %39, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_bufferstep_04_reg <= main_1_bufferstep_04;
if (^reset !== 1'bX && ^(main_1_bufferstep_04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_bufferstep_04_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %step.03 = phi i32 [ 7, %0 ], [ %32, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_step_03 = main_1_step_03_phi_temp;
end
/* main: %1*/
/*   %step.03 = phi i32 [ 7, %0 ], [ %32, %37 ]*/
else if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_step_03 = main_1_step_03_phi_temp;
end
/* main: %1*/
/*   %step.03 = phi i32 [ 7, %0 ], [ %32, %37 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_step_03 = main_1_step_03_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %step.03 = phi i32 [ 7, %0 ], [ %32, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_step_03_reg <= main_1_step_03;
if (^reset !== 1'bX && ^(main_1_step_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_step_03_reg"); $finish; end
end
/* main: %1*/
/*   %step.03 = phi i32 [ 7, %0 ], [ %32, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_step_03_reg <= main_1_step_03;
if (^reset !== 1'bX && ^(main_1_step_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_step_03_reg"); $finish; end
end
/* main: %1*/
/*   %step.03 = phi i32 [ 7, %0 ], [ %32, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_step_03_reg <= main_1_step_03;
if (^reset !== 1'bX && ^(main_1_step_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_step_03_reg"); $finish; end
end
/* main: %1*/
/*   %step.03 = phi i32 [ 7, %0 ], [ %32, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_step_03_reg <= main_1_step_03;
if (^reset !== 1'bX && ^(main_1_step_03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_step_03_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %valpred.02 = phi i32 [ 0, %0 ], [ %valpred.2, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_valpred_02 = main_1_valpred_02_phi_temp;
end
/* main: %1*/
/*   %valpred.02 = phi i32 [ 0, %0 ], [ %valpred.2, %37 ]*/
else if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_valpred_02 = main_1_valpred_02_phi_temp;
end
/* main: %1*/
/*   %valpred.02 = phi i32 [ 0, %0 ], [ %valpred.2, %37 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_valpred_02 = main_1_valpred_02_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %valpred.02 = phi i32 [ 0, %0 ], [ %valpred.2, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_valpred_02_reg <= main_1_valpred_02;
if (^reset !== 1'bX && ^(main_1_valpred_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_valpred_02_reg"); $finish; end
end
/* main: %1*/
/*   %valpred.02 = phi i32 [ 0, %0 ], [ %valpred.2, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_valpred_02_reg <= main_1_valpred_02;
if (^reset !== 1'bX && ^(main_1_valpred_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_valpred_02_reg"); $finish; end
end
/* main: %1*/
/*   %valpred.02 = phi i32 [ 0, %0 ], [ %valpred.2, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_valpred_02_reg <= main_1_valpred_02;
if (^reset !== 1'bX && ^(main_1_valpred_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_valpred_02_reg"); $finish; end
end
/* main: %1*/
/*   %valpred.02 = phi i32 [ 0, %0 ], [ %valpred.2, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_valpred_02_reg <= main_1_valpred_02;
if (^reset !== 1'bX && ^(main_1_valpred_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_valpred_02_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %index.01 = phi i32 [ 0, %0 ], [ %index.2, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_index_01 = main_1_index_01_phi_temp;
end
/* main: %1*/
/*   %index.01 = phi i32 [ 0, %0 ], [ %index.2, %37 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_index_01 = main_1_index_01_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %index.01 = phi i32 [ 0, %0 ], [ %index.2, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_index_01_reg <= main_1_index_01;
if (^reset !== 1'bX && ^(main_1_index_01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_index_01_reg"); $finish; end
end
/* main: %1*/
/*   %index.01 = phi i32 [ 0, %0 ], [ %index.2, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_index_01_reg <= main_1_index_01;
if (^reset !== 1'bX && ^(main_1_index_01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_index_01_reg"); $finish; end
end
/* main: %1*/
/*   %index.01 = phi i32 [ 0, %0 ], [ %index.2, %37 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_index_01_reg <= main_1_index_01;
if (^reset !== 1'bX && ^(main_1_index_01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_index_01_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %scevgep = getelementptr [1024 x i32]* @main.indata, i32 0, i32 %len.05*/
begin
main_1_scevgep = (`TAG_g_main_indata_a + (4 * main_1_len_05));
end
end
always @(*) begin
/* main: %1*/
/*   %2 = load i32* %scevgep, align 4, !tbaa !0*/
begin
main_1_2 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* main: %1*/
/*   %3 = sub nsw i32 %2, %valpred.02*/
begin
main_1_3 = (main_1_2 - main_1_valpred_02_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %4 = icmp slt i32 %3, 0*/
begin
main_1_4 = ($signed(main_1_3) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %4 = icmp slt i32 %3, 0*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
main_1_4_reg <= main_1_4;
if (^reset !== 1'bX && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %5 = ashr i32 %3, 31*/
begin
main_1_5 = ($signed(main_1_3) >>> 32'd31);
end
end
always @(*) begin
/* main: %1*/
/*   %6 = and i32 %5, 8*/
begin
main_1_6 = (main_1_5 & 32'd8);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %6 = and i32 %5, 8*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
main_1_6_reg <= main_1_6;
if (^reset !== 1'bX && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %7 = sub nsw i32 0, %3*/
begin
main_1_7 = (32'd0 - main_1_3);
end
end
always @(*) begin
/* main: %1*/
/*   %. = select i1 %4, i32 %7, i32 %3*/
begin
main_1__ = (main_1_4 ? main_1_7 : main_1_3);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %. = select i1 %4, i32 %7, i32 %3*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
main_1___reg <= main_1__;
if (^reset !== 1'bX && ^(main_1__) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1___reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %8 = ashr i32 %step.03, 3*/
begin
main_1_8 = ($signed(main_1_step_03) >>> 32'd3);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %8 = ashr i32 %step.03, 3*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_8_reg <= main_1_8;
if (^reset !== 1'bX && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %9 = icmp slt i32 %., %step.03*/
begin
main_1_9 = ($signed(main_1___reg) < $signed(main_1_step_03_reg));
end
end
always @(*) begin
/* main: %1*/
/*   %10 = select i1 %9, i32 0, i32 %step.03*/
begin
main_1_10 = (main_1_9 ? 32'd0 : main_1_step_03_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %delta.0 = select i1 %9, i32 0, i32 4*/
begin
main_1_delta_0 = (main_1_9 ? 32'd0 : 32'd4);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %delta.0 = select i1 %9, i32 0, i32 4*/
if ((cur_state == LEGUP_F_main_BB_1_5))
begin
main_1_delta_0_reg <= main_1_delta_0;
if (^reset !== 1'bX && ^(main_1_delta_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_delta_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %diff.1 = sub i32 %., %10*/
begin
main_1_diff_1 = (main_1___reg - main_1_10);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %diff.1 = sub i32 %., %10*/
if ((cur_state == LEGUP_F_main_BB_1_5))
begin
main_1_diff_1_reg <= main_1_diff_1;
if (^reset !== 1'bX && ^(main_1_diff_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_diff_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %11 = ashr i32 %step.03, 1*/
begin
main_1_11 = ($signed(main_1_step_03) >>> 32'd1);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %11 = ashr i32 %step.03, 1*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_11_reg <= main_1_11;
if (^reset !== 1'bX && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %12 = icmp slt i32 %diff.1, %11*/
begin
main_1_12 = ($signed(main_1_diff_1_reg) < $signed(main_1_11_reg));
end
end
always @(*) begin
/* main: %1*/
/*   %13 = or i32 %delta.0, 2*/
begin
main_1_13 = (main_1_delta_0 | 32'd2);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %13 = or i32 %delta.0, 2*/
if ((cur_state == LEGUP_F_main_BB_1_5))
begin
main_1_13_reg <= main_1_13;
if (^reset !== 1'bX && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %14 = select i1 %12, i32 0, i32 %11*/
begin
main_1_14 = (main_1_12 ? 32'd0 : main_1_11_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %15 = select i1 %12, i32 %delta.0, i32 %13*/
begin
main_1_15 = (main_1_12 ? main_1_delta_0_reg : main_1_13_reg);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %15 = select i1 %12, i32 %delta.0, i32 %13*/
if ((cur_state == LEGUP_F_main_BB_1_6))
begin
main_1_15_reg <= main_1_15;
if (^reset !== 1'bX && ^(main_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %diff.2 = sub i32 %diff.1, %14*/
begin
main_1_diff_2 = (main_1_diff_1_reg - main_1_14);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %diff.2 = sub i32 %diff.1, %14*/
if ((cur_state == LEGUP_F_main_BB_1_6))
begin
main_1_diff_2_reg <= main_1_diff_2;
if (^reset !== 1'bX && ^(main_1_diff_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_diff_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %16 = ashr i32 %step.03, 2*/
begin
main_1_16 = ($signed(main_1_step_03) >>> 32'd2);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %16 = ashr i32 %step.03, 2*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_16_reg <= main_1_16;
if (^reset !== 1'bX && ^(main_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %17 = icmp slt i32 %diff.2, %16*/
begin
main_1_17 = ($signed(main_1_diff_2_reg) < $signed(main_1_16_reg));
end
end
always @(*) begin
/* main: %1*/
/*   %18 = select i1 %17, i32 0, i32 %16*/
begin
main_1_18 = (main_1_17 ? 32'd0 : main_1_16_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %vpdiff.0 = add i32 %10, %8*/
begin
main_1_vpdiff_0 = (main_1_10 + main_1_8_reg);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %vpdiff.0 = add i32 %10, %8*/
if ((cur_state == LEGUP_F_main_BB_1_5))
begin
main_1_vpdiff_0_reg <= main_1_vpdiff_0;
if (^reset !== 1'bX && ^(main_1_vpdiff_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_vpdiff_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %vpdiff.1 = add i32 %vpdiff.0, %14*/
begin
main_1_vpdiff_1 = (main_1_vpdiff_0_reg + main_1_14);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %vpdiff.1 = add i32 %vpdiff.0, %14*/
if ((cur_state == LEGUP_F_main_BB_1_6))
begin
main_1_vpdiff_1_reg <= main_1_vpdiff_1;
if (^reset !== 1'bX && ^(main_1_vpdiff_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_vpdiff_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %vpdiff.2 = add i32 %vpdiff.1, %18*/
begin
main_1_vpdiff_2 = (main_1_vpdiff_1_reg + main_1_18);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %vpdiff.2 = add i32 %vpdiff.1, %18*/
if ((cur_state == LEGUP_F_main_BB_1_7))
begin
main_1_vpdiff_2_reg <= main_1_vpdiff_2;
if (^reset !== 1'bX && ^(main_1_vpdiff_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_vpdiff_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %19 = zext i1 %17 to i32*/
begin
main_1_19 = main_1_17;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %19 = zext i1 %17 to i32*/
if ((cur_state == LEGUP_F_main_BB_1_7))
begin
main_1_19_reg <= main_1_19;
if (^reset !== 1'bX && ^(main_1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_19_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %tmp = sub i32 0, %vpdiff.2*/
begin
main_1_tmp = (32'd0 - main_1_vpdiff_2_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %valpred.1.p = select i1 %4, i32 %tmp, i32 %vpdiff.2*/
begin
main_1_valpred_1_p = (main_1_4_reg ? main_1_tmp : main_1_vpdiff_2_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %valpred.1 = add i32 %valpred.1.p, %valpred.02*/
begin
main_1_valpred_1 = (main_1_valpred_1_p + main_1_valpred_02_reg);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %valpred.1 = add i32 %valpred.1.p, %valpred.02*/
if ((cur_state == LEGUP_F_main_BB_1_8))
begin
main_1_valpred_1_reg <= main_1_valpred_1;
if (^reset !== 1'bX && ^(main_1_valpred_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_valpred_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %20 = icmp sgt i32 %valpred.1, 32767*/
begin
main_1_20 = ($signed(main_1_valpred_1_reg) > $signed(32'd32767));
end
end
always @(*) begin
/* main: %21*/
/*   %22 = icmp slt i32 %valpred.1, -32768*/
begin
main_21_22 = ($signed(main_1_valpred_1_reg) < $signed(-32'd32768));
end
end
always @(*) begin
/* main: %24*/
/*   %valpred.2 = phi i32 [ -32768, %23 ], [ %valpred.1, %21 ], [ 32767, %1 ]*/
if ((cur_state == LEGUP_F_main_BB_24_12))
begin
main_24_valpred_2 = main_24_valpred_2_phi_temp;
end
/* main: %24*/
/*   %valpred.2 = phi i32 [ -32768, %23 ], [ %valpred.1, %21 ], [ 32767, %1 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_24_12)) */
begin
main_24_valpred_2 = main_24_valpred_2_phi_temp;
end
end
always @(posedge clk) begin
/* main: %24*/
/*   %valpred.2 = phi i32 [ -32768, %23 ], [ %valpred.1, %21 ], [ 32767, %1 ]*/
if ((cur_state == LEGUP_F_main_BB_24_12))
begin
main_24_valpred_2_reg <= main_24_valpred_2;
if (^reset !== 1'bX && ^(main_24_valpred_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_valpred_2_reg"); $finish; end
end
/* main: %24*/
/*   %valpred.2 = phi i32 [ -32768, %23 ], [ %valpred.1, %21 ], [ 32767, %1 ]*/
if ((cur_state == LEGUP_F_main_BB_24_12))
begin
main_24_valpred_2_reg <= main_24_valpred_2;
if (^reset !== 1'bX && ^(main_24_valpred_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_valpred_2_reg"); $finish; end
end
/* main: %24*/
/*   %valpred.2 = phi i32 [ -32768, %23 ], [ %valpred.1, %21 ], [ 32767, %1 ]*/
if ((cur_state == LEGUP_F_main_BB_24_12))
begin
main_24_valpred_2_reg <= main_24_valpred_2;
if (^reset !== 1'bX && ^(main_24_valpred_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_valpred_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %24*/
/*   %delta.1 = or i32 %15, %6*/
begin
main_24_delta_1 = (main_1_15_reg | main_1_6_reg);
end
end
always @(*) begin
/* main: %24*/
/*   %delta.2 = or i32 %delta.1, %19*/
begin
main_24_delta_2 = (main_24_delta_1 | main_1_19_reg);
end
end
always @(*) begin
/* main: %24*/
/*   %25 = xor i32 %delta.2, 1*/
begin
main_24_25 = (main_24_delta_2 ^ 32'd1);
end
end
always @(posedge clk) begin
/* main: %24*/
/*   %25 = xor i32 %delta.2, 1*/
if ((cur_state == LEGUP_F_main_BB_24_12))
begin
main_24_25_reg <= main_24_25;
if (^reset !== 1'bX && ^(main_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_25_reg"); $finish; end
end
end
always @(*) begin
/* main: %24*/
/*   %26 = getelementptr inbounds [16 x i32]* @main.indexTable, i32 0, i32 %25*/
begin
main_24_26 = (`TAG_g_main_indexTable_a + (4 * main_24_25_reg));
end
end
always @(*) begin
/* main: %24*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
begin
main_24_27 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* main: %24*/
/*   %28 = add nsw i32 %27, %index.01*/
begin
main_24_28 = (main_24_27 + main_1_index_01_reg);
end
end
always @(*) begin
/* main: %24*/
/*   %29 = icmp slt i32 %28, 0*/
begin
main_24_29 = ($signed(main_24_28) < $signed(32'd0));
end
end
always @(*) begin
/* main: %24*/
/*   %index.1 = select i1 %29, i32 0, i32 %28*/
begin
main_24_index_1 = (main_24_29 ? 32'd0 : main_24_28);
end
end
always @(posedge clk) begin
/* main: %24*/
/*   %index.1 = select i1 %29, i32 0, i32 %28*/
if ((cur_state == LEGUP_F_main_BB_24_15))
begin
main_24_index_1_reg <= main_24_index_1;
if (^reset !== 1'bX && ^(main_24_index_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_index_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %24*/
/*   %30 = icmp sgt i32 %index.1, 88*/
begin
main_24_30 = ($signed(main_24_index_1_reg) > $signed(32'd88));
end
end
always @(*) begin
/* main: %24*/
/*   %index.2 = select i1 %30, i32 88, i32 %index.1*/
begin
main_24_index_2 = (main_24_30 ? 32'd88 : main_24_index_1_reg);
end
end
always @(posedge clk) begin
/* main: %24*/
/*   %index.2 = select i1 %30, i32 88, i32 %index.1*/
if ((cur_state == LEGUP_F_main_BB_24_16))
begin
main_24_index_2_reg <= main_24_index_2;
if (^reset !== 1'bX && ^(main_24_index_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_index_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %24*/
/*   %31 = getelementptr inbounds [89 x i32]* @main.stepsizeTable, i32 0, i32 %index.2*/
begin
main_24_31 = (`TAG_g_main_stepsizeTable_a + (4 * main_24_index_2_reg));
end
end
always @(*) begin
/* main: %24*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
begin
main_24_32 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* main: %24*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_19))
begin
main_24_32_reg <= main_24_32;
if (^reset !== 1'bX && ^(main_24_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_32_reg"); $finish; end
end
end
always @(*) begin
/* main: %24*/
/*   %33 = icmp ne i32 %bufferstep.04, 0*/
begin
main_24_33 = (main_1_bufferstep_04_reg != 32'd0);
end
end
always @(posedge clk) begin
/* main: %24*/
/*   %33 = icmp ne i32 %bufferstep.04, 0*/
if ((cur_state == LEGUP_F_main_BB_24_12))
begin
main_24_33_reg <= main_24_33;
if (^reset !== 1'bX && ^(main_24_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_33_reg"); $finish; end
end
end
always @(*) begin
/* main: %34*/
/*   %35 = shl nuw nsw i32 %25, 4*/
begin
main_34_35 = (main_24_25_reg <<< (32'd4 % 32));
end
end
always @(*) begin
/* main: %34*/
/*   %36 = and i32 %35, 240*/
begin
main_34_36 = (main_34_35 & 32'd240);
end
end
always @(*) begin
/* main: %37*/
/*   %outputbuffer.1 = phi i32 [ %36, %34 ], [ %outputbuffer.06, %24 ]*/
if ((cur_state == LEGUP_F_main_BB_37_21))
begin
main_37_outputbuffer_1 = main_37_outputbuffer_1_phi_temp;
end
/* main: %37*/
/*   %outputbuffer.1 = phi i32 [ %36, %34 ], [ %outputbuffer.06, %24 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_37_21)) */
begin
main_37_outputbuffer_1 = main_37_outputbuffer_1_phi_temp;
end
end
always @(posedge clk) begin
/* main: %37*/
/*   %outputbuffer.1 = phi i32 [ %36, %34 ], [ %outputbuffer.06, %24 ]*/
if ((cur_state == LEGUP_F_main_BB_37_21))
begin
main_37_outputbuffer_1_reg <= main_37_outputbuffer_1;
if (^reset !== 1'bX && ^(main_37_outputbuffer_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_outputbuffer_1_reg"); $finish; end
end
/* main: %37*/
/*   %outputbuffer.1 = phi i32 [ %36, %34 ], [ %outputbuffer.06, %24 ]*/
if ((cur_state == LEGUP_F_main_BB_37_21))
begin
main_37_outputbuffer_1_reg <= main_37_outputbuffer_1;
if (^reset !== 1'bX && ^(main_37_outputbuffer_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_outputbuffer_1_reg"); $finish; end
end
/* main: %37*/
/*   %outputbuffer.1 = phi i32 [ %36, %34 ], [ %outputbuffer.06, %24 ]*/
if ((cur_state == LEGUP_F_main_BB_37_21))
begin
main_37_outputbuffer_1_reg <= main_37_outputbuffer_1;
if (^reset !== 1'bX && ^(main_37_outputbuffer_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_outputbuffer_1_reg"); $finish; end
end
end
always @(*) begin
/* main: %37*/
/*   %38 = zext i1 %33 to i32*/
begin
main_37_38 = main_24_33_reg;
end
end
always @(*) begin
/* main: %37*/
/*   %39 = xor i32 %38, 1*/
begin
main_37_39 = (main_37_38 ^ 32'd1);
end
end
always @(*) begin
/* main: %37*/
/*   %40 = add nsw i32 %len.05, 1*/
begin
main_37_40 = (main_1_len_05_reg + 32'd1);
end
end
always @(*) begin
/* main: %37*/
/*   %exitcond = icmp eq i32 %40, 1024*/
begin
main_37_exitcond = (main_37_40 == 32'd1024);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %outputbuffer.06 = phi i32 [ 0, %0 ], [ %outputbuffer.1, %37 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_outputbuffer_06_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_outputbuffer_06_phi_temp"); $finish; end
end
/* main: %1*/
/*   %outputbuffer.06 = phi i32 [ 0, %0 ], [ %outputbuffer.1, %37 ]*/
if ((((cur_state == LEGUP_F_main_BB_37_21) & (memory_controller_waitrequest == 1'd0)) & (main_37_exitcond == 1'd0)))
begin
main_1_outputbuffer_06_phi_temp <= main_37_outputbuffer_1;
if (^reset !== 1'bX && ^(main_37_outputbuffer_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_outputbuffer_06_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %len.05 = phi i32 [ 0, %0 ], [ %40, %37 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_len_05_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_len_05_phi_temp"); $finish; end
end
/* main: %1*/
/*   %len.05 = phi i32 [ 0, %0 ], [ %40, %37 ]*/
if ((((cur_state == LEGUP_F_main_BB_37_21) & (memory_controller_waitrequest == 1'd0)) & (main_37_exitcond == 1'd0)))
begin
main_1_len_05_phi_temp <= main_37_40;
if (^reset !== 1'bX && ^(main_37_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_len_05_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %bufferstep.04 = phi i32 [ 1, %0 ], [ %39, %37 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_bufferstep_04_phi_temp <= 32'd1;
if (^reset !== 1'bX && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_bufferstep_04_phi_temp"); $finish; end
end
/* main: %1*/
/*   %bufferstep.04 = phi i32 [ 1, %0 ], [ %39, %37 ]*/
if ((((cur_state == LEGUP_F_main_BB_37_21) & (memory_controller_waitrequest == 1'd0)) & (main_37_exitcond == 1'd0)))
begin
main_1_bufferstep_04_phi_temp <= main_37_39;
if (^reset !== 1'bX && ^(main_37_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_bufferstep_04_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %step.03 = phi i32 [ 7, %0 ], [ %32, %37 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_step_03_phi_temp <= 32'd7;
if (^reset !== 1'bX && ^(32'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_step_03_phi_temp"); $finish; end
end
/* main: %1*/
/*   %step.03 = phi i32 [ 7, %0 ], [ %32, %37 ]*/
if ((((cur_state == LEGUP_F_main_BB_37_21) & (memory_controller_waitrequest == 1'd0)) & (main_37_exitcond == 1'd0)))
begin
main_1_step_03_phi_temp <= main_24_32_reg;
if (^reset !== 1'bX && ^(main_24_32_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_step_03_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %valpred.02 = phi i32 [ 0, %0 ], [ %valpred.2, %37 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_valpred_02_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_valpred_02_phi_temp"); $finish; end
end
/* main: %1*/
/*   %valpred.02 = phi i32 [ 0, %0 ], [ %valpred.2, %37 ]*/
if ((((cur_state == LEGUP_F_main_BB_37_21) & (memory_controller_waitrequest == 1'd0)) & (main_37_exitcond == 1'd0)))
begin
main_1_valpred_02_phi_temp <= main_24_valpred_2_reg;
if (^reset !== 1'bX && ^(main_24_valpred_2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_valpred_02_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %index.01 = phi i32 [ 0, %0 ], [ %index.2, %37 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_index_01_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_index_01_phi_temp"); $finish; end
end
/* main: %1*/
/*   %index.01 = phi i32 [ 0, %0 ], [ %index.2, %37 ]*/
if ((((cur_state == LEGUP_F_main_BB_37_21) & (memory_controller_waitrequest == 1'd0)) & (main_37_exitcond == 1'd0)))
begin
main_1_index_01_phi_temp <= main_24_index_2_reg;
if (^reset !== 1'bX && ^(main_24_index_2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_index_01_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %24*/
/*   %valpred.2 = phi i32 [ -32768, %23 ], [ %valpred.1, %21 ], [ 32767, %1 ]*/
if ((((cur_state == LEGUP_F_main_BB_1_9) & (memory_controller_waitrequest == 1'd0)) & (main_1_20 == 1'd1)))
begin
main_24_valpred_2_phi_temp <= 32'd32767;
if (^reset !== 1'bX && ^(32'd32767) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_valpred_2_phi_temp"); $finish; end
end
/* main: %24*/
/*   %valpred.2 = phi i32 [ -32768, %23 ], [ %valpred.1, %21 ], [ 32767, %1 ]*/
if ((((cur_state == LEGUP_F_main_BB_21_10) & (memory_controller_waitrequest == 1'd0)) & (main_21_22 == 1'd0)))
begin
main_24_valpred_2_phi_temp <= main_1_valpred_1_reg;
if (^reset !== 1'bX && ^(main_1_valpred_1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_valpred_2_phi_temp"); $finish; end
end
/* main: %24*/
/*   %valpred.2 = phi i32 [ -32768, %23 ], [ %valpred.1, %21 ], [ 32767, %1 ]*/
if (((cur_state == LEGUP_F_main_BB_23_11) & (memory_controller_waitrequest == 1'd0)))
begin
main_24_valpred_2_phi_temp <= -32'd32768;
if (^reset !== 1'bX && ^(-32'd32768) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_valpred_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %37*/
/*   %outputbuffer.1 = phi i32 [ %36, %34 ], [ %outputbuffer.06, %24 ]*/
if ((((cur_state == LEGUP_F_main_BB_24_19) & (memory_controller_waitrequest == 1'd0)) & (main_24_33_reg == 1'd0)))
begin
main_37_outputbuffer_1_phi_temp <= main_1_outputbuffer_06_reg;
if (^reset !== 1'bX && ^(main_1_outputbuffer_06_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_outputbuffer_1_phi_temp"); $finish; end
end
/* main: %37*/
/*   %outputbuffer.1 = phi i32 [ %36, %34 ], [ %outputbuffer.06, %24 ]*/
if (((cur_state == LEGUP_F_main_BB_34_20) & (memory_controller_waitrequest == 1'd0)))
begin
main_37_outputbuffer_1_phi_temp <= main_34_36;
if (^reset !== 1'bX && ^(main_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_outputbuffer_1_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %41*/
/*   ret i32 %outputbuffer.1*/
if ((cur_state == LEGUP_F_main_BB_41_22))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (^reset !== 1'bX && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %41*/
/*   ret i32 %outputbuffer.1*/
if ((cur_state == LEGUP_F_main_BB_41_22))
begin
return_val <= main_37_outputbuffer_1_reg;
if (^reset !== 1'bX && ^(main_37_outputbuffer_1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* main: %1*/
/*   %2 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %24*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_13))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %24*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_17))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* main: %1*/
/*   %2 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
memory_controller_address_a = main_1_scevgep;
end
/* main: %24*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_13))
begin
memory_controller_address_a = main_24_26;
end
/* main: %24*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_17))
begin
memory_controller_address_a = main_24_31;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %1*/
/*   %2 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %24*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_13))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %24*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_17))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* main: %1*/
/*   %2 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
memory_controller_size_a = 2'd2;
end
/* main: %24*/
/*   %27 = load i32* %26, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_13))
begin
memory_controller_size_a = 2'd2;
end
/* main: %24*/
/*   %32 = load i32* %31, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_17))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
end

endmodule 
`timescale 1 ns / 1 ns
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	q_a,
	q_b,
	byteena_a,
	byteena_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (1'd1),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.wren_a (wren_a),
	.wren_b (wren_b),
	.rden_a (1'd1),
	.rden_b (1'd1),
	.data_a (data_a),
	.data_b (data_b),
	.q_a (q_a),
	.q_b (q_b),
	.byteena_a (byteena_a),
	.byteena_b (byteena_b)
);

defparam
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone II",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0",
	altsyncram_component.width_byteena_a = width_be_a,
	altsyncram_component.width_byteena_b = width_be_b;


always @(*) begin
clk_wire = clk;
end

endmodule 
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [1:0] KEY;
    input [15:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire  clk;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
    hex_digits h7( .x(return_val_reg[31:28]), .hex_LEDs(HEX7));
    hex_digits h6( .x(return_val_reg[27:24]), .hex_LEDs(HEX6));
    hex_digits h5( .x(return_val_reg[23:20]), .hex_LEDs(HEX5));
    hex_digits h4( .x(return_val_reg[19:16]), .hex_LEDs(HEX4));
    hex_digits h3( .x(return_val_reg[15:12]), .hex_LEDs(HEX3));
    hex_digits h2( .x(return_val_reg[11:8]), .hex_LEDs(HEX2));
    hex_digits h1( .x(return_val_reg[7:4]), .hex_LEDs(HEX1));
    hex_digits h0( .x(return_val_reg[3:0]), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
