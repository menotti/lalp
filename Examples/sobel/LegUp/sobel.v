//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Tue Jan 22 02:17:46 2013
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Jul 18 16:32:45 2014
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 2
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
// @main.in = internal unnamed_addr constant [100 x i32] [i32 50, i32 65, i32 62, i32 83, i32 34, i32 45, i32 96, i32 67, i32 18, i32 29, i32 14, i32 14, i32 72, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 39, i32 20, i32 23, i32 82, i32 23, i32 20, i32 25, i32 26, i32 27, i32 28, i32 29, i32 54, i32 12, i32 72, i32 83, i32 34, i32 45, i32 96, i32 97, i32 18, i32 29, i32 40, i32 41, i32 42, i32 73, i32 44, i32 45, i32 46, i32 47, i32 48, i32 89, i32 52, i32 60, i32 82, i32 83, i32 34, i32 45, i32 96, i32 37, i32 18, i32 29, i32 60, i32 69, i32 62, i32 66, i32 64, i32 65, i32 64, i32 67, i32 68, i32 69, i32 53, i32 68, i32 72, i32 83, i32 34, i32 55, i32 96, i32 37, i32 18, i32 29, i32 84, i32 87, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 28, i32 89, i32 95, i32 96, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 38, i32 99], align 4

`define TAG_g_main_in `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_main_in_a {`TAG_g_main_in, 23'b0}
//   %out = alloca [100 x i32], align 4
`define TAG_main_0_out `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_main_0_out_a {`TAG_main_0_out, 23'b0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_out_a( memory_controller_out_a ),
	.memory_controller_out_b( memory_controller_out_b )
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] main_in_address_a;
reg [6:0] main_in_address_b;
reg main_in_write_enable_a;
reg main_in_write_enable_b;
reg [31:0] main_in_in_a;
reg [31:0] main_in_in_b;
wire [31:0] main_in_out_a;
wire [31:0] main_in_out_b;

// @main.in = internal unnamed_addr constant [100 x i32] [i32 50, i32 65, i32 62, i32 83, i32 34, i32 45, i32 96, i32 67, i32 18, i32 29, i32 14, i32 14, i32 72, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 39, i32 20, i32 23, i32 82, i32 23, i32 20, i32 25, i32 26, i32 27, i32 28, i32 29, i32 54, i32 12, i32 72, i32 83, i32 34, i32 45, i32 96, i32 97, i32 18, i32 29, i32 40, i32 41, i32 42, i32 73, i32 44, i32 45, i32 46, i32 47, i32 48, i32 89, i32 52, i32 60, i32 82, i32 83, i32 34, i32 45, i32 96, i32 37, i32 18, i32 29, i32 60, i32 69, i32 62, i32 66, i32 64, i32 65, i32 64, i32 67, i32 68, i32 69, i32 53, i32 68, i32 72, i32 83, i32 34, i32 55, i32 96, i32 37, i32 18, i32 29, i32 84, i32 87, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 28, i32 89, i32 95, i32 96, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 38, i32 99], align 4

ram_dual_port main_in (
	.clk( clk ),
	.address_a( main_in_address_a ),
	.address_b( main_in_address_b ),
	.wren_a( main_in_write_enable_a ),
	.wren_b( main_in_write_enable_b ),
	.data_a( main_in_in_a ),
	.data_b( main_in_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_in_out_a ),
	.q_b( main_in_out_b)
);
defparam main_in.width_a = 32;
defparam main_in.width_b = 32;
defparam main_in.widthad_a = 7;
defparam main_in.widthad_b = 7;
defparam main_in.width_be_a = 1;
defparam main_in.width_be_b = 1;
defparam main_in.numwords_a = 100;
defparam main_in.numwords_b = 100;
defparam main_in.init_file = "main_in.mif";


reg [6:0] main_0_out_address_a;
reg [6:0] main_0_out_address_b;
reg main_0_out_write_enable_a;
reg main_0_out_write_enable_b;
reg [31:0] main_0_out_in_a;
reg [31:0] main_0_out_in_b;
wire [31:0] main_0_out_out_a;
wire [31:0] main_0_out_out_b;

//   %out = alloca [100 x i32], align 4
ram_dual_port main_0_out (
	.clk( clk ),
	.address_a( main_0_out_address_a ),
	.address_b( main_0_out_address_b ),
	.wren_a( main_0_out_write_enable_a ),
	.wren_b( main_0_out_write_enable_b ),
	.data_a( main_0_out_in_a ),
	.data_b( main_0_out_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_out_out_a ),
	.q_b( main_0_out_out_b)
);
defparam main_0_out.width_a = 32;
defparam main_0_out.width_b = 32;
defparam main_0_out.widthad_a = 7;
defparam main_0_out.widthad_b = 7;
defparam main_0_out.width_be_a = 1;
defparam main_0_out.width_be_b = 1;
defparam main_0_out.numwords_a = 100;
defparam main_0_out.numwords_b = 100;

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_main_in_a;
assign select_main_in_a = (tag_a ==`TAG_g_main_in);
reg select_main_in_reg_a;
wire [31:0] memory_controller_main_in_out_a;
assign memory_controller_main_in_out_a = {32{ select_main_in_reg_a}} & main_in_out_a;

wire select_main_0_out_a;
assign select_main_0_out_a = (tag_a ==`TAG_main_0_out);
reg select_main_0_out_reg_a;
wire [31:0] memory_controller_main_0_out_out_a;
assign memory_controller_main_0_out_out_a = {32{ select_main_0_out_reg_a}} & main_0_out_out_a;

always @(*)
begin
	main_in_address_a = memory_controller_address_a [7-1+2:2] & {7{select_main_in_a}};
	main_in_write_enable_a = memory_controller_write_enable_a & select_main_in_a;
	main_in_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_0_out_address_a = memory_controller_address_a [7-1+2:2] & {7{select_main_0_out_a}};
	main_0_out_write_enable_a = memory_controller_write_enable_a & select_main_0_out_a;
	main_0_out_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_main_in_reg_a}} | {2{select_main_0_out_reg_a}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_main_in_out_a | memory_controller_main_0_out_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select_main_in_reg_a <= select_main_in_a;
select_main_0_out_reg_a <= select_main_0_out_a;
end

reg [2:0] select_not_struct_b;

wire select_main_in_b;
assign select_main_in_b = (tag_b ==`TAG_g_main_in);
reg select_main_in_reg_b;
wire [31:0] memory_controller_main_in_out_b;
assign memory_controller_main_in_out_b = {32{ select_main_in_reg_b}} & main_in_out_b;

wire select_main_0_out_b;
assign select_main_0_out_b = (tag_b ==`TAG_main_0_out);
reg select_main_0_out_reg_b;
wire [31:0] memory_controller_main_0_out_out_b;
assign memory_controller_main_0_out_out_b = {32{ select_main_0_out_reg_b}} & main_0_out_out_b;

always @(*)
begin
	main_in_address_b = memory_controller_address_b [7-1+2:2] & {7{select_main_in_b}};
	main_in_write_enable_b = memory_controller_write_enable_b & select_main_in_b;
	main_in_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_out_address_b = memory_controller_address_b [7-1+2:2] & {7{select_main_0_out_b}};
	main_0_out_write_enable_b = memory_controller_write_enable_b & select_main_0_out_b;
	main_0_out_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_main_in_reg_b}} | {2{select_main_0_out_reg_b}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_main_in_out_b | memory_controller_main_0_out_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select_main_in_reg_b <= select_main_in_b;
select_main_0_out_reg_b <= select_main_0_out_b;
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_main_BB_0_1 = 4'd1;
parameter [3:0] LEGUP_F_main_BB_1_2 = 4'd2;
parameter [3:0] LEGUP_F_main_BB_1_3 = 4'd3;
parameter [3:0] LEGUP_F_main_BB_1_4 = 4'd4;
parameter [3:0] LEGUP_F_main_BB_1_5 = 4'd5;
parameter [3:0] LEGUP_F_main_BB_1_6 = 4'd6;
parameter [3:0] LEGUP_F_main_BB_1_7 = 4'd7;
parameter [3:0] LEGUP_F_main_BB_1_8 = 4'd8;
parameter [3:0] LEGUP_F_main_BB_1_9 = 4'd9;
parameter [3:0] LEGUP_F_main_BB_23_10 = 4'd10;
parameter [3:0] LEGUP_F_main_BB_23_11 = 4'd11;
parameter [3:0] LEGUP_F_main_BB_23_12 = 4'd12;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [3:0] cur_state;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg [31:0] main_1_3;
reg [31:0] main_1_3_reg;
reg [31:0] main_1_4;
reg [31:0] main_1_i_07;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep8_reg;
reg [31:0] main_1_tmp9;
reg [31:0] main_1_tmp9_reg;
reg [31:0] main_1_tmp11;
reg [31:0] main_1_tmp11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep12;
reg [31:0] main_1_tmp13;
reg [31:0] main_1_tmp13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep14;
reg [31:0] main_1_tmp15;
reg [31:0] main_1_tmp15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep16_reg;
reg [31:0] main_1_tmp21;
reg [31:0] main_1_tmp21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep22_reg;
reg [31:0] main_1_5;
reg [31:0] main_1_5_reg;
reg [31:0] main_1_6;
reg [31:0] main_1_6_reg;
reg [31:0] main_1_7;
reg [31:0] main_1_7_reg;
reg [31:0] main_1_8;
reg [31:0] main_1_9;
reg [31:0] main_1_9_reg;
reg [31:0] main_1_tmp;
reg [31:0] main_1_tmp2;
reg [31:0] main_1_tmp2_reg;
reg [31:0] main_1_sum;
reg [31:0] main_1_10;
reg [31:0] main_1_10_reg;
reg [31:0] main_1_11;
reg [31:0] main_1_12;
reg [31:0] main_1_12_reg;
reg [31:0] main_1_13;
reg [31:0] main_1_tmp5;
reg [31:0] main_1_tmp6;
reg [31:0] main_1_14;
reg [31:0] main_1_14_reg;
reg [31:0] main_1_15;
reg [31:0] main_1_16;
reg [31:0] main_1_16_reg;
reg [31:0] main_1_17;
reg [31:0] main_1_17_reg;
reg  main_1_18;
reg  main_1_18_reg;
reg [31:0] main_1__;
reg  main_1_19;
reg [31:0] main_1_20;
reg [31:0] main_1_V_0;
reg [31:0] main_1_21;
reg [31:0] main_1_21_reg;
reg  main_1_22;
reg [31:0] main_1_O_0;
reg [31:0] main_1_O_0_reg;
reg  main_1_exitcond;
reg  main_1_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_23_24;
reg [31:0] main_23_25;
reg [31:0] main_1_2_phi_temp;
reg [31:0] main_1_3_phi_temp;
reg [31:0] main_1_4_phi_temp;
reg [31:0] main_1_i_07_phi_temp;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_6) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_1_9) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_23_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_23_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_1_9) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_23_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_23_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_23_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_23_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_23_11;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_23_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_23_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_23_11;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_23_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_23_11) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_23_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_23_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_23_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_23_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_23_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_23_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 4'd0;
if (^reset !== 1'bX && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %2 = phi i32 [ 23, %0 ], [ %9, %1 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2 = main_1_2_phi_temp;
end
/* main: %1*/
/*   %2 = phi i32 [ 23, %0 ], [ %9, %1 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_2 = main_1_2_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %2 = phi i32 [ 23, %0 ], [ %9, %1 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2_reg <= main_1_2;
if (^reset !== 1'bX && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %3 = phi i32 [ 20, %0 ], [ %2, %1 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_3 = main_1_3_phi_temp;
end
/* main: %1*/
/*   %3 = phi i32 [ 20, %0 ], [ %2, %1 ]*/
else if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_3 = main_1_3_phi_temp;
end
/* main: %1*/
/*   %3 = phi i32 [ 20, %0 ], [ %2, %1 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_3 = main_1_3_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %3 = phi i32 [ 20, %0 ], [ %2, %1 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_3_reg <= main_1_3;
if (^reset !== 1'bX && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
end
/* main: %1*/
/*   %3 = phi i32 [ 20, %0 ], [ %2, %1 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_3_reg <= main_1_3;
if (^reset !== 1'bX && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
end
/* main: %1*/
/*   %3 = phi i32 [ 20, %0 ], [ %2, %1 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_3_reg <= main_1_3;
if (^reset !== 1'bX && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
end
/* main: %1*/
/*   %3 = phi i32 [ 20, %0 ], [ %2, %1 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_3_reg <= main_1_3;
if (^reset !== 1'bX && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %4 = phi i32 [ 65, %0 ], [ %6, %1 ]*/
begin
main_1_4 = main_1_4_phi_temp;
end
end
always @(*) begin
/* main: %1*/
/*   %i.07 = phi i32 [ 0, %0 ], [ %tmp9, %1 ]*/
begin
main_1_i_07 = main_1_i_07_phi_temp;
end
end
always @(*) begin
/* main: %1*/
/*   %scevgep = getelementptr [100 x i32]* @main.in, i32 0, i32 %i.07*/
begin
main_1_scevgep = (`TAG_g_main_in_a + (4 * main_1_i_07));
end
end
always @(*) begin
/* main: %1*/
/*   %scevgep8 = getelementptr [100 x i32]* %out, i32 0, i32 %i.07*/
begin
main_1_scevgep8 = (`TAG_main_0_out_a + (4 * main_1_i_07));
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %scevgep8 = getelementptr [100 x i32]* %out, i32 0, i32 %i.07*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_scevgep8_reg <= main_1_scevgep8;
if (^reset !== 1'bX && ^(main_1_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep8_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %tmp9 = add i32 %i.07, 1*/
begin
main_1_tmp9 = (main_1_i_07 + 32'd1);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %tmp9 = add i32 %i.07, 1*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_tmp9_reg <= main_1_tmp9;
if (^reset !== 1'bX && ^(main_1_tmp9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tmp9_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %tmp11 = add i32 %i.07, 2*/
begin
main_1_tmp11 = (main_1_i_07 + 32'd2);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %tmp11 = add i32 %i.07, 2*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_tmp11_reg <= main_1_tmp11;
if (^reset !== 1'bX && ^(main_1_tmp11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tmp11_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %scevgep12 = getelementptr [100 x i32]* @main.in, i32 0, i32 %tmp11*/
begin
main_1_scevgep12 = (`TAG_g_main_in_a + (4 * main_1_tmp11_reg));
end
end
always @(*) begin
/* main: %1*/
/*   %tmp13 = add i32 %i.07, 10*/
begin
main_1_tmp13 = (main_1_i_07 + 32'd10);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %tmp13 = add i32 %i.07, 10*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_tmp13_reg <= main_1_tmp13;
if (^reset !== 1'bX && ^(main_1_tmp13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tmp13_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %scevgep14 = getelementptr [100 x i32]* @main.in, i32 0, i32 %tmp13*/
begin
main_1_scevgep14 = (`TAG_g_main_in_a + (4 * main_1_tmp13_reg));
end
end
always @(*) begin
/* main: %1*/
/*   %tmp15 = add i32 %i.07, 12*/
begin
main_1_tmp15 = (main_1_i_07 + 32'd12);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %tmp15 = add i32 %i.07, 12*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_tmp15_reg <= main_1_tmp15;
if (^reset !== 1'bX && ^(main_1_tmp15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tmp15_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %scevgep16 = getelementptr [100 x i32]* @main.in, i32 0, i32 %tmp15*/
begin
main_1_scevgep16 = (`TAG_g_main_in_a + (4 * main_1_tmp15_reg));
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %scevgep16 = getelementptr [100 x i32]* @main.in, i32 0, i32 %tmp15*/
if ((cur_state == LEGUP_F_main_BB_1_3))
begin
main_1_scevgep16_reg <= main_1_scevgep16;
if (^reset !== 1'bX && ^(main_1_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep16_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %tmp21 = add i32 %i.07, 22*/
begin
main_1_tmp21 = (main_1_i_07 + 32'd22);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %tmp21 = add i32 %i.07, 22*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_tmp21_reg <= main_1_tmp21;
if (^reset !== 1'bX && ^(main_1_tmp21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tmp21_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %scevgep22 = getelementptr [100 x i32]* @main.in, i32 0, i32 %tmp21*/
begin
main_1_scevgep22 = (`TAG_g_main_in_a + (4 * main_1_tmp21_reg));
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %scevgep22 = getelementptr [100 x i32]* @main.in, i32 0, i32 %tmp21*/
if ((cur_state == LEGUP_F_main_BB_1_3))
begin
main_1_scevgep22_reg <= main_1_scevgep22;
if (^reset !== 1'bX && ^(main_1_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep22_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %5 = load i32* %scevgep, align 4, !tbaa !0*/
begin
main_1_5 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %5 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
main_1_5_reg <= main_1_5;
if (^reset !== 1'bX && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %6 = load i32* %scevgep12, align 4, !tbaa !0*/
begin
main_1_6 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %6 = load i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_5))
begin
main_1_6_reg <= main_1_6;
if (^reset !== 1'bX && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %7 = load i32* %scevgep14, align 4, !tbaa !0*/
begin
main_1_7 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %7 = load i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_5))
begin
main_1_7_reg <= main_1_7;
if (^reset !== 1'bX && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %8 = load i32* %scevgep16, align 4, !tbaa !0*/
begin
main_1_8 = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* main: %1*/
/*   %9 = load i32* %scevgep22, align 4, !tbaa !0*/
begin
main_1_9 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %9 = load i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_6))
begin
main_1_9_reg <= main_1_9;
if (^reset !== 1'bX && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %tmp = sub i32 %2, %4*/
begin
main_1_tmp = (main_1_2 - main_1_4);
end
end
always @(*) begin
/* main: %1*/
/*   %tmp2 = shl i32 %tmp, 1*/
begin
main_1_tmp2 = (main_1_tmp <<< (32'd1 % 32));
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %tmp2 = shl i32 %tmp, 1*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_tmp2_reg <= main_1_tmp2;
if (^reset !== 1'bX && ^(main_1_tmp2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tmp2_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %sum = add i32 %6, %5*/
begin
main_1_sum = (main_1_6 + main_1_5_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %10 = sub i32 %3, %sum*/
begin
main_1_10 = (main_1_3_reg - main_1_sum);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %10 = sub i32 %3, %sum*/
if ((cur_state == LEGUP_F_main_BB_1_5))
begin
main_1_10_reg <= main_1_10;
if (^reset !== 1'bX && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %11 = add i32 %10, %9*/
begin
main_1_11 = (main_1_10_reg + main_1_9);
end
end
always @(*) begin
/* main: %1*/
/*   %12 = add i32 %11, %tmp2*/
begin
main_1_12 = (main_1_11 + main_1_tmp2_reg);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %12 = add i32 %11, %tmp2*/
if ((cur_state == LEGUP_F_main_BB_1_6))
begin
main_1_12_reg <= main_1_12;
if (^reset !== 1'bX && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %13 = sub i32 %6, %5*/
begin
main_1_13 = (main_1_6 - main_1_5_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %tmp5 = sub i32 %8, %7*/
begin
main_1_tmp5 = (main_1_8 - main_1_7_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %tmp6 = shl i32 %tmp5, 1*/
begin
main_1_tmp6 = (main_1_tmp5 <<< (32'd1 % 32));
end
end
always @(*) begin
/* main: %1*/
/*   %14 = sub i32 %13, %3*/
begin
main_1_14 = (main_1_13 - main_1_3_reg);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %14 = sub i32 %13, %3*/
if ((cur_state == LEGUP_F_main_BB_1_5))
begin
main_1_14_reg <= main_1_14;
if (^reset !== 1'bX && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %15 = add i32 %14, %tmp6*/
begin
main_1_15 = (main_1_14_reg + main_1_tmp6);
end
end
always @(*) begin
/* main: %1*/
/*   %16 = add i32 %15, %9*/
begin
main_1_16 = (main_1_15 + main_1_9);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %16 = add i32 %15, %9*/
if ((cur_state == LEGUP_F_main_BB_1_6))
begin
main_1_16_reg <= main_1_16;
if (^reset !== 1'bX && ^(main_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %17 = sub nsw i32 0, %12*/
begin
main_1_17 = (32'd0 - main_1_12);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %17 = sub nsw i32 0, %12*/
if ((cur_state == LEGUP_F_main_BB_1_6))
begin
main_1_17_reg <= main_1_17;
if (^reset !== 1'bX && ^(main_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_17_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %18 = icmp slt i32 %12, 0*/
begin
main_1_18 = ($signed(main_1_12) < $signed(32'd0));
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %18 = icmp slt i32 %12, 0*/
if ((cur_state == LEGUP_F_main_BB_1_6))
begin
main_1_18_reg <= main_1_18;
if (^reset !== 1'bX && ^(main_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_18_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %. = select i1 %18, i32 %17, i32 %12*/
begin
main_1__ = (main_1_18_reg ? main_1_17_reg : main_1_12_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %19 = icmp slt i32 %16, 0*/
begin
main_1_19 = ($signed(main_1_16_reg) < $signed(32'd0));
end
end
always @(*) begin
/* main: %1*/
/*   %20 = sub nsw i32 0, %16*/
begin
main_1_20 = (32'd0 - main_1_16_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %V.0 = select i1 %19, i32 %20, i32 %16*/
begin
main_1_V_0 = (main_1_19 ? main_1_20 : main_1_16_reg);
end
end
always @(*) begin
/* main: %1*/
/*   %21 = add nsw i32 %., %V.0*/
begin
main_1_21 = (main_1__ + main_1_V_0);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %21 = add nsw i32 %., %V.0*/
if ((cur_state == LEGUP_F_main_BB_1_7))
begin
main_1_21_reg <= main_1_21;
if (^reset !== 1'bX && ^(main_1_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %22 = icmp sgt i32 %21, 255*/
begin
main_1_22 = ($signed(main_1_21_reg) > $signed(32'd255));
end
end
always @(*) begin
/* main: %1*/
/*   %O.0 = select i1 %22, i32 255, i32 %21*/
begin
main_1_O_0 = (main_1_22 ? 32'd255 : main_1_21_reg);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %O.0 = select i1 %22, i32 255, i32 %21*/
if ((cur_state == LEGUP_F_main_BB_1_8))
begin
main_1_O_0_reg <= main_1_O_0;
if (^reset !== 1'bX && ^(main_1_O_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_O_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %exitcond = icmp eq i32 %tmp9, 78*/
begin
main_1_exitcond = (main_1_tmp9 == 32'd78);
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %exitcond = icmp eq i32 %tmp9, 78*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_exitcond_reg <= main_1_exitcond;
if (^reset !== 1'bX && ^(main_1_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* main: %23*/
/*   %24 = getelementptr inbounds [100 x i32]* %out, i32 0, i32 1*/
if (reset) begin main_23_24 = 0; end
begin
main_23_24 = (`TAG_main_0_out_a + (4 * 32'd1));
end
end
always @(*) begin
/* main: %23*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
begin
main_23_25 = memory_controller_out_a[31:0];
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %2 = phi i32 [ 23, %0 ], [ %9, %1 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_2_phi_temp <= 32'd23;
if (^reset !== 1'bX && ^(32'd23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_phi_temp"); $finish; end
end
/* main: %1*/
/*   %2 = phi i32 [ 23, %0 ], [ %9, %1 ]*/
if ((((cur_state == LEGUP_F_main_BB_1_9) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond_reg == 1'd0)))
begin
main_1_2_phi_temp <= main_1_9_reg;
if (^reset !== 1'bX && ^(main_1_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %3 = phi i32 [ 20, %0 ], [ %2, %1 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_3_phi_temp <= 32'd20;
if (^reset !== 1'bX && ^(32'd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_phi_temp"); $finish; end
end
/* main: %1*/
/*   %3 = phi i32 [ 20, %0 ], [ %2, %1 ]*/
if ((((cur_state == LEGUP_F_main_BB_1_9) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond_reg == 1'd0)))
begin
main_1_3_phi_temp <= main_1_2_reg;
if (^reset !== 1'bX && ^(main_1_2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %4 = phi i32 [ 65, %0 ], [ %6, %1 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_4_phi_temp <= 32'd65;
if (^reset !== 1'bX && ^(32'd65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_phi_temp"); $finish; end
end
/* main: %1*/
/*   %4 = phi i32 [ 65, %0 ], [ %6, %1 ]*/
if ((((cur_state == LEGUP_F_main_BB_1_9) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond_reg == 1'd0)))
begin
main_1_4_phi_temp <= main_1_6_reg;
if (^reset !== 1'bX && ^(main_1_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %i.07 = phi i32 [ 0, %0 ], [ %tmp9, %1 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_i_07_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i_07_phi_temp"); $finish; end
end
/* main: %1*/
/*   %i.07 = phi i32 [ 0, %0 ], [ %tmp9, %1 ]*/
if ((((cur_state == LEGUP_F_main_BB_1_9) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond_reg == 1'd0)))
begin
main_1_i_07_phi_temp <= main_1_tmp9_reg;
if (^reset !== 1'bX && ^(main_1_tmp9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i_07_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %23*/
/*   ret i32 %25*/
if ((cur_state == LEGUP_F_main_BB_23_12))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (^reset !== 1'bX && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %23*/
/*   ret i32 %25*/
if ((cur_state == LEGUP_F_main_BB_23_12))
begin
return_val <= main_23_25;
if (^reset !== 1'bX && ^(main_23_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* main: %1*/
/*   %5 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %1*/
/*   %6 = load i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_3))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %1*/
/*   %8 = load i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %1*/
/*   store i32 %O.0, i32* %scevgep8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_9))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %23*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_23_10))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* main: %1*/
/*   %5 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
memory_controller_address_a = main_1_scevgep;
end
/* main: %1*/
/*   %6 = load i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_3))
begin
memory_controller_address_a = main_1_scevgep12;
end
/* main: %1*/
/*   %8 = load i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
memory_controller_address_a = main_1_scevgep16_reg;
end
/* main: %1*/
/*   store i32 %O.0, i32* %scevgep8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_9))
begin
memory_controller_address_a = main_1_scevgep8_reg;
end
/* main: %23*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_23_10))
begin
memory_controller_address_a = main_23_24;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %1*/
/*   %5 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %1*/
/*   %6 = load i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_3))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %1*/
/*   %8 = load i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %1*/
/*   store i32 %O.0, i32* %scevgep8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_9))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %23*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_23_10))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* main: %1*/
/*   store i32 %O.0, i32* %scevgep8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_9))
begin
memory_controller_in_a = {main_1_O_0_reg};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* main: %1*/
/*   %5 = load i32* %scevgep, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
memory_controller_size_a = 2'd2;
end
/* main: %1*/
/*   %6 = load i32* %scevgep12, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_3))
begin
memory_controller_size_a = 2'd2;
end
/* main: %1*/
/*   %8 = load i32* %scevgep16, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
memory_controller_size_a = 2'd2;
end
/* main: %1*/
/*   store i32 %O.0, i32* %scevgep8, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_9))
begin
memory_controller_size_a = 2'd2;
end
/* main: %23*/
/*   %25 = load i32* %24, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_23_10))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* main: %1*/
/*   %7 = load i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_3))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %1*/
/*   %9 = load i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* main: %1*/
/*   %7 = load i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_3))
begin
memory_controller_address_b = main_1_scevgep14;
end
/* main: %1*/
/*   %9 = load i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
memory_controller_address_b = main_1_scevgep22_reg;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %1*/
/*   %7 = load i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_3))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %1*/
/*   %9 = load i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* main: %1*/
/*   %7 = load i32* %scevgep14, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_3))
begin
memory_controller_size_b = 2'd2;
end
/* main: %1*/
/*   %9 = load i32* %scevgep22, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_1_4))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	q_a,
	q_b,
	byteena_a,
	byteena_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (1'd1),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.wren_a (wren_a),
	.wren_b (wren_b),
	.rden_a (1'd1),
	.rden_b (1'd1),
	.data_a (data_a),
	.data_b (data_b),
	.q_a (q_a),
	.q_b (q_b),
	.byteena_a (byteena_a),
	.byteena_b (byteena_b)
);

defparam
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone II",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0",
	altsyncram_component.width_byteena_a = width_be_a,
	altsyncram_component.width_byteena_b = width_be_b;


always @(*) begin
clk_wire = clk;
end

endmodule 
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [1:0] KEY;
    input [15:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire  clk;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
    hex_digits h7( .x(return_val_reg[31:28]), .hex_LEDs(HEX7));
    hex_digits h6( .x(return_val_reg[27:24]), .hex_LEDs(HEX6));
    hex_digits h5( .x(return_val_reg[23:20]), .hex_LEDs(HEX5));
    hex_digits h4( .x(return_val_reg[19:16]), .hex_LEDs(HEX4));
    hex_digits h3( .x(return_val_reg[15:12]), .hex_LEDs(HEX3));
    hex_digits h2( .x(return_val_reg[11:8]), .hex_LEDs(HEX2));
    hex_digits h1( .x(return_val_reg[7:4]), .hex_LEDs(HEX1));
    hex_digits h0( .x(return_val_reg[3:0]), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
