//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 3.0 (http://legup.org)
// Compiled: Mon Jan 21 17:30:53 2013
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Wed May 22 09:21:51 2013
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
`define TAG_NULL `MEMORY_CONTROLLER_TAG_SIZE'd0
`define TAG_PROCESSOR `MEMORY_CONTROLLER_TAG_SIZE'd1
//   %x = alloca [2048 x i32], align 4
`define TAG_main_0_x `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_main_0_x_a {`TAG_main_0_x, 23'b0}
//   %y = alloca [2048 x i32], align 4
`define TAG_main_0_y `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_main_0_y_a {`TAG_main_0_y, 23'b0}
//   %z = alloca [2048 x i32], align 4
`define TAG_main_0_z `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_main_0_z_a {`TAG_main_0_z, 23'b0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

module top
	(
		clk,
		reset,
		start,
		finish,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

assign memory_controller_waitrequest = 0;

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_out_a( memory_controller_out_a ),
	.memory_controller_out_b( memory_controller_out_b )
);

endmodule
`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);


input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [10:0] main_0_z_address_a;
reg [10:0] main_0_z_address_b;
reg main_0_z_write_enable_a;
reg main_0_z_write_enable_b;
reg [31:0] main_0_z_in_a;
reg [31:0] main_0_z_in_b;
wire [31:0] main_0_z_out_a;
wire [31:0] main_0_z_out_b;

//   %z = alloca [2048 x i32], align 4
ram_dual_port main_0_z (
	.clk( clk ),
	.address_a( main_0_z_address_a ),
	.address_b( main_0_z_address_b ),
	.wren_a( main_0_z_write_enable_a ),
	.wren_b( main_0_z_write_enable_b ),
	.data_a( main_0_z_in_a ),
	.data_b( main_0_z_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_z_out_a ),
	.q_b( main_0_z_out_b)
);
defparam main_0_z.width_a = 32;
defparam main_0_z.width_b = 32;
defparam main_0_z.widthad_a = 11;
defparam main_0_z.widthad_b = 11;
defparam main_0_z.width_be_a = 1;
defparam main_0_z.width_be_b = 1;
defparam main_0_z.numwords_a = 2048;
defparam main_0_z.numwords_b = 2048;


reg [10:0] main_0_x_address_a;
reg [10:0] main_0_x_address_b;
reg main_0_x_write_enable_a;
reg main_0_x_write_enable_b;
reg [31:0] main_0_x_in_a;
reg [31:0] main_0_x_in_b;
wire [31:0] main_0_x_out_a;
wire [31:0] main_0_x_out_b;

//   %x = alloca [2048 x i32], align 4
ram_dual_port main_0_x (
	.clk( clk ),
	.address_a( main_0_x_address_a ),
	.address_b( main_0_x_address_b ),
	.wren_a( main_0_x_write_enable_a ),
	.wren_b( main_0_x_write_enable_b ),
	.data_a( main_0_x_in_a ),
	.data_b( main_0_x_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_x_out_a ),
	.q_b( main_0_x_out_b)
);
defparam main_0_x.width_a = 32;
defparam main_0_x.width_b = 32;
defparam main_0_x.widthad_a = 11;
defparam main_0_x.widthad_b = 11;
defparam main_0_x.width_be_a = 1;
defparam main_0_x.width_be_b = 1;
defparam main_0_x.numwords_a = 2048;
defparam main_0_x.numwords_b = 2048;


reg [10:0] main_0_y_address_a;
reg [10:0] main_0_y_address_b;
reg main_0_y_write_enable_a;
reg main_0_y_write_enable_b;
reg [31:0] main_0_y_in_a;
reg [31:0] main_0_y_in_b;
wire [31:0] main_0_y_out_a;
wire [31:0] main_0_y_out_b;

//   %y = alloca [2048 x i32], align 4
ram_dual_port main_0_y (
	.clk( clk ),
	.address_a( main_0_y_address_a ),
	.address_b( main_0_y_address_b ),
	.wren_a( main_0_y_write_enable_a ),
	.wren_b( main_0_y_write_enable_b ),
	.data_a( main_0_y_in_a ),
	.data_b( main_0_y_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_y_out_a ),
	.q_b( main_0_y_out_b)
);
defparam main_0_y.width_a = 32;
defparam main_0_y.width_b = 32;
defparam main_0_y.widthad_a = 11;
defparam main_0_y.widthad_b = 11;
defparam main_0_y.width_be_a = 1;
defparam main_0_y.width_be_b = 1;
defparam main_0_y.numwords_a = 2048;
defparam main_0_y.numwords_b = 2048;

wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_main_0_z_a;
assign select_main_0_z_a = (tag_a ==`TAG_main_0_z);
reg select_main_0_z_reg_a;
wire [31:0] memory_controller_main_0_z_out_a;
assign memory_controller_main_0_z_out_a = {32{ select_main_0_z_reg_a}} & main_0_z_out_a;

wire select_main_0_x_a;
assign select_main_0_x_a = (tag_a ==`TAG_main_0_x);
reg select_main_0_x_reg_a;
wire [31:0] memory_controller_main_0_x_out_a;
assign memory_controller_main_0_x_out_a = {32{ select_main_0_x_reg_a}} & main_0_x_out_a;

wire select_main_0_y_a;
assign select_main_0_y_a = (tag_a ==`TAG_main_0_y);
reg select_main_0_y_reg_a;
wire [31:0] memory_controller_main_0_y_out_a;
assign memory_controller_main_0_y_out_a = {32{ select_main_0_y_reg_a}} & main_0_y_out_a;

always @(*)
begin
	main_0_z_address_a = memory_controller_address_a [11-1+2:2] & {11{select_main_0_z_a}};
	main_0_z_write_enable_a = memory_controller_write_enable_a & select_main_0_z_a;
	main_0_z_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_0_x_address_a = memory_controller_address_a [11-1+2:2] & {11{select_main_0_x_a}};
	main_0_x_write_enable_a = memory_controller_write_enable_a & select_main_0_x_a;
	main_0_x_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_0_y_address_a = memory_controller_address_a [11-1+2:2] & {11{select_main_0_y_a}};
	main_0_y_write_enable_a = memory_controller_write_enable_a & select_main_0_y_a;
	main_0_y_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_main_0_z_reg_a}} | {2{select_main_0_x_reg_a}} | {2{select_main_0_y_reg_a}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_main_0_z_out_a | memory_controller_main_0_x_out_a | memory_controller_main_0_y_out_a;
end

always @(posedge clk)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
select_main_0_z_reg_a <= select_main_0_z_a;
select_main_0_x_reg_a <= select_main_0_x_a;
select_main_0_y_reg_a <= select_main_0_y_a;
end

reg [2:0] select_not_struct_b;

wire select_main_0_z_b;
assign select_main_0_z_b = (tag_b ==`TAG_main_0_z);
reg select_main_0_z_reg_b;
wire [31:0] memory_controller_main_0_z_out_b;
assign memory_controller_main_0_z_out_b = {32{ select_main_0_z_reg_b}} & main_0_z_out_b;

wire select_main_0_x_b;
assign select_main_0_x_b = (tag_b ==`TAG_main_0_x);
reg select_main_0_x_reg_b;
wire [31:0] memory_controller_main_0_x_out_b;
assign memory_controller_main_0_x_out_b = {32{ select_main_0_x_reg_b}} & main_0_x_out_b;

wire select_main_0_y_b;
assign select_main_0_y_b = (tag_b ==`TAG_main_0_y);
reg select_main_0_y_reg_b;
wire [31:0] memory_controller_main_0_y_out_b;
assign memory_controller_main_0_y_out_b = {32{ select_main_0_y_reg_b}} & main_0_y_out_b;

always @(*)
begin
	main_0_z_address_b = memory_controller_address_b [11-1+2:2] & {11{select_main_0_z_b}};
	main_0_z_write_enable_b = memory_controller_write_enable_b & select_main_0_z_b;
	main_0_z_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_x_address_b = memory_controller_address_b [11-1+2:2] & {11{select_main_0_x_b}};
	main_0_x_write_enable_b = memory_controller_write_enable_b & select_main_0_x_b;
	main_0_x_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_y_address_b = memory_controller_address_b [11-1+2:2] & {11{select_main_0_y_b}};
	main_0_y_write_enable_b = memory_controller_write_enable_b & select_main_0_y_b;
	main_0_y_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_main_0_z_reg_b}} | {2{select_main_0_x_reg_b}} | {2{select_main_0_y_reg_b}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_main_0_z_out_b | memory_controller_main_0_x_out_b | memory_controller_main_0_y_out_b;
end

always @(posedge clk)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
select_main_0_z_reg_b <= select_main_0_z_b;
select_main_0_x_reg_b <= select_main_0_x_b;
select_main_0_y_reg_b <= select_main_0_y_b;
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	return_val,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	memory_controller_waitrequest
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_main_BB_0_1 = 5'd1;
parameter [4:0] LEGUP_F_main_BB_1_2 = 5'd2;
parameter [4:0] LEGUP_F_main_BB_4_3 = 5'd3;
parameter [4:0] LEGUP_F_main_BB_legup_memset_4_exit_4 = 5'd4;
parameter [4:0] LEGUP_F_main_BB_legup_memset_4_exit_5 = 5'd5;
parameter [4:0] LEGUP_F_main_BB_10_6 = 5'd6;
parameter [4:0] LEGUP_F_main_BB_13_7 = 5'd7;
parameter [4:0] LEGUP_F_main_BB_legup_memset_4_exit3_8 = 5'd8;
parameter [4:0] LEGUP_F_main_BB_legup_memset_4_exit3_9 = 5'd9;
parameter [4:0] LEGUP_F_main_BB_19_10 = 5'd10;
parameter [4:0] LEGUP_F_main_BB_19_11 = 5'd11;
parameter [4:0] LEGUP_F_main_BB___crit_edge_12 = 5'd12;
parameter [4:0] LEGUP_F_main_BB___crit_edge_13 = 5'd13;
parameter [4:0] LEGUP_F_main_BB___crit_edge_14 = 5'd14;
parameter [4:0] LEGUP_F_main_BB_24_15 = 5'd15;
parameter [4:0] LEGUP_F_main_BB_24_16 = 5'd16;
parameter [4:0] LEGUP_F_main_BB_24_17 = 5'd17;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
output reg [31:0] return_val;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input  memory_controller_waitrequest;
reg [4:0] cur_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_tmp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_0_tmp_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_s_i_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_s_i_0_reg;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg  main_1_3;
reg [31:0] main_4_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_tmp1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit_tmp1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_s_i2_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_s_i2_0_reg;
reg [31:0] main_10_11;
reg [31:0] main_10_11_reg;
reg  main_10_12;
reg [31:0] main_13_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_13_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit3_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit3_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit3_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit3_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4_exit3_18_reg;
reg [31:0] main_19_20;
reg [31:0] main_19_21;
reg [31:0] main_19_i_01;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_19_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_19_scevgep3_reg;
reg [31:0] main_19_22;
reg [31:0] main_19_22_reg;
reg [31:0] main_19_23;
reg [31:0] main_19_23_reg;
reg  main_19_exitcond;
reg  main_19_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___crit_edge_scevgep_phi_trans_insert;
reg [31:0] main___crit_edge__pre;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main___crit_edge_scevgep2_phi_trans_insert;
reg [31:0] main___crit_edge__pre4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_24_25;
reg [31:0] main_24_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_s_i_0_phi_temp;
reg [31:0] main_1_2_phi_temp;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_s_i2_0_phi_temp;
reg [31:0] main_10_11_phi_temp;
reg [31:0] main_19_20_phi_temp;
reg [31:0] main_19_21_phi_temp;
reg [31:0] main_19_i_01_phi_temp;


always @(posedge clk) begin
if (((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_0_1;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (main_1_3 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_4_exit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_1_2) & (memory_controller_waitrequest == 1'd0)) & (main_1_3 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_4_3;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_1_2;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_4;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_4_exit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_4_exit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit_5;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_4_exit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_10_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_10_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_10_6) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_10_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_10_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_10_6) & (memory_controller_waitrequest == 1'd0)) & (main_10_12 == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit3_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_4_exit3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_10_6) & (memory_controller_waitrequest == 1'd0)) & (main_10_12 == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_13_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_13_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_13_7) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_13_7;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_13_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_13_7) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_10_6;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_10_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit3_8;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_4_exit3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit3_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_4_exit3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_legup_memset_4_exit3_9;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_legup_memset_4_exit3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_19_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_19_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_19_10) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_19_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_19_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_19_10) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_19_11;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_19_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_19_11) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_19_11;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_19_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_19_11) & (memory_controller_waitrequest == 1'd0)) & (main_19_exitcond_reg == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_15;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((((cur_state == LEGUP_F_main_BB_19_11) & (memory_controller_waitrequest == 1'd0)) & (main_19_exitcond_reg == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB___crit_edge_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___crit_edge_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___crit_edge_12) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB___crit_edge_12;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___crit_edge_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___crit_edge_12) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB___crit_edge_13;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___crit_edge_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___crit_edge_13) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB___crit_edge_13;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___crit_edge_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___crit_edge_13) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB___crit_edge_14;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___crit_edge_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___crit_edge_14) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB___crit_edge_14;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB___crit_edge_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB___crit_edge_14) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_19_10;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_19_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_15) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_15;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_15) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_24_16;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_16) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_16;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_16) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_F_main_BB_24_17;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_17) & (memory_controller_waitrequest == 1'd1)))
begin
cur_state <= LEGUP_F_main_BB_24_17;
if (^reset !== 1'bX && ^(LEGUP_F_main_BB_24_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if (((cur_state == LEGUP_F_main_BB_24_17) & (memory_controller_waitrequest == 1'd0)))
begin
cur_state <= LEGUP_0;
if (^reset !== 1'bX && ^(LEGUP_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
if ((reset == 1'd1))
begin
cur_state <= 5'd0;
if (^reset !== 1'bX && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to cur_state"); $finish; end
end
end
always @(*) begin
/* main: %0*/
/*   %tmp = getelementptr inbounds [2048 x i32]* %x, i32 0, i32 0*/
if (reset) begin main_0_tmp = 0; end
begin
main_0_tmp = `TAG_main_0_x_a;
end
end
always @(posedge clk) begin
/* main: %0*/
/*   %tmp = getelementptr inbounds [2048 x i32]* %x, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_0_1))
begin
main_0_tmp_reg <= main_0_tmp;
if (^reset !== 1'bX && ^(main_0_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_0_tmp_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %s.i.0 = phi i32* [ %tmp, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0 = main_1_s_i_0_phi_temp;
end
/* main: %1*/
/*   %s.i.0 = phi i32* [ %tmp, %0 ], [ %6, %4 ]*/
else if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0 = main_1_s_i_0_phi_temp;
end
/* main: %1*/
/*   %s.i.0 = phi i32* [ %tmp, %0 ], [ %6, %4 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_s_i_0 = main_1_s_i_0_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %s.i.0 = phi i32* [ %tmp, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0_reg <= main_1_s_i_0;
if (^reset !== 1'bX && ^(main_1_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %s.i.0 = phi i32* [ %tmp, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0_reg <= main_1_s_i_0;
if (^reset !== 1'bX && ^(main_1_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %s.i.0 = phi i32* [ %tmp, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0_reg <= main_1_s_i_0;
if (^reset !== 1'bX && ^(main_1_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_reg"); $finish; end
end
/* main: %1*/
/*   %s.i.0 = phi i32* [ %tmp, %0 ], [ %6, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_s_i_0_reg <= main_1_s_i_0;
if (^reset !== 1'bX && ^(main_1_s_i_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %2 = phi i32 [ 2048, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2 = main_1_2_phi_temp;
end
/* main: %1*/
/*   %2 = phi i32 [ 2048, %0 ], [ %5, %4 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_1_2)) */
begin
main_1_2 = main_1_2_phi_temp;
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %2 = phi i32 [ 2048, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2_reg <= main_1_2;
if (^reset !== 1'bX && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
end
/* main: %1*/
/*   %2 = phi i32 [ 2048, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2_reg <= main_1_2;
if (^reset !== 1'bX && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
end
/* main: %1*/
/*   %2 = phi i32 [ 2048, %0 ], [ %5, %4 ]*/
if ((cur_state == LEGUP_F_main_BB_1_2))
begin
main_1_2_reg <= main_1_2;
if (^reset !== 1'bX && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
end
end
always @(*) begin
/* main: %1*/
/*   %3 = icmp eq i32 %2, 0*/
begin
main_1_3 = (main_1_2 == 32'd0);
end
end
always @(*) begin
/* main: %4*/
/*   %5 = add i32 %2, -1*/
begin
main_4_5 = (main_1_2_reg + -32'd1);
end
end
always @(*) begin
/* main: %4*/
/*   %6 = getelementptr inbounds i32* %s.i.0, i32 1*/
begin
main_4_6 = (main_1_s_i_0_reg + (4 * 32'd1));
end
end
always @(*) begin
/* main: %legup_memset_4.exit*/
/*   %7 = getelementptr [2048 x i32]* %x, i32 0, i32 1*/
if (reset) begin main_legup_memset_4_exit_7 = 0; end
begin
main_legup_memset_4_exit_7 = (`TAG_main_0_x_a + (4 * 32'd1));
end
end
always @(*) begin
/* main: %legup_memset_4.exit*/
/*   %8 = getelementptr [2048 x i32]* %x, i32 0, i32 2*/
if (reset) begin main_legup_memset_4_exit_8 = 0; end
begin
main_legup_memset_4_exit_8 = (`TAG_main_0_x_a + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %legup_memset_4.exit*/
/*   %8 = getelementptr [2048 x i32]* %x, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
main_legup_memset_4_exit_8_reg <= main_legup_memset_4_exit_8;
if (^reset !== 1'bX && ^(main_legup_memset_4_exit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_exit_8_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_4.exit*/
/*   %9 = getelementptr [2048 x i32]* %x, i32 0, i32 2047*/
if (reset) begin main_legup_memset_4_exit_9 = 0; end
begin
main_legup_memset_4_exit_9 = (`TAG_main_0_x_a + (4 * 32'd2047));
end
end
always @(posedge clk) begin
/* main: %legup_memset_4.exit*/
/*   %9 = getelementptr [2048 x i32]* %x, i32 0, i32 2047*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
main_legup_memset_4_exit_9_reg <= main_legup_memset_4_exit_9;
if (^reset !== 1'bX && ^(main_legup_memset_4_exit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_exit_9_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_4.exit*/
/*   %tmp1 = getelementptr inbounds [2048 x i32]* %y, i32 0, i32 0*/
if (reset) begin main_legup_memset_4_exit_tmp1 = 0; end
begin
main_legup_memset_4_exit_tmp1 = `TAG_main_0_y_a;
end
end
always @(posedge clk) begin
/* main: %legup_memset_4.exit*/
/*   %tmp1 = getelementptr inbounds [2048 x i32]* %y, i32 0, i32 0*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
main_legup_memset_4_exit_tmp1_reg <= main_legup_memset_4_exit_tmp1;
if (^reset !== 1'bX && ^(main_legup_memset_4_exit_tmp1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_exit_tmp1_reg"); $finish; end
end
end
always @(*) begin
/* main: %10*/
/*   %s.i2.0 = phi i32* [ %tmp1, %legup_memset_4.exit ], [ %15, %13 ]*/
if ((cur_state == LEGUP_F_main_BB_10_6))
begin
main_10_s_i2_0 = main_10_s_i2_0_phi_temp;
end
/* main: %10*/
/*   %s.i2.0 = phi i32* [ %tmp1, %legup_memset_4.exit ], [ %15, %13 ]*/
else if ((cur_state == LEGUP_F_main_BB_10_6))
begin
main_10_s_i2_0 = main_10_s_i2_0_phi_temp;
end
/* main: %10*/
/*   %s.i2.0 = phi i32* [ %tmp1, %legup_memset_4.exit ], [ %15, %13 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_10_6)) */
begin
main_10_s_i2_0 = main_10_s_i2_0_phi_temp;
end
end
always @(posedge clk) begin
/* main: %10*/
/*   %s.i2.0 = phi i32* [ %tmp1, %legup_memset_4.exit ], [ %15, %13 ]*/
if ((cur_state == LEGUP_F_main_BB_10_6))
begin
main_10_s_i2_0_reg <= main_10_s_i2_0;
if (^reset !== 1'bX && ^(main_10_s_i2_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_s_i2_0_reg"); $finish; end
end
/* main: %10*/
/*   %s.i2.0 = phi i32* [ %tmp1, %legup_memset_4.exit ], [ %15, %13 ]*/
if ((cur_state == LEGUP_F_main_BB_10_6))
begin
main_10_s_i2_0_reg <= main_10_s_i2_0;
if (^reset !== 1'bX && ^(main_10_s_i2_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_s_i2_0_reg"); $finish; end
end
/* main: %10*/
/*   %s.i2.0 = phi i32* [ %tmp1, %legup_memset_4.exit ], [ %15, %13 ]*/
if ((cur_state == LEGUP_F_main_BB_10_6))
begin
main_10_s_i2_0_reg <= main_10_s_i2_0;
if (^reset !== 1'bX && ^(main_10_s_i2_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_s_i2_0_reg"); $finish; end
end
/* main: %10*/
/*   %s.i2.0 = phi i32* [ %tmp1, %legup_memset_4.exit ], [ %15, %13 ]*/
if ((cur_state == LEGUP_F_main_BB_10_6))
begin
main_10_s_i2_0_reg <= main_10_s_i2_0;
if (^reset !== 1'bX && ^(main_10_s_i2_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_s_i2_0_reg"); $finish; end
end
end
always @(*) begin
/* main: %10*/
/*   %11 = phi i32 [ 2048, %legup_memset_4.exit ], [ %14, %13 ]*/
if ((cur_state == LEGUP_F_main_BB_10_6))
begin
main_10_11 = main_10_11_phi_temp;
end
/* main: %10*/
/*   %11 = phi i32 [ 2048, %legup_memset_4.exit ], [ %14, %13 ]*/
else /* if ((cur_state == LEGUP_F_main_BB_10_6)) */
begin
main_10_11 = main_10_11_phi_temp;
end
end
always @(posedge clk) begin
/* main: %10*/
/*   %11 = phi i32 [ 2048, %legup_memset_4.exit ], [ %14, %13 ]*/
if ((cur_state == LEGUP_F_main_BB_10_6))
begin
main_10_11_reg <= main_10_11;
if (^reset !== 1'bX && ^(main_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_11_reg"); $finish; end
end
/* main: %10*/
/*   %11 = phi i32 [ 2048, %legup_memset_4.exit ], [ %14, %13 ]*/
if ((cur_state == LEGUP_F_main_BB_10_6))
begin
main_10_11_reg <= main_10_11;
if (^reset !== 1'bX && ^(main_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_11_reg"); $finish; end
end
/* main: %10*/
/*   %11 = phi i32 [ 2048, %legup_memset_4.exit ], [ %14, %13 ]*/
if ((cur_state == LEGUP_F_main_BB_10_6))
begin
main_10_11_reg <= main_10_11;
if (^reset !== 1'bX && ^(main_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_11_reg"); $finish; end
end
end
always @(*) begin
/* main: %10*/
/*   %12 = icmp eq i32 %11, 0*/
begin
main_10_12 = (main_10_11 == 32'd0);
end
end
always @(*) begin
/* main: %13*/
/*   %14 = add i32 %11, -1*/
begin
main_13_14 = (main_10_11_reg + -32'd1);
end
end
always @(*) begin
/* main: %13*/
/*   %15 = getelementptr inbounds i32* %s.i2.0, i32 1*/
begin
main_13_15 = (main_10_s_i2_0_reg + (4 * 32'd1));
end
end
always @(*) begin
/* main: %legup_memset_4.exit3*/
/*   %16 = getelementptr [2048 x i32]* %y, i32 0, i32 1*/
if (reset) begin main_legup_memset_4_exit3_16 = 0; end
begin
main_legup_memset_4_exit3_16 = (`TAG_main_0_y_a + (4 * 32'd1));
end
end
always @(*) begin
/* main: %legup_memset_4.exit3*/
/*   %17 = getelementptr [2048 x i32]* %y, i32 0, i32 2*/
if (reset) begin main_legup_memset_4_exit3_17 = 0; end
begin
main_legup_memset_4_exit3_17 = (`TAG_main_0_y_a + (4 * 32'd2));
end
end
always @(posedge clk) begin
/* main: %legup_memset_4.exit3*/
/*   %17 = getelementptr [2048 x i32]* %y, i32 0, i32 2*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
main_legup_memset_4_exit3_17_reg <= main_legup_memset_4_exit3_17;
if (^reset !== 1'bX && ^(main_legup_memset_4_exit3_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_exit3_17_reg"); $finish; end
end
end
always @(*) begin
/* main: %legup_memset_4.exit3*/
/*   %18 = getelementptr [2048 x i32]* %y, i32 0, i32 2047*/
if (reset) begin main_legup_memset_4_exit3_18 = 0; end
begin
main_legup_memset_4_exit3_18 = (`TAG_main_0_y_a + (4 * 32'd2047));
end
end
always @(posedge clk) begin
/* main: %legup_memset_4.exit3*/
/*   %18 = getelementptr [2048 x i32]* %y, i32 0, i32 2047*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
main_legup_memset_4_exit3_18_reg <= main_legup_memset_4_exit3_18;
if (^reset !== 1'bX && ^(main_legup_memset_4_exit3_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4_exit3_18_reg"); $finish; end
end
end
always @(*) begin
/* main: %19*/
/*   %20 = phi i32 [ 6, %legup_memset_4.exit3 ], [ %.pre4, %._crit_edge ]*/
begin
main_19_20 = main_19_20_phi_temp;
end
end
always @(*) begin
/* main: %19*/
/*   %21 = phi i32 [ 1, %legup_memset_4.exit3 ], [ %.pre, %._crit_edge ]*/
begin
main_19_21 = main_19_21_phi_temp;
end
end
always @(*) begin
/* main: %19*/
/*   %i.01 = phi i32 [ 0, %legup_memset_4.exit3 ], [ %23, %._crit_edge ]*/
begin
main_19_i_01 = main_19_i_01_phi_temp;
end
end
always @(*) begin
/* main: %19*/
/*   %scevgep3 = getelementptr [2048 x i32]* %z, i32 0, i32 %i.01*/
begin
main_19_scevgep3 = (`TAG_main_0_z_a + (4 * main_19_i_01));
end
end
always @(posedge clk) begin
/* main: %19*/
/*   %scevgep3 = getelementptr [2048 x i32]* %z, i32 0, i32 %i.01*/
if ((cur_state == LEGUP_F_main_BB_19_10))
begin
main_19_scevgep3_reg <= main_19_scevgep3;
if (^reset !== 1'bX && ^(main_19_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_scevgep3_reg"); $finish; end
end
end
always @(*) begin
/* main: %19*/
/*   %22 = add nsw i32 %20, %21*/
begin
main_19_22 = (main_19_20 + main_19_21);
end
end
always @(posedge clk) begin
/* main: %19*/
/*   %22 = add nsw i32 %20, %21*/
if ((cur_state == LEGUP_F_main_BB_19_10))
begin
main_19_22_reg <= main_19_22;
if (^reset !== 1'bX && ^(main_19_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_22_reg"); $finish; end
end
end
always @(*) begin
/* main: %19*/
/*   %23 = add nsw i32 %i.01, 1*/
begin
main_19_23 = (main_19_i_01 + 32'd1);
end
end
always @(posedge clk) begin
/* main: %19*/
/*   %23 = add nsw i32 %i.01, 1*/
if ((cur_state == LEGUP_F_main_BB_19_10))
begin
main_19_23_reg <= main_19_23;
if (^reset !== 1'bX && ^(main_19_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_23_reg"); $finish; end
end
end
always @(*) begin
/* main: %19*/
/*   %exitcond = icmp eq i32 %23, 2048*/
begin
main_19_exitcond = (main_19_23 == 32'd2048);
end
end
always @(posedge clk) begin
/* main: %19*/
/*   %exitcond = icmp eq i32 %23, 2048*/
if ((cur_state == LEGUP_F_main_BB_19_10))
begin
main_19_exitcond_reg <= main_19_exitcond;
if (^reset !== 1'bX && ^(main_19_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_exitcond_reg"); $finish; end
end
end
always @(*) begin
/* main: %._crit_edge*/
/*   %scevgep.phi.trans.insert = getelementptr [2048 x i32]* %x, i32 0, i32 %23*/
begin
main___crit_edge_scevgep_phi_trans_insert = (`TAG_main_0_x_a + (4 * main_19_23_reg));
end
end
always @(*) begin
/* main: %._crit_edge*/
/*   %.pre = load i32* %scevgep.phi.trans.insert, align 4, !tbaa !0*/
begin
main___crit_edge__pre = memory_controller_out_a[31:0];
end
end
always @(*) begin
/* main: %._crit_edge*/
/*   %scevgep2.phi.trans.insert = getelementptr [2048 x i32]* %y, i32 0, i32 %23*/
begin
main___crit_edge_scevgep2_phi_trans_insert = (`TAG_main_0_y_a + (4 * main_19_23_reg));
end
end
always @(*) begin
/* main: %._crit_edge*/
/*   %.pre4 = load i32* %scevgep2.phi.trans.insert, align 4, !tbaa !0*/
begin
main___crit_edge__pre4 = memory_controller_out_b[31:0];
end
end
always @(*) begin
/* main: %24*/
/*   %25 = getelementptr inbounds [2048 x i32]* %z, i32 0, i32 0*/
if (reset) begin main_24_25 = 0; end
begin
main_24_25 = `TAG_main_0_z_a;
end
end
always @(*) begin
/* main: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
begin
main_24_26 = memory_controller_out_b[31:0];
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %s.i.0 = phi i32* [ %tmp, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_s_i_0_phi_temp <= main_0_tmp;
if (^reset !== 1'bX && ^(main_0_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_phi_temp"); $finish; end
end
/* main: %1*/
/*   %s.i.0 = phi i32* [ %tmp, %0 ], [ %6, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_s_i_0_phi_temp <= main_4_6;
if (^reset !== 1'bX && ^(main_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_s_i_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %1*/
/*   %2 = phi i32 [ 2048, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_0_1) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_2_phi_temp <= 32'd2048;
if (^reset !== 1'bX && ^(32'd2048) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_phi_temp"); $finish; end
end
/* main: %1*/
/*   %2 = phi i32 [ 2048, %0 ], [ %5, %4 ]*/
if (((cur_state == LEGUP_F_main_BB_4_3) & (memory_controller_waitrequest == 1'd0)))
begin
main_1_2_phi_temp <= main_4_5;
if (^reset !== 1'bX && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %10*/
/*   %s.i2.0 = phi i32* [ %tmp1, %legup_memset_4.exit ], [ %15, %13 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5) & (memory_controller_waitrequest == 1'd0)))
begin
main_10_s_i2_0_phi_temp <= main_legup_memset_4_exit_tmp1_reg;
if (^reset !== 1'bX && ^(main_legup_memset_4_exit_tmp1_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_s_i2_0_phi_temp"); $finish; end
end
/* main: %10*/
/*   %s.i2.0 = phi i32* [ %tmp1, %legup_memset_4.exit ], [ %15, %13 ]*/
if (((cur_state == LEGUP_F_main_BB_13_7) & (memory_controller_waitrequest == 1'd0)))
begin
main_10_s_i2_0_phi_temp <= main_13_15;
if (^reset !== 1'bX && ^(main_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_s_i2_0_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %10*/
/*   %11 = phi i32 [ 2048, %legup_memset_4.exit ], [ %14, %13 ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5) & (memory_controller_waitrequest == 1'd0)))
begin
main_10_11_phi_temp <= 32'd2048;
if (^reset !== 1'bX && ^(32'd2048) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_11_phi_temp"); $finish; end
end
/* main: %10*/
/*   %11 = phi i32 [ 2048, %legup_memset_4.exit ], [ %14, %13 ]*/
if (((cur_state == LEGUP_F_main_BB_13_7) & (memory_controller_waitrequest == 1'd0)))
begin
main_10_11_phi_temp <= main_13_14;
if (^reset !== 1'bX && ^(main_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_11_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %19*/
/*   %20 = phi i32 [ 6, %legup_memset_4.exit3 ], [ %.pre4, %._crit_edge ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9) & (memory_controller_waitrequest == 1'd0)))
begin
main_19_20_phi_temp <= 32'd6;
if (^reset !== 1'bX && ^(32'd6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_20_phi_temp"); $finish; end
end
/* main: %19*/
/*   %20 = phi i32 [ 6, %legup_memset_4.exit3 ], [ %.pre4, %._crit_edge ]*/
if (((cur_state == LEGUP_F_main_BB___crit_edge_14) & (memory_controller_waitrequest == 1'd0)))
begin
main_19_20_phi_temp <= main___crit_edge__pre4;
if (^reset !== 1'bX && ^(main___crit_edge__pre4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_20_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %19*/
/*   %21 = phi i32 [ 1, %legup_memset_4.exit3 ], [ %.pre, %._crit_edge ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9) & (memory_controller_waitrequest == 1'd0)))
begin
main_19_21_phi_temp <= 32'd1;
if (^reset !== 1'bX && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_21_phi_temp"); $finish; end
end
/* main: %19*/
/*   %21 = phi i32 [ 1, %legup_memset_4.exit3 ], [ %.pre, %._crit_edge ]*/
if (((cur_state == LEGUP_F_main_BB___crit_edge_14) & (memory_controller_waitrequest == 1'd0)))
begin
main_19_21_phi_temp <= main___crit_edge__pre;
if (^reset !== 1'bX && ^(main___crit_edge__pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_21_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
/* main: %19*/
/*   %i.01 = phi i32 [ 0, %legup_memset_4.exit3 ], [ %23, %._crit_edge ]*/
if (((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9) & (memory_controller_waitrequest == 1'd0)))
begin
main_19_i_01_phi_temp <= 32'd0;
if (^reset !== 1'bX && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_i_01_phi_temp"); $finish; end
end
/* main: %19*/
/*   %i.01 = phi i32 [ 0, %legup_memset_4.exit3 ], [ %23, %._crit_edge ]*/
if (((cur_state == LEGUP_F_main_BB___crit_edge_14) & (memory_controller_waitrequest == 1'd0)))
begin
main_19_i_01_phi_temp <= main_19_23_reg;
if (^reset !== 1'bX && ^(main_19_23_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_19_i_01_phi_temp"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
finish <= 1'd0;
if (^reset !== 1'bX && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
/* main: %24*/
/*   ret i32 %26*/
if ((cur_state == LEGUP_F_main_BB_24_17))
begin
finish <= (memory_controller_waitrequest == 1'd0);
if (^reset !== 1'bX && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
end
end
always @(posedge clk) begin
if ((cur_state == LEGUP_0))
begin
return_val <= 0;
if (^reset !== 1'bX && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
/* main: %24*/
/*   ret i32 %26*/
if ((cur_state == LEGUP_F_main_BB_24_17))
begin
return_val <= main_24_26;
if (^reset !== 1'bX && ^(main_24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
end
end
always @(*) begin
memory_controller_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_a = 1'd0;
end
/* main: %4*/
/*   store i32 0, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_3))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 1, i32* %tmp, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 3, i32* %8, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 6, i32* %tmp1, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 3, i32* %17, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %19*/
/*   store i32 %22, i32* %scevgep3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_19_11))
begin
memory_controller_enable_a = 1'd1;
end
/* main: %._crit_edge*/
/*   %.pre = load i32* %scevgep.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___crit_edge_12))
begin
memory_controller_enable_a = 1'd1;
end
end
always @(*) begin
memory_controller_address_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_a = 0;
end
/* main: %4*/
/*   store i32 0, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_3))
begin
memory_controller_address_a = main_1_s_i_0_reg;
end
/* main: %legup_memset_4.exit*/
/*   store i32 1, i32* %tmp, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
memory_controller_address_a = main_0_tmp_reg;
end
/* main: %legup_memset_4.exit*/
/*   store i32 3, i32* %8, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5))
begin
memory_controller_address_a = main_legup_memset_4_exit_8_reg;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 6, i32* %tmp1, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
memory_controller_address_a = main_legup_memset_4_exit_tmp1_reg;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 3, i32* %17, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9))
begin
memory_controller_address_a = main_legup_memset_4_exit3_17_reg;
end
/* main: %19*/
/*   store i32 %22, i32* %scevgep3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_19_11))
begin
memory_controller_address_a = main_19_scevgep3_reg;
end
/* main: %._crit_edge*/
/*   %.pre = load i32* %scevgep.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___crit_edge_12))
begin
memory_controller_address_a = main___crit_edge_scevgep_phi_trans_insert;
end
end
always @(*) begin
memory_controller_write_enable_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_a = 1'd0;
end
/* main: %4*/
/*   store i32 0, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_3))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 1, i32* %tmp, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 3, i32* %8, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 6, i32* %tmp1, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 3, i32* %17, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %19*/
/*   store i32 %22, i32* %scevgep3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_19_11))
begin
memory_controller_write_enable_a = 1'd1;
end
/* main: %._crit_edge*/
/*   %.pre = load i32* %scevgep.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___crit_edge_12))
begin
memory_controller_write_enable_a = 1'd0;
end
end
always @(*) begin
memory_controller_in_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_a = 64'd0;
end
/* main: %4*/
/*   store i32 0, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_3))
begin
memory_controller_in_a = 32'd0;
end
/* main: %legup_memset_4.exit*/
/*   store i32 1, i32* %tmp, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
memory_controller_in_a = 32'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 3, i32* %8, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5))
begin
memory_controller_in_a = 32'd3;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 6, i32* %tmp1, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
memory_controller_in_a = 32'd6;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 3, i32* %17, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9))
begin
memory_controller_in_a = 32'd3;
end
/* main: %19*/
/*   store i32 %22, i32* %scevgep3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_19_11))
begin
memory_controller_in_a = {main_19_22_reg};
end
end
always @(*) begin
memory_controller_size_a = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_a = 2'd0;
end
/* main: %4*/
/*   store i32 0, i32* %s.i.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_4_3))
begin
memory_controller_size_a = 2'd2;
end
/* main: %legup_memset_4.exit*/
/*   store i32 1, i32* %tmp, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
memory_controller_size_a = 2'd2;
end
/* main: %legup_memset_4.exit*/
/*   store i32 3, i32* %8, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5))
begin
memory_controller_size_a = 2'd2;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 6, i32* %tmp1, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
memory_controller_size_a = 2'd2;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 3, i32* %17, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9))
begin
memory_controller_size_a = 2'd2;
end
/* main: %19*/
/*   store i32 %22, i32* %scevgep3, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_19_11))
begin
memory_controller_size_a = 2'd2;
end
/* main: %._crit_edge*/
/*   %.pre = load i32* %scevgep.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___crit_edge_12))
begin
memory_controller_size_a = 2'd2;
end
end
always @(*) begin
memory_controller_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_enable_b = 1'd0;
end
/* main: %legup_memset_4.exit*/
/*   store i32 2, i32* %7, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 4, i32* %9, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %13*/
/*   store i32 0, i32* %s.i2.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_13_7))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 4, i32* %16, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 5, i32* %18, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %._crit_edge*/
/*   %.pre4 = load i32* %scevgep2.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___crit_edge_12))
begin
memory_controller_enable_b = 1'd1;
end
/* main: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_15))
begin
memory_controller_enable_b = 1'd1;
end
end
always @(*) begin
memory_controller_address_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_address_b = 0;
end
/* main: %legup_memset_4.exit*/
/*   store i32 2, i32* %7, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
memory_controller_address_b = main_legup_memset_4_exit_7;
end
/* main: %legup_memset_4.exit*/
/*   store i32 4, i32* %9, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5))
begin
memory_controller_address_b = main_legup_memset_4_exit_9_reg;
end
/* main: %13*/
/*   store i32 0, i32* %s.i2.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_13_7))
begin
memory_controller_address_b = main_10_s_i2_0_reg;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 4, i32* %16, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
memory_controller_address_b = main_legup_memset_4_exit3_16;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 5, i32* %18, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9))
begin
memory_controller_address_b = main_legup_memset_4_exit3_18_reg;
end
/* main: %._crit_edge*/
/*   %.pre4 = load i32* %scevgep2.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___crit_edge_12))
begin
memory_controller_address_b = main___crit_edge_scevgep2_phi_trans_insert;
end
/* main: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_15))
begin
memory_controller_address_b = main_24_25;
end
end
always @(*) begin
memory_controller_write_enable_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %legup_memset_4.exit*/
/*   store i32 2, i32* %7, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit*/
/*   store i32 4, i32* %9, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %13*/
/*   store i32 0, i32* %s.i2.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_13_7))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 4, i32* %16, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 5, i32* %18, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9))
begin
memory_controller_write_enable_b = 1'd1;
end
/* main: %._crit_edge*/
/*   %.pre4 = load i32* %scevgep2.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___crit_edge_12))
begin
memory_controller_write_enable_b = 1'd0;
end
/* main: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_15))
begin
memory_controller_write_enable_b = 1'd0;
end
end
always @(*) begin
memory_controller_in_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_in_b = 64'd0;
end
/* main: %legup_memset_4.exit*/
/*   store i32 2, i32* %7, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
memory_controller_in_b = 32'd2;
end
/* main: %legup_memset_4.exit*/
/*   store i32 4, i32* %9, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5))
begin
memory_controller_in_b = 32'd4;
end
/* main: %13*/
/*   store i32 0, i32* %s.i2.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_13_7))
begin
memory_controller_in_b = 32'd0;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 4, i32* %16, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
memory_controller_in_b = 32'd4;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 5, i32* %18, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9))
begin
memory_controller_in_b = 32'd5;
end
end
always @(*) begin
memory_controller_size_b = 1'd0;
if ((cur_state == LEGUP_0))
begin
memory_controller_size_b = 2'd0;
end
/* main: %legup_memset_4.exit*/
/*   store i32 2, i32* %7, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_4))
begin
memory_controller_size_b = 2'd2;
end
/* main: %legup_memset_4.exit*/
/*   store i32 4, i32* %9, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit_5))
begin
memory_controller_size_b = 2'd2;
end
/* main: %13*/
/*   store i32 0, i32* %s.i2.0, align 4*/
if ((cur_state == LEGUP_F_main_BB_13_7))
begin
memory_controller_size_b = 2'd2;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 4, i32* %16, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_8))
begin
memory_controller_size_b = 2'd2;
end
/* main: %legup_memset_4.exit3*/
/*   store i32 5, i32* %18, align 4*/
if ((cur_state == LEGUP_F_main_BB_legup_memset_4_exit3_9))
begin
memory_controller_size_b = 2'd2;
end
/* main: %._crit_edge*/
/*   %.pre4 = load i32* %scevgep2.phi.trans.insert, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB___crit_edge_12))
begin
memory_controller_size_b = 2'd2;
end
/* main: %24*/
/*   %26 = load i32* %25, align 4, !tbaa !0*/
if ((cur_state == LEGUP_F_main_BB_24_15))
begin
memory_controller_size_b = 2'd2;
end
end

endmodule 
`timescale 1 ns / 1 ns
module ram_dual_port
(
	clk,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	q_a,
	q_b,
	byteena_a,
	byteena_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;

input  clk;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
output [(width_a-1):0] q_a;
output [(width_b-1):0] q_b;
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;
reg  clk_wire;


altsyncram altsyncram_component (
	.clock0 (clk_wire),
	.clock1 (1'd1),
	.clocken0 (1'd1),
	.clocken1 (1'd1),
	.clocken2 (1'd1),
	.clocken3 (1'd1),
	.aclr0 (1'd0),
	.aclr1 (1'd0),
	.addressstall_a (1'd0),
	.addressstall_b (1'd0),
	.eccstatus (),
	.address_a (address_a),
	.address_b (address_b),
	.wren_a (wren_a),
	.wren_b (wren_b),
	.rden_a (1'd1),
	.rden_b (1'd1),
	.data_a (data_a),
	.data_b (data_b),
	.q_a (q_a),
	.q_b (q_b),
	.byteena_a (byteena_a),
	.byteena_b (byteena_b)
);

defparam
	altsyncram_component.operation_mode = "BIDIR_DUAL_PORT",
	altsyncram_component.read_during_write_mode_mixed_ports = "OLD_DATA",
	altsyncram_component.init_file = init_file,
	altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
	altsyncram_component.lpm_type = "altsyncram",
	altsyncram_component.power_up_uninitialized = "FALSE",
	altsyncram_component.intended_device_family = "Cyclone II",
	altsyncram_component.clock_enable_input_a = "BYPASS",
	altsyncram_component.clock_enable_input_b = "BYPASS",
	altsyncram_component.clock_enable_output_a = "BYPASS",
	altsyncram_component.clock_enable_output_b = "BYPASS",
	altsyncram_component.outdata_aclr_a = "NONE",
	altsyncram_component.outdata_aclr_b = "NONE",
	altsyncram_component.outdata_reg_a = "UNREGISTERED",
	altsyncram_component.outdata_reg_b = "UNREGISTERED",
	altsyncram_component.numwords_a = numwords_a,
	altsyncram_component.numwords_b = numwords_b,
	altsyncram_component.widthad_a = widthad_a,
	altsyncram_component.widthad_b = widthad_b,
	altsyncram_component.width_a = width_a,
	altsyncram_component.width_b = width_b,
	altsyncram_component.address_reg_b = "CLOCK0",
	altsyncram_component.byteena_reg_b = "CLOCK0",
	altsyncram_component.indata_reg_b = "CLOCK0",
	altsyncram_component.wrcontrol_wraddress_reg_b = "CLOCK0",
	altsyncram_component.width_byteena_a = width_be_a,
	altsyncram_component.width_byteena_b = width_be_b;


always @(*) begin
clk_wire = clk;
end

endmodule 
module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);
    input CLOCK_50;
    output [7:0] LEDG;
    input [1:0] KEY;
    input [15:0] SW;
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;

    wire  clk;
    wire reset = ~KEY[0];
    wire go = ~KEY[1];

    wire  start;
    wire [31:0] return_val;
    wire  finish;

    reg [31:0] return_val_reg;
    
    hex_digits h7( .x(return_val_reg[31:28]), .hex_LEDs(HEX7));
    hex_digits h6( .x(return_val_reg[27:24]), .hex_LEDs(HEX6));
    hex_digits h5( .x(return_val_reg[23:20]), .hex_LEDs(HEX5));
    hex_digits h4( .x(return_val_reg[19:16]), .hex_LEDs(HEX4));
    hex_digits h3( .x(return_val_reg[15:12]), .hex_LEDs(HEX3));
    hex_digits h2( .x(return_val_reg[11:8]), .hex_LEDs(HEX2));
    hex_digits h1( .x(return_val_reg[7:4]), .hex_LEDs(HEX1));
    hex_digits h0( .x(return_val_reg[3:0]), .hex_LEDs(HEX0));


    top top_inst (
        .clk (clk),
        .reset (reset),
        .start (start),
        .finish (finish),
        .return_val (return_val)
    );

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);
endmodule

module de4 (
	OSC_50_BANK2,
    BUTTON,
    LED,
	SEG0_D,
	SEG1_D
);
    input OSC_50_BANK2;
    input [1:0] BUTTON;
    output [6:0] SEG0_D;
    output [6:0] SEG1_D;
    output [7:0] LED;

    de2 de2_inst (
        .CLOCK_50 (OSC_50_BANK2),
        .LEDG (LED),
        .KEY (BUTTON),
        .SW (),
        .HEX0 (SEG0_D),
        .HEX1 (SEG1_D),
        .HEX2 (),
        .HEX3 (),
        .HEX4 (),
        .HEX5 (),
        .HEX6 (),
        .HEX7 ()
    );

endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;

end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

endmodule 
